
FinalSmart2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005e24  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000020a  00800060  00005e24  00005eb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  0080026a  0080026a  000060c2  2**0
                  ALLOC
  3 .stab         0000612c  00000000  00000000  000060c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002283  00000000  00000000  0000c1f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000e473  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000e5b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000e723  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0001036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00011257  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00012004  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00012164  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000123f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00012bbf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e2       	ldi	r30, 0x24	; 36
      68:	fe e5       	ldi	r31, 0x5E	; 94
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	aa e6       	ldi	r26, 0x6A	; 106
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 36       	cpi	r26, 0x6F	; 111
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 57 1f 	call	0x3eae	; 0x3eae <main>
      8a:	0c 94 10 2f 	jmp	0x5e20	; 0x5e20 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d9 2e 	jmp	0x5db2	; 0x5db2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e4       	ldi	r26, 0x44	; 68
     128:	b2 e0       	ldi	r27, 0x02	; 2
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f5 2e 	jmp	0x5dea	; 0x5dea <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e5 2e 	jmp	0x5dca	; 0x5dca <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 01 2f 	jmp	0x5e02	; 0x5e02 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e5 2e 	jmp	0x5dca	; 0x5dca <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 01 2f 	jmp	0x5e02	; 0x5e02 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d9 2e 	jmp	0x5db2	; 0x5db2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 e4       	ldi	r24, 0x44	; 68
     496:	92 e0       	ldi	r25, 0x02	; 2
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f5 2e 	jmp	0x5dea	; 0x5dea <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e5 2e 	jmp	0x5dca	; 0x5dca <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 01 2f 	jmp	0x5e02	; 0x5e02 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 e5 2e 	jmp	0x5dca	; 0x5dca <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 01 2f 	jmp	0x5e02	; 0x5e02 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 e5 2e 	jmp	0x5dca	; 0x5dca <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 01 2f 	jmp	0x5e02	; 0x5e02 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 e9 2e 	jmp	0x5dd2	; 0x5dd2 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 05 2f 	jmp	0x5e0a	; 0x5e0a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <app_init>:
 * @brief Initializes the system hardware.
 *
 * This function sets up the UART, LCD, servo motor, and light control pin.
 * It also resets the number of login trials stored in EEPROM.
 */
void app_init(void) {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	// Initialize TX (Transmit) and RX (Receive) for UART (Bluetooth)
	//vSet_Pin_Direction(PORT_D, PIN_0, INPUT);   // RXD as input
	//vSet_Pin_Direction(PORT_D, PIN_1, OUTPUT);  // TXD as output

	//MUART_voidInit(); // Initialize UART for communication
	vLCD_init(); // Initialize LCD display
     b4e:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <vLCD_init>
	SERVO_app(); // Initialize servo application
     b52:	0e 94 d6 17 	call	0x2fac	; 0x2fac <SERVO_app>
	MADC_VoidInit();  // Initialize ADC
     b56:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <MADC_VoidInit>
	vTIMER2_Init(); //initialize timer2
     b5a:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <vTIMER2_Init>



	// Set pin directions for various ports
	vSet_Pin_Direction(PORT_A, PIN_3, OUTPUT); // Set pin 3 of PORT_A as output (e.g., LED)
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	63 e0       	ldi	r22, 0x03	; 3
     b62:	41 e0       	ldi	r20, 0x01	; 1
     b64:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <vSet_Pin_Direction>
	vSet_Pin_Direction(PORT_A, PIN_4, OUTPUT); // Set pin 4 of PORT_A as output (e.g., Buzzer)
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	64 e0       	ldi	r22, 0x04	; 4
     b6c:	41 e0       	ldi	r20, 0x01	; 1
     b6e:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <vSet_Pin_Direction>
	vSet_Pin_Direction(PORT_A, PIN_7, INPUT);  // Set pin 7 of PORT_A as input (e.g., ADC for LM35)
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	67 e0       	ldi	r22, 0x07	; 7
     b76:	40 e0       	ldi	r20, 0x00	; 0
     b78:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <vSet_Pin_Direction>
	vSet_Pin_Direction(PORT_D, PIN_7, OUTPUT);  // Set pin 7 of PORT_D as output (e.g., FAN)
     b7c:	83 e0       	ldi	r24, 0x03	; 3
     b7e:	67 e0       	ldi	r22, 0x07	; 7
     b80:	41 e0       	ldi	r20, 0x01	; 1
     b82:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <vSet_Pin_Direction>
	vSet_Pin_Direction(PORT_C, PIN_5, OUTPUT);  // Set pin 5 of PORT_C as output (e.g., Temp warning LED)
     b86:	82 e0       	ldi	r24, 0x02	; 2
     b88:	65 e0       	ldi	r22, 0x05	; 5
     b8a:	41 e0       	ldi	r20, 0x01	; 1
     b8c:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <vSet_Pin_Direction>

	vSet_Pin_Direction(PORT_A, PIN_0, INPUT);  // Set pin 0 of PORT_A as input (e.g., ADC for LDR)
     b90:	80 e0       	ldi	r24, 0x00	; 0
     b92:	60 e0       	ldi	r22, 0x00	; 0
     b94:	40 e0       	ldi	r20, 0x00	; 0
     b96:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <vSet_Pin_Direction>
	vSet_Pin_Direction(PORT_C, PIN_2, OUTPUT); // ROOM1 LDR
     b9a:	82 e0       	ldi	r24, 0x02	; 2
     b9c:	62 e0       	ldi	r22, 0x02	; 2
     b9e:	41 e0       	ldi	r20, 0x01	; 1
     ba0:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <vSet_Pin_Direction>
	vSet_Pin_Direction(PORT_C, PIN_3, OUTPUT); // ROOM2 LDR
     ba4:	82 e0       	ldi	r24, 0x02	; 2
     ba6:	63 e0       	ldi	r22, 0x03	; 3
     ba8:	41 e0       	ldi	r20, 0x01	; 1
     baa:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <vSet_Pin_Direction>
	vSet_Pin_Direction(PORT_C, PIN_4, OUTPUT); // ROOM3 LDR
     bae:	82 e0       	ldi	r24, 0x02	; 2
     bb0:	64 e0       	ldi	r22, 0x04	; 4
     bb2:	41 e0       	ldi	r20, 0x01	; 1
     bb4:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <vSet_Pin_Direction>


	EEPROM_voidSendDataByte(NUM_OF_TRIALS_ADDR, 0);
     bb8:	89 e1       	ldi	r24, 0x19	; 25
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	60 e0       	ldi	r22, 0x00	; 0
     bbe:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <EEPROM_voidSendDataByte>

	vKEYPAD_init();
     bc2:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <vKEYPAD_init>

}
     bc6:	cf 91       	pop	r28
     bc8:	df 91       	pop	r29
     bca:	08 95       	ret

00000bcc <welcome_message>:
/**
 * @brief Displays a welcome message on the LCD.
 *
 * This function clears the LCD and displays a welcome message for the user.
 */
void welcome_message(void) {
     bcc:	df 93       	push	r29
     bce:	cf 93       	push	r28
     bd0:	cd b7       	in	r28, 0x3d	; 61
     bd2:	de b7       	in	r29, 0x3e	; 62
	vLCD_Clear();
     bd4:	0e 94 4c 1c 	call	0x3898	; 0x3898 <vLCD_Clear>
	vLCD_Send_String("***Smart Home***");
     bd8:	80 e6       	ldi	r24, 0x60	; 96
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	0e 94 05 1c 	call	0x380a	; 0x380a <vLCD_Send_String>
	vLCD_GO_TO(2,0);
     be0:	82 e0       	ldi	r24, 0x02	; 2
     be2:	60 e0       	ldi	r22, 0x00	; 0
     be4:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <vLCD_GO_TO>
	vLCD_Send_String("    Welcome!");
     be8:	81 e7       	ldi	r24, 0x71	; 113
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	0e 94 05 1c 	call	0x380a	; 0x380a <vLCD_Send_String>
}
     bf0:	cf 91       	pop	r28
     bf2:	df 91       	pop	r29
     bf4:	08 95       	ret

00000bf6 <get_input>:
 * @return u8 The actual length of the input received.
 *
 * This function receives input from the user via Bluetooth and stores it in the provided buffer.
 * It displays '*' on the LCD for each character to maintain security.
 */
u8 get_input(u8* input, u8 length) {
     bf6:	df 93       	push	r29
     bf8:	cf 93       	push	r28
     bfa:	cd b7       	in	r28, 0x3d	; 61
     bfc:	de b7       	in	r29, 0x3e	; 62
     bfe:	63 97       	sbiw	r28, 0x13	; 19
     c00:	0f b6       	in	r0, 0x3f	; 63
     c02:	f8 94       	cli
     c04:	de bf       	out	0x3e, r29	; 62
     c06:	0f be       	out	0x3f, r0	; 63
     c08:	cd bf       	out	0x3d, r28	; 61
     c0a:	9a 8b       	std	Y+18, r25	; 0x12
     c0c:	89 8b       	std	Y+17, r24	; 0x11
     c0e:	6b 8b       	std	Y+19, r22	; 0x13
    u8 cnt = 0;
     c10:	18 8a       	std	Y+16, r1	; 0x10
     c12:	8c c0       	rjmp	.+280    	; 0xd2c <get_input+0x136>
    u8 key;

    while (cnt < length) {
        key = u8KEY_PRESSED();  // Get keypress from keypad
     c14:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <u8KEY_PRESSED>
     c18:	8f 87       	std	Y+15, r24	; 0x0f
        if (key == '=') {  // Use '=' as an end-of-input signal
     c1a:	8f 85       	ldd	r24, Y+15	; 0x0f
     c1c:	8d 33       	cpi	r24, 0x3D	; 61
     c1e:	09 f4       	brne	.+2      	; 0xc22 <get_input+0x2c>
     c20:	8a c0       	rjmp	.+276    	; 0xd36 <get_input+0x140>
            break;  // Exit loop if '=' is pressed
        } else if (key != 0xFF) {  // If a valid key is pressed (not 0xFF which means no key pressed)
     c22:	8f 85       	ldd	r24, Y+15	; 0x0f
     c24:	8f 3f       	cpi	r24, 0xFF	; 255
     c26:	81 f0       	breq	.+32     	; 0xc48 <get_input+0x52>
            input[cnt++] = key;
     c28:	88 89       	ldd	r24, Y+16	; 0x10
     c2a:	28 2f       	mov	r18, r24
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	89 89       	ldd	r24, Y+17	; 0x11
     c30:	9a 89       	ldd	r25, Y+18	; 0x12
     c32:	fc 01       	movw	r30, r24
     c34:	e2 0f       	add	r30, r18
     c36:	f3 1f       	adc	r31, r19
     c38:	8f 85       	ldd	r24, Y+15	; 0x0f
     c3a:	80 83       	st	Z, r24
     c3c:	88 89       	ldd	r24, Y+16	; 0x10
     c3e:	8f 5f       	subi	r24, 0xFF	; 255
     c40:	88 8b       	std	Y+16, r24	; 0x10
            vLCD_sendDATA('*');  // Display '*' on LCD for security
     c42:	8a e2       	ldi	r24, 0x2A	; 42
     c44:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <vLCD_sendDATA>
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	a6 e9       	ldi	r26, 0x96	; 150
     c4e:	b3 e4       	ldi	r27, 0x43	; 67
     c50:	8b 87       	std	Y+11, r24	; 0x0b
     c52:	9c 87       	std	Y+12, r25	; 0x0c
     c54:	ad 87       	std	Y+13, r26	; 0x0d
     c56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c58:	6b 85       	ldd	r22, Y+11	; 0x0b
     c5a:	7c 85       	ldd	r23, Y+12	; 0x0c
     c5c:	8d 85       	ldd	r24, Y+13	; 0x0d
     c5e:	9e 85       	ldd	r25, Y+14	; 0x0e
     c60:	20 e0       	ldi	r18, 0x00	; 0
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	4a ef       	ldi	r20, 0xFA	; 250
     c66:	54 e4       	ldi	r21, 0x44	; 68
     c68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c6c:	dc 01       	movw	r26, r24
     c6e:	cb 01       	movw	r24, r22
     c70:	8f 83       	std	Y+7, r24	; 0x07
     c72:	98 87       	std	Y+8, r25	; 0x08
     c74:	a9 87       	std	Y+9, r26	; 0x09
     c76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c78:	6f 81       	ldd	r22, Y+7	; 0x07
     c7a:	78 85       	ldd	r23, Y+8	; 0x08
     c7c:	89 85       	ldd	r24, Y+9	; 0x09
     c7e:	9a 85       	ldd	r25, Y+10	; 0x0a
     c80:	20 e0       	ldi	r18, 0x00	; 0
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	40 e8       	ldi	r20, 0x80	; 128
     c86:	5f e3       	ldi	r21, 0x3F	; 63
     c88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c8c:	88 23       	and	r24, r24
     c8e:	2c f4       	brge	.+10     	; 0xc9a <get_input+0xa4>
		__ticks = 1;
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	9e 83       	std	Y+6, r25	; 0x06
     c96:	8d 83       	std	Y+5, r24	; 0x05
     c98:	3f c0       	rjmp	.+126    	; 0xd18 <get_input+0x122>
	else if (__tmp > 65535)
     c9a:	6f 81       	ldd	r22, Y+7	; 0x07
     c9c:	78 85       	ldd	r23, Y+8	; 0x08
     c9e:	89 85       	ldd	r24, Y+9	; 0x09
     ca0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ca2:	20 e0       	ldi	r18, 0x00	; 0
     ca4:	3f ef       	ldi	r19, 0xFF	; 255
     ca6:	4f e7       	ldi	r20, 0x7F	; 127
     ca8:	57 e4       	ldi	r21, 0x47	; 71
     caa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cae:	18 16       	cp	r1, r24
     cb0:	4c f5       	brge	.+82     	; 0xd04 <get_input+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cb2:	6b 85       	ldd	r22, Y+11	; 0x0b
     cb4:	7c 85       	ldd	r23, Y+12	; 0x0c
     cb6:	8d 85       	ldd	r24, Y+13	; 0x0d
     cb8:	9e 85       	ldd	r25, Y+14	; 0x0e
     cba:	20 e0       	ldi	r18, 0x00	; 0
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	40 e2       	ldi	r20, 0x20	; 32
     cc0:	51 e4       	ldi	r21, 0x41	; 65
     cc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cc6:	dc 01       	movw	r26, r24
     cc8:	cb 01       	movw	r24, r22
     cca:	bc 01       	movw	r22, r24
     ccc:	cd 01       	movw	r24, r26
     cce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cd2:	dc 01       	movw	r26, r24
     cd4:	cb 01       	movw	r24, r22
     cd6:	9e 83       	std	Y+6, r25	; 0x06
     cd8:	8d 83       	std	Y+5, r24	; 0x05
     cda:	0f c0       	rjmp	.+30     	; 0xcfa <get_input+0x104>
     cdc:	88 ec       	ldi	r24, 0xC8	; 200
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	9c 83       	std	Y+4, r25	; 0x04
     ce2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ce4:	8b 81       	ldd	r24, Y+3	; 0x03
     ce6:	9c 81       	ldd	r25, Y+4	; 0x04
     ce8:	01 97       	sbiw	r24, 0x01	; 1
     cea:	f1 f7       	brne	.-4      	; 0xce8 <get_input+0xf2>
     cec:	9c 83       	std	Y+4, r25	; 0x04
     cee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cf0:	8d 81       	ldd	r24, Y+5	; 0x05
     cf2:	9e 81       	ldd	r25, Y+6	; 0x06
     cf4:	01 97       	sbiw	r24, 0x01	; 1
     cf6:	9e 83       	std	Y+6, r25	; 0x06
     cf8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cfa:	8d 81       	ldd	r24, Y+5	; 0x05
     cfc:	9e 81       	ldd	r25, Y+6	; 0x06
     cfe:	00 97       	sbiw	r24, 0x00	; 0
     d00:	69 f7       	brne	.-38     	; 0xcdc <get_input+0xe6>
     d02:	14 c0       	rjmp	.+40     	; 0xd2c <get_input+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d04:	6f 81       	ldd	r22, Y+7	; 0x07
     d06:	78 85       	ldd	r23, Y+8	; 0x08
     d08:	89 85       	ldd	r24, Y+9	; 0x09
     d0a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d10:	dc 01       	movw	r26, r24
     d12:	cb 01       	movw	r24, r22
     d14:	9e 83       	std	Y+6, r25	; 0x06
     d16:	8d 83       	std	Y+5, r24	; 0x05
     d18:	8d 81       	ldd	r24, Y+5	; 0x05
     d1a:	9e 81       	ldd	r25, Y+6	; 0x06
     d1c:	9a 83       	std	Y+2, r25	; 0x02
     d1e:	89 83       	std	Y+1, r24	; 0x01
     d20:	89 81       	ldd	r24, Y+1	; 0x01
     d22:	9a 81       	ldd	r25, Y+2	; 0x02
     d24:	01 97       	sbiw	r24, 0x01	; 1
     d26:	f1 f7       	brne	.-4      	; 0xd24 <get_input+0x12e>
     d28:	9a 83       	std	Y+2, r25	; 0x02
     d2a:	89 83       	std	Y+1, r24	; 0x01
 */
u8 get_input(u8* input, u8 length) {
    u8 cnt = 0;
    u8 key;

    while (cnt < length) {
     d2c:	98 89       	ldd	r25, Y+16	; 0x10
     d2e:	8b 89       	ldd	r24, Y+19	; 0x13
     d30:	98 17       	cp	r25, r24
     d32:	08 f4       	brcc	.+2      	; 0xd36 <get_input+0x140>
     d34:	6f cf       	rjmp	.-290    	; 0xc14 <get_input+0x1e>
            input[cnt++] = key;
            vLCD_sendDATA('*');  // Display '*' on LCD for security
        }
        _delay_ms(300);  // Delay to avoid multiple key presses being registered
    }
    return cnt;  // Return the length of the input
     d36:	88 89       	ldd	r24, Y+16	; 0x10
}
     d38:	63 96       	adiw	r28, 0x13	; 19
     d3a:	0f b6       	in	r0, 0x3f	; 63
     d3c:	f8 94       	cli
     d3e:	de bf       	out	0x3e, r29	; 62
     d40:	0f be       	out	0x3f, r0	; 63
     d42:	cd bf       	out	0x3d, r28	; 61
     d44:	cf 91       	pop	r28
     d46:	df 91       	pop	r29
     d48:	08 95       	ret

00000d4a <compare>:
 * @param length Length of the strings to compare.
 * @return u8 Returns 1 if the strings match, 0 otherwise.
 *
 * This function compares two strings of the specified length and returns 1 if they are identical.
 */
u8 compare(const u8* input1, const u8* input2, u8 length) {
     d4a:	df 93       	push	r29
     d4c:	cf 93       	push	r28
     d4e:	cd b7       	in	r28, 0x3d	; 61
     d50:	de b7       	in	r29, 0x3e	; 62
     d52:	28 97       	sbiw	r28, 0x08	; 8
     d54:	0f b6       	in	r0, 0x3f	; 63
     d56:	f8 94       	cli
     d58:	de bf       	out	0x3e, r29	; 62
     d5a:	0f be       	out	0x3f, r0	; 63
     d5c:	cd bf       	out	0x3d, r28	; 61
     d5e:	9a 83       	std	Y+2, r25	; 0x02
     d60:	89 83       	std	Y+1, r24	; 0x01
     d62:	7c 83       	std	Y+4, r23	; 0x04
     d64:	6b 83       	std	Y+3, r22	; 0x03
     d66:	4d 83       	std	Y+5, r20	; 0x05
     d68:	1a c0       	rjmp	.+52     	; 0xd9e <compare+0x54>
	while (length--) {
		if (*input1++ != *input2++) return 0;
     d6a:	e9 81       	ldd	r30, Y+1	; 0x01
     d6c:	fa 81       	ldd	r31, Y+2	; 0x02
     d6e:	90 81       	ld	r25, Z
     d70:	eb 81       	ldd	r30, Y+3	; 0x03
     d72:	fc 81       	ldd	r31, Y+4	; 0x04
     d74:	80 81       	ld	r24, Z
     d76:	1f 82       	std	Y+7, r1	; 0x07
     d78:	98 17       	cp	r25, r24
     d7a:	11 f0       	breq	.+4      	; 0xd80 <compare+0x36>
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	8f 83       	std	Y+7, r24	; 0x07
     d80:	89 81       	ldd	r24, Y+1	; 0x01
     d82:	9a 81       	ldd	r25, Y+2	; 0x02
     d84:	01 96       	adiw	r24, 0x01	; 1
     d86:	9a 83       	std	Y+2, r25	; 0x02
     d88:	89 83       	std	Y+1, r24	; 0x01
     d8a:	8b 81       	ldd	r24, Y+3	; 0x03
     d8c:	9c 81       	ldd	r25, Y+4	; 0x04
     d8e:	01 96       	adiw	r24, 0x01	; 1
     d90:	9c 83       	std	Y+4, r25	; 0x04
     d92:	8b 83       	std	Y+3, r24	; 0x03
     d94:	8f 81       	ldd	r24, Y+7	; 0x07
     d96:	88 23       	and	r24, r24
     d98:	11 f0       	breq	.+4      	; 0xd9e <compare+0x54>
     d9a:	1e 82       	std	Y+6, r1	; 0x06
     d9c:	0f c0       	rjmp	.+30     	; 0xdbc <compare+0x72>
 * @return u8 Returns 1 if the strings match, 0 otherwise.
 *
 * This function compares two strings of the specified length and returns 1 if they are identical.
 */
u8 compare(const u8* input1, const u8* input2, u8 length) {
	while (length--) {
     d9e:	8d 81       	ldd	r24, Y+5	; 0x05
     da0:	88 87       	std	Y+8, r24	; 0x08
     da2:	88 85       	ldd	r24, Y+8	; 0x08
     da4:	88 23       	and	r24, r24
     da6:	11 f0       	breq	.+4      	; 0xdac <compare+0x62>
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	88 87       	std	Y+8, r24	; 0x08
     dac:	88 85       	ldd	r24, Y+8	; 0x08
     dae:	9d 81       	ldd	r25, Y+5	; 0x05
     db0:	91 50       	subi	r25, 0x01	; 1
     db2:	9d 83       	std	Y+5, r25	; 0x05
     db4:	88 23       	and	r24, r24
     db6:	c9 f6       	brne	.-78     	; 0xd6a <compare+0x20>
		if (*input1++ != *input2++) return 0;
	}
	return 1;
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	8e 83       	std	Y+6, r24	; 0x06
     dbc:	8e 81       	ldd	r24, Y+6	; 0x06
}
     dbe:	28 96       	adiw	r28, 0x08	; 8
     dc0:	0f b6       	in	r0, 0x3f	; 63
     dc2:	f8 94       	cli
     dc4:	de bf       	out	0x3e, r29	; 62
     dc6:	0f be       	out	0x3f, r0	; 63
     dc8:	cd bf       	out	0x3d, r28	; 61
     dca:	cf 91       	pop	r28
     dcc:	df 91       	pop	r29
     dce:	08 95       	ret

00000dd0 <find_next_empty_user_slot>:
 *
 * @return u8 Returns the index of the next available slot or MAX_USERS if no slots are available.
 *
 * This function searches EEPROM for an available slot to store a new user's credentials.
 */
u8 find_next_empty_user_slot(void) {
     dd0:	df 93       	push	r29
     dd2:	cf 93       	push	r28
     dd4:	00 d0       	rcall	.+0      	; 0xdd6 <find_next_empty_user_slot+0x6>
     dd6:	cd b7       	in	r28, 0x3d	; 61
     dd8:	de b7       	in	r29, 0x3e	; 62
	for (u8 user = 0; user < MAX_USERS; user++) {
     dda:	19 82       	std	Y+1, r1	; 0x01
     ddc:	15 c0       	rjmp	.+42     	; 0xe08 <find_next_empty_user_slot+0x38>
		if (EEPROM_u8ReadDataByte(user * USERNAME_LENGTH + 0x0010) == 0xFF) {
     dde:	89 81       	ldd	r24, Y+1	; 0x01
     de0:	28 2f       	mov	r18, r24
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	c9 01       	movw	r24, r18
     de6:	88 0f       	add	r24, r24
     de8:	99 1f       	adc	r25, r25
     dea:	88 0f       	add	r24, r24
     dec:	99 1f       	adc	r25, r25
     dee:	82 0f       	add	r24, r18
     df0:	93 1f       	adc	r25, r19
     df2:	40 96       	adiw	r24, 0x10	; 16
     df4:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <EEPROM_u8ReadDataByte>
     df8:	8f 3f       	cpi	r24, 0xFF	; 255
     dfa:	19 f4       	brne	.+6      	; 0xe02 <find_next_empty_user_slot+0x32>
			return user;
     dfc:	89 81       	ldd	r24, Y+1	; 0x01
     dfe:	8a 83       	std	Y+2, r24	; 0x02
     e00:	08 c0       	rjmp	.+16     	; 0xe12 <find_next_empty_user_slot+0x42>
 * @return u8 Returns the index of the next available slot or MAX_USERS if no slots are available.
 *
 * This function searches EEPROM for an available slot to store a new user's credentials.
 */
u8 find_next_empty_user_slot(void) {
	for (u8 user = 0; user < MAX_USERS; user++) {
     e02:	89 81       	ldd	r24, Y+1	; 0x01
     e04:	8f 5f       	subi	r24, 0xFF	; 255
     e06:	89 83       	std	Y+1, r24	; 0x01
     e08:	89 81       	ldd	r24, Y+1	; 0x01
     e0a:	8a 30       	cpi	r24, 0x0A	; 10
     e0c:	40 f3       	brcs	.-48     	; 0xdde <find_next_empty_user_slot+0xe>
		if (EEPROM_u8ReadDataByte(user * USERNAME_LENGTH + 0x0010) == 0xFF) {
			return user;
		}
	}
	return MAX_USERS;  // No available slot
     e0e:	8a e0       	ldi	r24, 0x0A	; 10
     e10:	8a 83       	std	Y+2, r24	; 0x02
     e12:	8a 81       	ldd	r24, Y+2	; 0x02
}
     e14:	0f 90       	pop	r0
     e16:	0f 90       	pop	r0
     e18:	cf 91       	pop	r28
     e1a:	df 91       	pop	r29
     e1c:	08 95       	ret

00000e1e <store_credentials>:
 * @param password Pointer to the password string.
 * @param password_len Length of the password.
 *
 * This function writes the username and password of a new user to the specified EEPROM slot.
 */
void store_credentials(u8 user_slot, const u8* username, u8 username_len, const u8* password, u8 password_len) {
     e1e:	0f 93       	push	r16
     e20:	df 93       	push	r29
     e22:	cf 93       	push	r28
     e24:	cd b7       	in	r28, 0x3d	; 61
     e26:	de b7       	in	r29, 0x3e	; 62
     e28:	29 97       	sbiw	r28, 0x09	; 9
     e2a:	0f b6       	in	r0, 0x3f	; 63
     e2c:	f8 94       	cli
     e2e:	de bf       	out	0x3e, r29	; 62
     e30:	0f be       	out	0x3f, r0	; 63
     e32:	cd bf       	out	0x3d, r28	; 61
     e34:	8b 83       	std	Y+3, r24	; 0x03
     e36:	7d 83       	std	Y+5, r23	; 0x05
     e38:	6c 83       	std	Y+4, r22	; 0x04
     e3a:	4e 83       	std	Y+6, r20	; 0x06
     e3c:	38 87       	std	Y+8, r19	; 0x08
     e3e:	2f 83       	std	Y+7, r18	; 0x07
     e40:	09 87       	std	Y+9, r16	; 0x09
	for (u8 i = 0; i < username_len; i++) {
     e42:	1a 82       	std	Y+2, r1	; 0x02
     e44:	21 c0       	rjmp	.+66     	; 0xe88 <store_credentials+0x6a>
		EEPROM_voidSendDataByte(user_slot * USERNAME_LENGTH + i + 0x0010, username[i]);
     e46:	8b 81       	ldd	r24, Y+3	; 0x03
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	c9 01       	movw	r24, r18
     e4e:	88 0f       	add	r24, r24
     e50:	99 1f       	adc	r25, r25
     e52:	88 0f       	add	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	28 0f       	add	r18, r24
     e58:	39 1f       	adc	r19, r25
     e5a:	8a 81       	ldd	r24, Y+2	; 0x02
     e5c:	88 2f       	mov	r24, r24
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	82 0f       	add	r24, r18
     e62:	93 1f       	adc	r25, r19
     e64:	40 96       	adiw	r24, 0x10	; 16
     e66:	ac 01       	movw	r20, r24
     e68:	8a 81       	ldd	r24, Y+2	; 0x02
     e6a:	28 2f       	mov	r18, r24
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	8c 81       	ldd	r24, Y+4	; 0x04
     e70:	9d 81       	ldd	r25, Y+5	; 0x05
     e72:	fc 01       	movw	r30, r24
     e74:	e2 0f       	add	r30, r18
     e76:	f3 1f       	adc	r31, r19
     e78:	20 81       	ld	r18, Z
     e7a:	ca 01       	movw	r24, r20
     e7c:	62 2f       	mov	r22, r18
     e7e:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <EEPROM_voidSendDataByte>
 * @param password_len Length of the password.
 *
 * This function writes the username and password of a new user to the specified EEPROM slot.
 */
void store_credentials(u8 user_slot, const u8* username, u8 username_len, const u8* password, u8 password_len) {
	for (u8 i = 0; i < username_len; i++) {
     e82:	8a 81       	ldd	r24, Y+2	; 0x02
     e84:	8f 5f       	subi	r24, 0xFF	; 255
     e86:	8a 83       	std	Y+2, r24	; 0x02
     e88:	9a 81       	ldd	r25, Y+2	; 0x02
     e8a:	8e 81       	ldd	r24, Y+6	; 0x06
     e8c:	98 17       	cp	r25, r24
     e8e:	d8 f2       	brcs	.-74     	; 0xe46 <store_credentials+0x28>
		EEPROM_voidSendDataByte(user_slot * USERNAME_LENGTH + i + 0x0010, username[i]);
	}
	for (u8 i = 0; i < password_len; i++) {
     e90:	19 82       	std	Y+1, r1	; 0x01
     e92:	22 c0       	rjmp	.+68     	; 0xed8 <store_credentials+0xba>
		EEPROM_voidSendDataByte(user_slot * PASSWORD_LENGTH + i + 0x0040, password[i]);
     e94:	8b 81       	ldd	r24, Y+3	; 0x03
     e96:	28 2f       	mov	r18, r24
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	c9 01       	movw	r24, r18
     e9c:	88 0f       	add	r24, r24
     e9e:	99 1f       	adc	r25, r25
     ea0:	88 0f       	add	r24, r24
     ea2:	99 1f       	adc	r25, r25
     ea4:	28 0f       	add	r18, r24
     ea6:	39 1f       	adc	r19, r25
     ea8:	89 81       	ldd	r24, Y+1	; 0x01
     eaa:	88 2f       	mov	r24, r24
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	82 0f       	add	r24, r18
     eb0:	93 1f       	adc	r25, r19
     eb2:	80 5c       	subi	r24, 0xC0	; 192
     eb4:	9f 4f       	sbci	r25, 0xFF	; 255
     eb6:	ac 01       	movw	r20, r24
     eb8:	89 81       	ldd	r24, Y+1	; 0x01
     eba:	28 2f       	mov	r18, r24
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	8f 81       	ldd	r24, Y+7	; 0x07
     ec0:	98 85       	ldd	r25, Y+8	; 0x08
     ec2:	fc 01       	movw	r30, r24
     ec4:	e2 0f       	add	r30, r18
     ec6:	f3 1f       	adc	r31, r19
     ec8:	20 81       	ld	r18, Z
     eca:	ca 01       	movw	r24, r20
     ecc:	62 2f       	mov	r22, r18
     ece:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <EEPROM_voidSendDataByte>
 */
void store_credentials(u8 user_slot, const u8* username, u8 username_len, const u8* password, u8 password_len) {
	for (u8 i = 0; i < username_len; i++) {
		EEPROM_voidSendDataByte(user_slot * USERNAME_LENGTH + i + 0x0010, username[i]);
	}
	for (u8 i = 0; i < password_len; i++) {
     ed2:	89 81       	ldd	r24, Y+1	; 0x01
     ed4:	8f 5f       	subi	r24, 0xFF	; 255
     ed6:	89 83       	std	Y+1, r24	; 0x01
     ed8:	99 81       	ldd	r25, Y+1	; 0x01
     eda:	89 85       	ldd	r24, Y+9	; 0x09
     edc:	98 17       	cp	r25, r24
     ede:	d0 f2       	brcs	.-76     	; 0xe94 <store_credentials+0x76>
		EEPROM_voidSendDataByte(user_slot * PASSWORD_LENGTH + i + 0x0040, password[i]);
	}
}
     ee0:	29 96       	adiw	r28, 0x09	; 9
     ee2:	0f b6       	in	r0, 0x3f	; 63
     ee4:	f8 94       	cli
     ee6:	de bf       	out	0x3e, r29	; 62
     ee8:	0f be       	out	0x3f, r0	; 63
     eea:	cd bf       	out	0x3d, r28	; 61
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	0f 91       	pop	r16
     ef2:	08 95       	ret

00000ef4 <sign_up>:
 * @brief Handles the sign-up process for a new user.
 *
 * This function prompts the user to enter a username and password via Bluetooth,
 * and stores the credentials in EEPROM if a slot is available.
 */
void sign_up(void) {
     ef4:	0f 93       	push	r16
     ef6:	df 93       	push	r29
     ef8:	cf 93       	push	r28
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
     efe:	a9 97       	sbiw	r28, 0x29	; 41
     f00:	0f b6       	in	r0, 0x3f	; 63
     f02:	f8 94       	cli
     f04:	de bf       	out	0x3e, r29	; 62
     f06:	0f be       	out	0x3f, r0	; 63
     f08:	cd bf       	out	0x3d, r28	; 61
	u8 username[USERNAME_LENGTH] = {0};
     f0a:	85 e0       	ldi	r24, 0x05	; 5
     f0c:	fe 01       	movw	r30, r28
     f0e:	b0 96       	adiw	r30, 0x20	; 32
     f10:	df 01       	movw	r26, r30
     f12:	98 2f       	mov	r25, r24
     f14:	1d 92       	st	X+, r1
     f16:	9a 95       	dec	r25
     f18:	e9 f7       	brne	.-6      	; 0xf14 <sign_up+0x20>
	u8 password[PASSWORD_LENGTH] = {0};
     f1a:	85 e0       	ldi	r24, 0x05	; 5
     f1c:	fe 01       	movw	r30, r28
     f1e:	b5 96       	adiw	r30, 0x25	; 37
     f20:	df 01       	movw	r26, r30
     f22:	98 2f       	mov	r25, r24
     f24:	1d 92       	st	X+, r1
     f26:	9a 95       	dec	r25
     f28:	e9 f7       	brne	.-6      	; 0xf24 <sign_up+0x30>

	vLCD_Clear();
     f2a:	0e 94 4c 1c 	call	0x3898	; 0x3898 <vLCD_Clear>

	vLCD_Send_String("SIGNUP");
     f2e:	8e e7       	ldi	r24, 0x7E	; 126
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	0e 94 05 1c 	call	0x380a	; 0x380a <vLCD_Send_String>
     f36:	80 e0       	ldi	r24, 0x00	; 0
     f38:	90 e8       	ldi	r25, 0x80	; 128
     f3a:	ab e3       	ldi	r26, 0x3B	; 59
     f3c:	b5 e4       	ldi	r27, 0x45	; 69
     f3e:	89 8f       	std	Y+25, r24	; 0x19
     f40:	9a 8f       	std	Y+26, r25	; 0x1a
     f42:	ab 8f       	std	Y+27, r26	; 0x1b
     f44:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f46:	69 8d       	ldd	r22, Y+25	; 0x19
     f48:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f4a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f4c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f4e:	20 e0       	ldi	r18, 0x00	; 0
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	4a ef       	ldi	r20, 0xFA	; 250
     f54:	54 e4       	ldi	r21, 0x44	; 68
     f56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f5a:	dc 01       	movw	r26, r24
     f5c:	cb 01       	movw	r24, r22
     f5e:	8d 8b       	std	Y+21, r24	; 0x15
     f60:	9e 8b       	std	Y+22, r25	; 0x16
     f62:	af 8b       	std	Y+23, r26	; 0x17
     f64:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f66:	6d 89       	ldd	r22, Y+21	; 0x15
     f68:	7e 89       	ldd	r23, Y+22	; 0x16
     f6a:	8f 89       	ldd	r24, Y+23	; 0x17
     f6c:	98 8d       	ldd	r25, Y+24	; 0x18
     f6e:	20 e0       	ldi	r18, 0x00	; 0
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	40 e8       	ldi	r20, 0x80	; 128
     f74:	5f e3       	ldi	r21, 0x3F	; 63
     f76:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f7a:	88 23       	and	r24, r24
     f7c:	2c f4       	brge	.+10     	; 0xf88 <sign_up+0x94>
		__ticks = 1;
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	9c 8b       	std	Y+20, r25	; 0x14
     f84:	8b 8b       	std	Y+19, r24	; 0x13
     f86:	3f c0       	rjmp	.+126    	; 0x1006 <sign_up+0x112>
	else if (__tmp > 65535)
     f88:	6d 89       	ldd	r22, Y+21	; 0x15
     f8a:	7e 89       	ldd	r23, Y+22	; 0x16
     f8c:	8f 89       	ldd	r24, Y+23	; 0x17
     f8e:	98 8d       	ldd	r25, Y+24	; 0x18
     f90:	20 e0       	ldi	r18, 0x00	; 0
     f92:	3f ef       	ldi	r19, 0xFF	; 255
     f94:	4f e7       	ldi	r20, 0x7F	; 127
     f96:	57 e4       	ldi	r21, 0x47	; 71
     f98:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f9c:	18 16       	cp	r1, r24
     f9e:	4c f5       	brge	.+82     	; 0xff2 <sign_up+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fa0:	69 8d       	ldd	r22, Y+25	; 0x19
     fa2:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fa4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fa6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fa8:	20 e0       	ldi	r18, 0x00	; 0
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	40 e2       	ldi	r20, 0x20	; 32
     fae:	51 e4       	ldi	r21, 0x41	; 65
     fb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fb4:	dc 01       	movw	r26, r24
     fb6:	cb 01       	movw	r24, r22
     fb8:	bc 01       	movw	r22, r24
     fba:	cd 01       	movw	r24, r26
     fbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fc0:	dc 01       	movw	r26, r24
     fc2:	cb 01       	movw	r24, r22
     fc4:	9c 8b       	std	Y+20, r25	; 0x14
     fc6:	8b 8b       	std	Y+19, r24	; 0x13
     fc8:	0f c0       	rjmp	.+30     	; 0xfe8 <sign_up+0xf4>
     fca:	88 ec       	ldi	r24, 0xC8	; 200
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	9a 8b       	std	Y+18, r25	; 0x12
     fd0:	89 8b       	std	Y+17, r24	; 0x11
     fd2:	89 89       	ldd	r24, Y+17	; 0x11
     fd4:	9a 89       	ldd	r25, Y+18	; 0x12
     fd6:	01 97       	sbiw	r24, 0x01	; 1
     fd8:	f1 f7       	brne	.-4      	; 0xfd6 <sign_up+0xe2>
     fda:	9a 8b       	std	Y+18, r25	; 0x12
     fdc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fde:	8b 89       	ldd	r24, Y+19	; 0x13
     fe0:	9c 89       	ldd	r25, Y+20	; 0x14
     fe2:	01 97       	sbiw	r24, 0x01	; 1
     fe4:	9c 8b       	std	Y+20, r25	; 0x14
     fe6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fe8:	8b 89       	ldd	r24, Y+19	; 0x13
     fea:	9c 89       	ldd	r25, Y+20	; 0x14
     fec:	00 97       	sbiw	r24, 0x00	; 0
     fee:	69 f7       	brne	.-38     	; 0xfca <sign_up+0xd6>
     ff0:	14 c0       	rjmp	.+40     	; 0x101a <sign_up+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ff2:	6d 89       	ldd	r22, Y+21	; 0x15
     ff4:	7e 89       	ldd	r23, Y+22	; 0x16
     ff6:	8f 89       	ldd	r24, Y+23	; 0x17
     ff8:	98 8d       	ldd	r25, Y+24	; 0x18
     ffa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ffe:	dc 01       	movw	r26, r24
    1000:	cb 01       	movw	r24, r22
    1002:	9c 8b       	std	Y+20, r25	; 0x14
    1004:	8b 8b       	std	Y+19, r24	; 0x13
    1006:	8b 89       	ldd	r24, Y+19	; 0x13
    1008:	9c 89       	ldd	r25, Y+20	; 0x14
    100a:	98 8b       	std	Y+16, r25	; 0x10
    100c:	8f 87       	std	Y+15, r24	; 0x0f
    100e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1010:	98 89       	ldd	r25, Y+16	; 0x10
    1012:	01 97       	sbiw	r24, 0x01	; 1
    1014:	f1 f7       	brne	.-4      	; 0x1012 <sign_up+0x11e>
    1016:	98 8b       	std	Y+16, r25	; 0x10
    1018:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(3000);

	vLCD_Clear();
    101a:	0e 94 4c 1c 	call	0x3898	; 0x3898 <vLCD_Clear>
	vLCD_Send_String("SIGNUP-Username:");
    101e:	85 e8       	ldi	r24, 0x85	; 133
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	0e 94 05 1c 	call	0x380a	; 0x380a <vLCD_Send_String>
	vLCD_GO_TO(2,0);
    1026:	82 e0       	ldi	r24, 0x02	; 2
    1028:	60 e0       	ldi	r22, 0x00	; 0
    102a:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <vLCD_GO_TO>

	u8 username_len = get_input(username, USERNAME_LENGTH);
    102e:	ce 01       	movw	r24, r28
    1030:	80 96       	adiw	r24, 0x20	; 32
    1032:	65 e0       	ldi	r22, 0x05	; 5
    1034:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <get_input>
    1038:	8f 8f       	std	Y+31, r24	; 0x1f


	vLCD_Clear();
    103a:	0e 94 4c 1c 	call	0x3898	; 0x3898 <vLCD_Clear>
	vLCD_Send_String("SIGNUP-Password:");
    103e:	86 e9       	ldi	r24, 0x96	; 150
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	0e 94 05 1c 	call	0x380a	; 0x380a <vLCD_Send_String>
	vLCD_GO_TO(2,0);
    1046:	82 e0       	ldi	r24, 0x02	; 2
    1048:	60 e0       	ldi	r22, 0x00	; 0
    104a:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <vLCD_GO_TO>

	u8 password_len = get_input(password, PASSWORD_LENGTH);
    104e:	ce 01       	movw	r24, r28
    1050:	85 96       	adiw	r24, 0x25	; 37
    1052:	65 e0       	ldi	r22, 0x05	; 5
    1054:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <get_input>
    1058:	8e 8f       	std	Y+30, r24	; 0x1e


	u8 user_slot = find_next_empty_user_slot();
    105a:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <find_next_empty_user_slot>
    105e:	8d 8f       	std	Y+29, r24	; 0x1d
	if (user_slot < MAX_USERS) {
    1060:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1062:	8a 30       	cpi	r24, 0x0A	; 10
    1064:	98 f4       	brcc	.+38     	; 0x108c <sign_up+0x198>
		store_credentials(user_slot, username, username_len, password, password_len);
    1066:	9e 01       	movw	r18, r28
    1068:	20 5e       	subi	r18, 0xE0	; 224
    106a:	3f 4f       	sbci	r19, 0xFF	; 255
    106c:	fe 01       	movw	r30, r28
    106e:	b5 96       	adiw	r30, 0x25	; 37
    1070:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1072:	b9 01       	movw	r22, r18
    1074:	4f 8d       	ldd	r20, Y+31	; 0x1f
    1076:	9f 01       	movw	r18, r30
    1078:	0e 8d       	ldd	r16, Y+30	; 0x1e
    107a:	0e 94 0f 07 	call	0xe1e	; 0xe1e <store_credentials>
		vLCD_Clear();
    107e:	0e 94 4c 1c 	call	0x3898	; 0x3898 <vLCD_Clear>
		vLCD_Send_String("Sign Up Success");
    1082:	87 ea       	ldi	r24, 0xA7	; 167
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	0e 94 05 1c 	call	0x380a	; 0x380a <vLCD_Send_String>
    108a:	06 c0       	rjmp	.+12     	; 0x1098 <sign_up+0x1a4>
	} else {
		vLCD_Clear();
    108c:	0e 94 4c 1c 	call	0x3898	; 0x3898 <vLCD_Clear>
		vLCD_Send_String("Max Users Reached");
    1090:	87 eb       	ldi	r24, 0xB7	; 183
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	0e 94 05 1c 	call	0x380a	; 0x380a <vLCD_Send_String>
    1098:	80 e0       	ldi	r24, 0x00	; 0
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	aa ef       	ldi	r26, 0xFA	; 250
    109e:	b4 e4       	ldi	r27, 0x44	; 68
    10a0:	8b 87       	std	Y+11, r24	; 0x0b
    10a2:	9c 87       	std	Y+12, r25	; 0x0c
    10a4:	ad 87       	std	Y+13, r26	; 0x0d
    10a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    10aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    10ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    10b0:	20 e0       	ldi	r18, 0x00	; 0
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	4a ef       	ldi	r20, 0xFA	; 250
    10b6:	54 e4       	ldi	r21, 0x44	; 68
    10b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10bc:	dc 01       	movw	r26, r24
    10be:	cb 01       	movw	r24, r22
    10c0:	8f 83       	std	Y+7, r24	; 0x07
    10c2:	98 87       	std	Y+8, r25	; 0x08
    10c4:	a9 87       	std	Y+9, r26	; 0x09
    10c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10c8:	6f 81       	ldd	r22, Y+7	; 0x07
    10ca:	78 85       	ldd	r23, Y+8	; 0x08
    10cc:	89 85       	ldd	r24, Y+9	; 0x09
    10ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    10d0:	20 e0       	ldi	r18, 0x00	; 0
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	40 e8       	ldi	r20, 0x80	; 128
    10d6:	5f e3       	ldi	r21, 0x3F	; 63
    10d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10dc:	88 23       	and	r24, r24
    10de:	2c f4       	brge	.+10     	; 0x10ea <sign_up+0x1f6>
		__ticks = 1;
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	9e 83       	std	Y+6, r25	; 0x06
    10e6:	8d 83       	std	Y+5, r24	; 0x05
    10e8:	3f c0       	rjmp	.+126    	; 0x1168 <sign_up+0x274>
	else if (__tmp > 65535)
    10ea:	6f 81       	ldd	r22, Y+7	; 0x07
    10ec:	78 85       	ldd	r23, Y+8	; 0x08
    10ee:	89 85       	ldd	r24, Y+9	; 0x09
    10f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10f2:	20 e0       	ldi	r18, 0x00	; 0
    10f4:	3f ef       	ldi	r19, 0xFF	; 255
    10f6:	4f e7       	ldi	r20, 0x7F	; 127
    10f8:	57 e4       	ldi	r21, 0x47	; 71
    10fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10fe:	18 16       	cp	r1, r24
    1100:	4c f5       	brge	.+82     	; 0x1154 <sign_up+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1102:	6b 85       	ldd	r22, Y+11	; 0x0b
    1104:	7c 85       	ldd	r23, Y+12	; 0x0c
    1106:	8d 85       	ldd	r24, Y+13	; 0x0d
    1108:	9e 85       	ldd	r25, Y+14	; 0x0e
    110a:	20 e0       	ldi	r18, 0x00	; 0
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	40 e2       	ldi	r20, 0x20	; 32
    1110:	51 e4       	ldi	r21, 0x41	; 65
    1112:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1116:	dc 01       	movw	r26, r24
    1118:	cb 01       	movw	r24, r22
    111a:	bc 01       	movw	r22, r24
    111c:	cd 01       	movw	r24, r26
    111e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1122:	dc 01       	movw	r26, r24
    1124:	cb 01       	movw	r24, r22
    1126:	9e 83       	std	Y+6, r25	; 0x06
    1128:	8d 83       	std	Y+5, r24	; 0x05
    112a:	0f c0       	rjmp	.+30     	; 0x114a <sign_up+0x256>
    112c:	88 ec       	ldi	r24, 0xC8	; 200
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	9c 83       	std	Y+4, r25	; 0x04
    1132:	8b 83       	std	Y+3, r24	; 0x03
    1134:	8b 81       	ldd	r24, Y+3	; 0x03
    1136:	9c 81       	ldd	r25, Y+4	; 0x04
    1138:	01 97       	sbiw	r24, 0x01	; 1
    113a:	f1 f7       	brne	.-4      	; 0x1138 <sign_up+0x244>
    113c:	9c 83       	std	Y+4, r25	; 0x04
    113e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1140:	8d 81       	ldd	r24, Y+5	; 0x05
    1142:	9e 81       	ldd	r25, Y+6	; 0x06
    1144:	01 97       	sbiw	r24, 0x01	; 1
    1146:	9e 83       	std	Y+6, r25	; 0x06
    1148:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    114a:	8d 81       	ldd	r24, Y+5	; 0x05
    114c:	9e 81       	ldd	r25, Y+6	; 0x06
    114e:	00 97       	sbiw	r24, 0x00	; 0
    1150:	69 f7       	brne	.-38     	; 0x112c <sign_up+0x238>
    1152:	14 c0       	rjmp	.+40     	; 0x117c <sign_up+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1154:	6f 81       	ldd	r22, Y+7	; 0x07
    1156:	78 85       	ldd	r23, Y+8	; 0x08
    1158:	89 85       	ldd	r24, Y+9	; 0x09
    115a:	9a 85       	ldd	r25, Y+10	; 0x0a
    115c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1160:	dc 01       	movw	r26, r24
    1162:	cb 01       	movw	r24, r22
    1164:	9e 83       	std	Y+6, r25	; 0x06
    1166:	8d 83       	std	Y+5, r24	; 0x05
    1168:	8d 81       	ldd	r24, Y+5	; 0x05
    116a:	9e 81       	ldd	r25, Y+6	; 0x06
    116c:	9a 83       	std	Y+2, r25	; 0x02
    116e:	89 83       	std	Y+1, r24	; 0x01
    1170:	89 81       	ldd	r24, Y+1	; 0x01
    1172:	9a 81       	ldd	r25, Y+2	; 0x02
    1174:	01 97       	sbiw	r24, 0x01	; 1
    1176:	f1 f7       	brne	.-4      	; 0x1174 <sign_up+0x280>
    1178:	9a 83       	std	Y+2, r25	; 0x02
    117a:	89 83       	std	Y+1, r24	; 0x01
	}
	_delay_ms(2000);
}
    117c:	a9 96       	adiw	r28, 0x29	; 41
    117e:	0f b6       	in	r0, 0x3f	; 63
    1180:	f8 94       	cli
    1182:	de bf       	out	0x3e, r29	; 62
    1184:	0f be       	out	0x3f, r0	; 63
    1186:	cd bf       	out	0x3d, r28	; 61
    1188:	cf 91       	pop	r28
    118a:	df 91       	pop	r29
    118c:	0f 91       	pop	r16
    118e:	08 95       	ret

00001190 <check_credentials>:
 * @return u8 Returns 1 if credentials match, 0 otherwise.
 *
 * This function compares the entered credentials with those stored in EEPROM.
 * If a match is found, it returns 1; otherwise, it returns 0.
 */
u8 check_credentials(const u8* username, u8 username_len, const u8* password, u8 password_len) {
    1190:	0f 93       	push	r16
    1192:	1f 93       	push	r17
    1194:	df 93       	push	r29
    1196:	cf 93       	push	r28
    1198:	cd b7       	in	r28, 0x3d	; 61
    119a:	de b7       	in	r29, 0x3e	; 62
    119c:	64 97       	sbiw	r28, 0x14	; 20
    119e:	0f b6       	in	r0, 0x3f	; 63
    11a0:	f8 94       	cli
    11a2:	de bf       	out	0x3e, r29	; 62
    11a4:	0f be       	out	0x3f, r0	; 63
    11a6:	cd bf       	out	0x3d, r28	; 61
    11a8:	9f 87       	std	Y+15, r25	; 0x0f
    11aa:	8e 87       	std	Y+14, r24	; 0x0e
    11ac:	68 8b       	std	Y+16, r22	; 0x10
    11ae:	5a 8b       	std	Y+18, r21	; 0x12
    11b0:	49 8b       	std	Y+17, r20	; 0x11
    11b2:	2b 8b       	std	Y+19, r18	; 0x13
	u8 stored_username[USERNAME_LENGTH] = {0};
    11b4:	85 e0       	ldi	r24, 0x05	; 5
    11b6:	fe 01       	movw	r30, r28
    11b8:	34 96       	adiw	r30, 0x04	; 4
    11ba:	df 01       	movw	r26, r30
    11bc:	98 2f       	mov	r25, r24
    11be:	1d 92       	st	X+, r1
    11c0:	9a 95       	dec	r25
    11c2:	e9 f7       	brne	.-6      	; 0x11be <check_credentials+0x2e>
	u8 stored_password[PASSWORD_LENGTH] = {0};
    11c4:	85 e0       	ldi	r24, 0x05	; 5
    11c6:	fe 01       	movw	r30, r28
    11c8:	39 96       	adiw	r30, 0x09	; 9
    11ca:	df 01       	movw	r26, r30
    11cc:	98 2f       	mov	r25, r24
    11ce:	1d 92       	st	X+, r1
    11d0:	9a 95       	dec	r25
    11d2:	e9 f7       	brne	.-6      	; 0x11ce <check_credentials+0x3e>

	for (u8 user = 0; user < MAX_USERS; user++) {
    11d4:	1b 82       	std	Y+3, r1	; 0x03
    11d6:	65 c0       	rjmp	.+202    	; 0x12a2 <check_credentials+0x112>
		for (u8 i = 0; i < USERNAME_LENGTH; i++) {
    11d8:	1a 82       	std	Y+2, r1	; 0x02
    11da:	1f c0       	rjmp	.+62     	; 0x121a <check_credentials+0x8a>
			stored_username[i] = EEPROM_u8ReadDataByte(user * USERNAME_LENGTH + i + 0x0010);
    11dc:	8a 81       	ldd	r24, Y+2	; 0x02
    11de:	08 2f       	mov	r16, r24
    11e0:	10 e0       	ldi	r17, 0x00	; 0
    11e2:	8b 81       	ldd	r24, Y+3	; 0x03
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	c9 01       	movw	r24, r18
    11ea:	88 0f       	add	r24, r24
    11ec:	99 1f       	adc	r25, r25
    11ee:	88 0f       	add	r24, r24
    11f0:	99 1f       	adc	r25, r25
    11f2:	28 0f       	add	r18, r24
    11f4:	39 1f       	adc	r19, r25
    11f6:	8a 81       	ldd	r24, Y+2	; 0x02
    11f8:	88 2f       	mov	r24, r24
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	82 0f       	add	r24, r18
    11fe:	93 1f       	adc	r25, r19
    1200:	40 96       	adiw	r24, 0x10	; 16
    1202:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <EEPROM_u8ReadDataByte>
    1206:	28 2f       	mov	r18, r24
    1208:	ce 01       	movw	r24, r28
    120a:	04 96       	adiw	r24, 0x04	; 4
    120c:	fc 01       	movw	r30, r24
    120e:	e0 0f       	add	r30, r16
    1210:	f1 1f       	adc	r31, r17
    1212:	20 83       	st	Z, r18
u8 check_credentials(const u8* username, u8 username_len, const u8* password, u8 password_len) {
	u8 stored_username[USERNAME_LENGTH] = {0};
	u8 stored_password[PASSWORD_LENGTH] = {0};

	for (u8 user = 0; user < MAX_USERS; user++) {
		for (u8 i = 0; i < USERNAME_LENGTH; i++) {
    1214:	8a 81       	ldd	r24, Y+2	; 0x02
    1216:	8f 5f       	subi	r24, 0xFF	; 255
    1218:	8a 83       	std	Y+2, r24	; 0x02
    121a:	8a 81       	ldd	r24, Y+2	; 0x02
    121c:	85 30       	cpi	r24, 0x05	; 5
    121e:	f0 f2       	brcs	.-68     	; 0x11dc <check_credentials+0x4c>
			stored_username[i] = EEPROM_u8ReadDataByte(user * USERNAME_LENGTH + i + 0x0010);
		}
		for (u8 i = 0; i < PASSWORD_LENGTH; i++) {
    1220:	19 82       	std	Y+1, r1	; 0x01
    1222:	20 c0       	rjmp	.+64     	; 0x1264 <check_credentials+0xd4>
			stored_password[i] = EEPROM_u8ReadDataByte(user * PASSWORD_LENGTH + i + 0x0040);
    1224:	89 81       	ldd	r24, Y+1	; 0x01
    1226:	08 2f       	mov	r16, r24
    1228:	10 e0       	ldi	r17, 0x00	; 0
    122a:	8b 81       	ldd	r24, Y+3	; 0x03
    122c:	28 2f       	mov	r18, r24
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	c9 01       	movw	r24, r18
    1232:	88 0f       	add	r24, r24
    1234:	99 1f       	adc	r25, r25
    1236:	88 0f       	add	r24, r24
    1238:	99 1f       	adc	r25, r25
    123a:	28 0f       	add	r18, r24
    123c:	39 1f       	adc	r19, r25
    123e:	89 81       	ldd	r24, Y+1	; 0x01
    1240:	88 2f       	mov	r24, r24
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	82 0f       	add	r24, r18
    1246:	93 1f       	adc	r25, r19
    1248:	80 5c       	subi	r24, 0xC0	; 192
    124a:	9f 4f       	sbci	r25, 0xFF	; 255
    124c:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <EEPROM_u8ReadDataByte>
    1250:	28 2f       	mov	r18, r24
    1252:	ce 01       	movw	r24, r28
    1254:	09 96       	adiw	r24, 0x09	; 9
    1256:	fc 01       	movw	r30, r24
    1258:	e0 0f       	add	r30, r16
    125a:	f1 1f       	adc	r31, r17
    125c:	20 83       	st	Z, r18

	for (u8 user = 0; user < MAX_USERS; user++) {
		for (u8 i = 0; i < USERNAME_LENGTH; i++) {
			stored_username[i] = EEPROM_u8ReadDataByte(user * USERNAME_LENGTH + i + 0x0010);
		}
		for (u8 i = 0; i < PASSWORD_LENGTH; i++) {
    125e:	89 81       	ldd	r24, Y+1	; 0x01
    1260:	8f 5f       	subi	r24, 0xFF	; 255
    1262:	89 83       	std	Y+1, r24	; 0x01
    1264:	89 81       	ldd	r24, Y+1	; 0x01
    1266:	85 30       	cpi	r24, 0x05	; 5
    1268:	e8 f2       	brcs	.-70     	; 0x1224 <check_credentials+0x94>
			stored_password[i] = EEPROM_u8ReadDataByte(user * PASSWORD_LENGTH + i + 0x0040);
		}

		if (compare(username, stored_username, username_len) &&
    126a:	8e 85       	ldd	r24, Y+14	; 0x0e
    126c:	9f 85       	ldd	r25, Y+15	; 0x0f
    126e:	9e 01       	movw	r18, r28
    1270:	2c 5f       	subi	r18, 0xFC	; 252
    1272:	3f 4f       	sbci	r19, 0xFF	; 255
    1274:	b9 01       	movw	r22, r18
    1276:	48 89       	ldd	r20, Y+16	; 0x10
    1278:	0e 94 a5 06 	call	0xd4a	; 0xd4a <compare>
    127c:	88 23       	and	r24, r24
    127e:	71 f0       	breq	.+28     	; 0x129c <check_credentials+0x10c>
    1280:	89 89       	ldd	r24, Y+17	; 0x11
    1282:	9a 89       	ldd	r25, Y+18	; 0x12
    1284:	9e 01       	movw	r18, r28
    1286:	27 5f       	subi	r18, 0xF7	; 247
    1288:	3f 4f       	sbci	r19, 0xFF	; 255
    128a:	b9 01       	movw	r22, r18
    128c:	4b 89       	ldd	r20, Y+19	; 0x13
    128e:	0e 94 a5 06 	call	0xd4a	; 0xd4a <compare>
    1292:	88 23       	and	r24, r24
    1294:	19 f0       	breq	.+6      	; 0x129c <check_credentials+0x10c>
				compare(password, stored_password, password_len)) {
			return 1;  // Credentials match
    1296:	a1 e0       	ldi	r26, 0x01	; 1
    1298:	ac 8b       	std	Y+20, r26	; 0x14
    129a:	08 c0       	rjmp	.+16     	; 0x12ac <check_credentials+0x11c>
 */
u8 check_credentials(const u8* username, u8 username_len, const u8* password, u8 password_len) {
	u8 stored_username[USERNAME_LENGTH] = {0};
	u8 stored_password[PASSWORD_LENGTH] = {0};

	for (u8 user = 0; user < MAX_USERS; user++) {
    129c:	8b 81       	ldd	r24, Y+3	; 0x03
    129e:	8f 5f       	subi	r24, 0xFF	; 255
    12a0:	8b 83       	std	Y+3, r24	; 0x03
    12a2:	8b 81       	ldd	r24, Y+3	; 0x03
    12a4:	8a 30       	cpi	r24, 0x0A	; 10
    12a6:	08 f4       	brcc	.+2      	; 0x12aa <check_credentials+0x11a>
    12a8:	97 cf       	rjmp	.-210    	; 0x11d8 <check_credentials+0x48>
		if (compare(username, stored_username, username_len) &&
				compare(password, stored_password, password_len)) {
			return 1;  // Credentials match
		}
	}
	return 0;  // Credentials do not match
    12aa:	1c 8a       	std	Y+20, r1	; 0x14
    12ac:	8c 89       	ldd	r24, Y+20	; 0x14
}
    12ae:	64 96       	adiw	r28, 0x14	; 20
    12b0:	0f b6       	in	r0, 0x3f	; 63
    12b2:	f8 94       	cli
    12b4:	de bf       	out	0x3e, r29	; 62
    12b6:	0f be       	out	0x3f, r0	; 63
    12b8:	cd bf       	out	0x3d, r28	; 61
    12ba:	cf 91       	pop	r28
    12bc:	df 91       	pop	r29
    12be:	1f 91       	pop	r17
    12c0:	0f 91       	pop	r16
    12c2:	08 95       	ret

000012c4 <log_in>:
 *
 * This function prompts the user to enter their username and password via Bluetooth.
 * If the credentials match, the door is opened; otherwise, the number of failed attempts is updated.
 * If the number of failed attempts reaches 3, an alarm is triggered.
 */
void log_in(void) {
    12c4:	df 93       	push	r29
    12c6:	cf 93       	push	r28
    12c8:	cd b7       	in	r28, 0x3d	; 61
    12ca:	de b7       	in	r29, 0x3e	; 62
    12cc:	e6 97       	sbiw	r28, 0x36	; 54
    12ce:	0f b6       	in	r0, 0x3f	; 63
    12d0:	f8 94       	cli
    12d2:	de bf       	out	0x3e, r29	; 62
    12d4:	0f be       	out	0x3f, r0	; 63
    12d6:	cd bf       	out	0x3d, r28	; 61
	static u8 number_of_trials = 0;
	u8 username[USERNAME_LENGTH] = {0};
    12d8:	85 e0       	ldi	r24, 0x05	; 5
    12da:	fe 01       	movw	r30, r28
    12dc:	bd 96       	adiw	r30, 0x2d	; 45
    12de:	df 01       	movw	r26, r30
    12e0:	98 2f       	mov	r25, r24
    12e2:	1d 92       	st	X+, r1
    12e4:	9a 95       	dec	r25
    12e6:	e9 f7       	brne	.-6      	; 0x12e2 <log_in+0x1e>
	u8 password[PASSWORD_LENGTH] = {0};
    12e8:	85 e0       	ldi	r24, 0x05	; 5
    12ea:	fe 01       	movw	r30, r28
    12ec:	f2 96       	adiw	r30, 0x32	; 50
    12ee:	df 01       	movw	r26, r30
    12f0:	98 2f       	mov	r25, r24
    12f2:	1d 92       	st	X+, r1
    12f4:	9a 95       	dec	r25
    12f6:	e9 f7       	brne	.-6      	; 0x12f2 <log_in+0x2e>

	vLCD_Clear();
    12f8:	0e 94 4c 1c 	call	0x3898	; 0x3898 <vLCD_Clear>

	vLCD_Send_String("LOGIN");
    12fc:	89 ec       	ldi	r24, 0xC9	; 201
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	0e 94 05 1c 	call	0x380a	; 0x380a <vLCD_Send_String>
    1304:	80 e0       	ldi	r24, 0x00	; 0
    1306:	90 e8       	ldi	r25, 0x80	; 128
    1308:	ab e3       	ldi	r26, 0x3B	; 59
    130a:	b5 e4       	ldi	r27, 0x45	; 69
    130c:	8f a3       	std	Y+39, r24	; 0x27
    130e:	98 a7       	std	Y+40, r25	; 0x28
    1310:	a9 a7       	std	Y+41, r26	; 0x29
    1312:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1314:	6f a1       	ldd	r22, Y+39	; 0x27
    1316:	78 a5       	ldd	r23, Y+40	; 0x28
    1318:	89 a5       	ldd	r24, Y+41	; 0x29
    131a:	9a a5       	ldd	r25, Y+42	; 0x2a
    131c:	20 e0       	ldi	r18, 0x00	; 0
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	4a ef       	ldi	r20, 0xFA	; 250
    1322:	54 e4       	ldi	r21, 0x44	; 68
    1324:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1328:	dc 01       	movw	r26, r24
    132a:	cb 01       	movw	r24, r22
    132c:	8b a3       	std	Y+35, r24	; 0x23
    132e:	9c a3       	std	Y+36, r25	; 0x24
    1330:	ad a3       	std	Y+37, r26	; 0x25
    1332:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1334:	6b a1       	ldd	r22, Y+35	; 0x23
    1336:	7c a1       	ldd	r23, Y+36	; 0x24
    1338:	8d a1       	ldd	r24, Y+37	; 0x25
    133a:	9e a1       	ldd	r25, Y+38	; 0x26
    133c:	20 e0       	ldi	r18, 0x00	; 0
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	40 e8       	ldi	r20, 0x80	; 128
    1342:	5f e3       	ldi	r21, 0x3F	; 63
    1344:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1348:	88 23       	and	r24, r24
    134a:	2c f4       	brge	.+10     	; 0x1356 <log_in+0x92>
		__ticks = 1;
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	9a a3       	std	Y+34, r25	; 0x22
    1352:	89 a3       	std	Y+33, r24	; 0x21
    1354:	3f c0       	rjmp	.+126    	; 0x13d4 <log_in+0x110>
	else if (__tmp > 65535)
    1356:	6b a1       	ldd	r22, Y+35	; 0x23
    1358:	7c a1       	ldd	r23, Y+36	; 0x24
    135a:	8d a1       	ldd	r24, Y+37	; 0x25
    135c:	9e a1       	ldd	r25, Y+38	; 0x26
    135e:	20 e0       	ldi	r18, 0x00	; 0
    1360:	3f ef       	ldi	r19, 0xFF	; 255
    1362:	4f e7       	ldi	r20, 0x7F	; 127
    1364:	57 e4       	ldi	r21, 0x47	; 71
    1366:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    136a:	18 16       	cp	r1, r24
    136c:	4c f5       	brge	.+82     	; 0x13c0 <log_in+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    136e:	6f a1       	ldd	r22, Y+39	; 0x27
    1370:	78 a5       	ldd	r23, Y+40	; 0x28
    1372:	89 a5       	ldd	r24, Y+41	; 0x29
    1374:	9a a5       	ldd	r25, Y+42	; 0x2a
    1376:	20 e0       	ldi	r18, 0x00	; 0
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	40 e2       	ldi	r20, 0x20	; 32
    137c:	51 e4       	ldi	r21, 0x41	; 65
    137e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1382:	dc 01       	movw	r26, r24
    1384:	cb 01       	movw	r24, r22
    1386:	bc 01       	movw	r22, r24
    1388:	cd 01       	movw	r24, r26
    138a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    138e:	dc 01       	movw	r26, r24
    1390:	cb 01       	movw	r24, r22
    1392:	9a a3       	std	Y+34, r25	; 0x22
    1394:	89 a3       	std	Y+33, r24	; 0x21
    1396:	0f c0       	rjmp	.+30     	; 0x13b6 <log_in+0xf2>
    1398:	88 ec       	ldi	r24, 0xC8	; 200
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	98 a3       	std	Y+32, r25	; 0x20
    139e:	8f 8f       	std	Y+31, r24	; 0x1f
    13a0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    13a2:	98 a1       	ldd	r25, Y+32	; 0x20
    13a4:	01 97       	sbiw	r24, 0x01	; 1
    13a6:	f1 f7       	brne	.-4      	; 0x13a4 <log_in+0xe0>
    13a8:	98 a3       	std	Y+32, r25	; 0x20
    13aa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ac:	89 a1       	ldd	r24, Y+33	; 0x21
    13ae:	9a a1       	ldd	r25, Y+34	; 0x22
    13b0:	01 97       	sbiw	r24, 0x01	; 1
    13b2:	9a a3       	std	Y+34, r25	; 0x22
    13b4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13b6:	89 a1       	ldd	r24, Y+33	; 0x21
    13b8:	9a a1       	ldd	r25, Y+34	; 0x22
    13ba:	00 97       	sbiw	r24, 0x00	; 0
    13bc:	69 f7       	brne	.-38     	; 0x1398 <log_in+0xd4>
    13be:	14 c0       	rjmp	.+40     	; 0x13e8 <log_in+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13c0:	6b a1       	ldd	r22, Y+35	; 0x23
    13c2:	7c a1       	ldd	r23, Y+36	; 0x24
    13c4:	8d a1       	ldd	r24, Y+37	; 0x25
    13c6:	9e a1       	ldd	r25, Y+38	; 0x26
    13c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13cc:	dc 01       	movw	r26, r24
    13ce:	cb 01       	movw	r24, r22
    13d0:	9a a3       	std	Y+34, r25	; 0x22
    13d2:	89 a3       	std	Y+33, r24	; 0x21
    13d4:	89 a1       	ldd	r24, Y+33	; 0x21
    13d6:	9a a1       	ldd	r25, Y+34	; 0x22
    13d8:	9e 8f       	std	Y+30, r25	; 0x1e
    13da:	8d 8f       	std	Y+29, r24	; 0x1d
    13dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13de:	9e 8d       	ldd	r25, Y+30	; 0x1e
    13e0:	01 97       	sbiw	r24, 0x01	; 1
    13e2:	f1 f7       	brne	.-4      	; 0x13e0 <log_in+0x11c>
    13e4:	9e 8f       	std	Y+30, r25	; 0x1e
    13e6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(3000);
	vLCD_Clear();
    13e8:	0e 94 4c 1c 	call	0x3898	; 0x3898 <vLCD_Clear>
	vLCD_Send_String("Enter Username:");
    13ec:	8f ec       	ldi	r24, 0xCF	; 207
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	0e 94 05 1c 	call	0x380a	; 0x380a <vLCD_Send_String>
	vLCD_GO_TO(2,0);
    13f4:	82 e0       	ldi	r24, 0x02	; 2
    13f6:	60 e0       	ldi	r22, 0x00	; 0
    13f8:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <vLCD_GO_TO>

	u8 username_len = get_input(username, USERNAME_LENGTH);
    13fc:	ce 01       	movw	r24, r28
    13fe:	8d 96       	adiw	r24, 0x2d	; 45
    1400:	65 e0       	ldi	r22, 0x05	; 5
    1402:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <get_input>
    1406:	8c a7       	std	Y+44, r24	; 0x2c

	vLCD_Clear();
    1408:	0e 94 4c 1c 	call	0x3898	; 0x3898 <vLCD_Clear>
	vLCD_Send_String("Enter Password:");
    140c:	8f ed       	ldi	r24, 0xDF	; 223
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	0e 94 05 1c 	call	0x380a	; 0x380a <vLCD_Send_String>
	vLCD_GO_TO(2,0);
    1414:	82 e0       	ldi	r24, 0x02	; 2
    1416:	60 e0       	ldi	r22, 0x00	; 0
    1418:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <vLCD_GO_TO>

	u8 password_len = get_input(password, PASSWORD_LENGTH);
    141c:	ce 01       	movw	r24, r28
    141e:	c2 96       	adiw	r24, 0x32	; 50
    1420:	65 e0       	ldi	r22, 0x05	; 5
    1422:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <get_input>
    1426:	8b a7       	std	Y+43, r24	; 0x2b

	vLCD_Clear();
    1428:	0e 94 4c 1c 	call	0x3898	; 0x3898 <vLCD_Clear>
	vLCD_Send_String("Checking...");
    142c:	8f ee       	ldi	r24, 0xEF	; 239
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	0e 94 05 1c 	call	0x380a	; 0x380a <vLCD_Send_String>

	if (check_credentials(username, username_len, password, password_len)) {
    1434:	ce 01       	movw	r24, r28
    1436:	8d 96       	adiw	r24, 0x2d	; 45
    1438:	9e 01       	movw	r18, r28
    143a:	2e 5c       	subi	r18, 0xCE	; 206
    143c:	3f 4f       	sbci	r19, 0xFF	; 255
    143e:	6c a5       	ldd	r22, Y+44	; 0x2c
    1440:	a9 01       	movw	r20, r18
    1442:	2b a5       	ldd	r18, Y+43	; 0x2b
    1444:	0e 94 c8 08 	call	0x1190	; 0x1190 <check_credentials>
    1448:	88 23       	and	r24, r24
    144a:	09 f4       	brne	.+2      	; 0x144e <log_in+0x18a>
    144c:	7e c0       	rjmp	.+252    	; 0x154a <log_in+0x286>
		vLCD_Clear();
    144e:	0e 94 4c 1c 	call	0x3898	; 0x3898 <vLCD_Clear>
		vLCD_Send_String("Welcome Home!");
    1452:	8b ef       	ldi	r24, 0xFB	; 251
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	0e 94 05 1c 	call	0x380a	; 0x380a <vLCD_Send_String>
    145a:	80 e0       	ldi	r24, 0x00	; 0
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	aa e7       	ldi	r26, 0x7A	; 122
    1460:	b4 e4       	ldi	r27, 0x44	; 68
    1462:	89 8f       	std	Y+25, r24	; 0x19
    1464:	9a 8f       	std	Y+26, r25	; 0x1a
    1466:	ab 8f       	std	Y+27, r26	; 0x1b
    1468:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    146a:	69 8d       	ldd	r22, Y+25	; 0x19
    146c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    146e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1470:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1472:	20 e0       	ldi	r18, 0x00	; 0
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	4a ef       	ldi	r20, 0xFA	; 250
    1478:	54 e4       	ldi	r21, 0x44	; 68
    147a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    147e:	dc 01       	movw	r26, r24
    1480:	cb 01       	movw	r24, r22
    1482:	8d 8b       	std	Y+21, r24	; 0x15
    1484:	9e 8b       	std	Y+22, r25	; 0x16
    1486:	af 8b       	std	Y+23, r26	; 0x17
    1488:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    148a:	6d 89       	ldd	r22, Y+21	; 0x15
    148c:	7e 89       	ldd	r23, Y+22	; 0x16
    148e:	8f 89       	ldd	r24, Y+23	; 0x17
    1490:	98 8d       	ldd	r25, Y+24	; 0x18
    1492:	20 e0       	ldi	r18, 0x00	; 0
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	40 e8       	ldi	r20, 0x80	; 128
    1498:	5f e3       	ldi	r21, 0x3F	; 63
    149a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    149e:	88 23       	and	r24, r24
    14a0:	2c f4       	brge	.+10     	; 0x14ac <log_in+0x1e8>
		__ticks = 1;
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	9c 8b       	std	Y+20, r25	; 0x14
    14a8:	8b 8b       	std	Y+19, r24	; 0x13
    14aa:	3f c0       	rjmp	.+126    	; 0x152a <log_in+0x266>
	else if (__tmp > 65535)
    14ac:	6d 89       	ldd	r22, Y+21	; 0x15
    14ae:	7e 89       	ldd	r23, Y+22	; 0x16
    14b0:	8f 89       	ldd	r24, Y+23	; 0x17
    14b2:	98 8d       	ldd	r25, Y+24	; 0x18
    14b4:	20 e0       	ldi	r18, 0x00	; 0
    14b6:	3f ef       	ldi	r19, 0xFF	; 255
    14b8:	4f e7       	ldi	r20, 0x7F	; 127
    14ba:	57 e4       	ldi	r21, 0x47	; 71
    14bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14c0:	18 16       	cp	r1, r24
    14c2:	4c f5       	brge	.+82     	; 0x1516 <log_in+0x252>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14c4:	69 8d       	ldd	r22, Y+25	; 0x19
    14c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14cc:	20 e0       	ldi	r18, 0x00	; 0
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	40 e2       	ldi	r20, 0x20	; 32
    14d2:	51 e4       	ldi	r21, 0x41	; 65
    14d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14d8:	dc 01       	movw	r26, r24
    14da:	cb 01       	movw	r24, r22
    14dc:	bc 01       	movw	r22, r24
    14de:	cd 01       	movw	r24, r26
    14e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14e4:	dc 01       	movw	r26, r24
    14e6:	cb 01       	movw	r24, r22
    14e8:	9c 8b       	std	Y+20, r25	; 0x14
    14ea:	8b 8b       	std	Y+19, r24	; 0x13
    14ec:	0f c0       	rjmp	.+30     	; 0x150c <log_in+0x248>
    14ee:	88 ec       	ldi	r24, 0xC8	; 200
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	9a 8b       	std	Y+18, r25	; 0x12
    14f4:	89 8b       	std	Y+17, r24	; 0x11
    14f6:	89 89       	ldd	r24, Y+17	; 0x11
    14f8:	9a 89       	ldd	r25, Y+18	; 0x12
    14fa:	01 97       	sbiw	r24, 0x01	; 1
    14fc:	f1 f7       	brne	.-4      	; 0x14fa <log_in+0x236>
    14fe:	9a 8b       	std	Y+18, r25	; 0x12
    1500:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1502:	8b 89       	ldd	r24, Y+19	; 0x13
    1504:	9c 89       	ldd	r25, Y+20	; 0x14
    1506:	01 97       	sbiw	r24, 0x01	; 1
    1508:	9c 8b       	std	Y+20, r25	; 0x14
    150a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    150c:	8b 89       	ldd	r24, Y+19	; 0x13
    150e:	9c 89       	ldd	r25, Y+20	; 0x14
    1510:	00 97       	sbiw	r24, 0x00	; 0
    1512:	69 f7       	brne	.-38     	; 0x14ee <log_in+0x22a>
    1514:	14 c0       	rjmp	.+40     	; 0x153e <log_in+0x27a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1516:	6d 89       	ldd	r22, Y+21	; 0x15
    1518:	7e 89       	ldd	r23, Y+22	; 0x16
    151a:	8f 89       	ldd	r24, Y+23	; 0x17
    151c:	98 8d       	ldd	r25, Y+24	; 0x18
    151e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1522:	dc 01       	movw	r26, r24
    1524:	cb 01       	movw	r24, r22
    1526:	9c 8b       	std	Y+20, r25	; 0x14
    1528:	8b 8b       	std	Y+19, r24	; 0x13
    152a:	8b 89       	ldd	r24, Y+19	; 0x13
    152c:	9c 89       	ldd	r25, Y+20	; 0x14
    152e:	98 8b       	std	Y+16, r25	; 0x10
    1530:	8f 87       	std	Y+15, r24	; 0x0f
    1532:	8f 85       	ldd	r24, Y+15	; 0x0f
    1534:	98 89       	ldd	r25, Y+16	; 0x10
    1536:	01 97       	sbiw	r24, 0x01	; 1
    1538:	f1 f7       	brne	.-4      	; 0x1536 <log_in+0x272>
    153a:	98 8b       	std	Y+16, r25	; 0x10
    153c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		EEPROM_voidSendDataByte(NUM_OF_TRIALS_ADDR, 0x00);  // Reset trials count
    153e:	89 e1       	ldi	r24, 0x19	; 25
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	60 e0       	ldi	r22, 0x00	; 0
    1544:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <EEPROM_voidSendDataByte>
    1548:	8a c0       	rjmp	.+276    	; 0x165e <log_in+0x39a>

	} else {
		vLCD_Clear();
    154a:	0e 94 4c 1c 	call	0x3898	; 0x3898 <vLCD_Clear>
		vLCD_Send_String("Wrong Credentials");
    154e:	89 e0       	ldi	r24, 0x09	; 9
    1550:	91 e0       	ldi	r25, 0x01	; 1
    1552:	0e 94 05 1c 	call	0x380a	; 0x380a <vLCD_Send_String>
		number_of_trials = EEPROM_u8ReadDataByte(NUM_OF_TRIALS_ADDR);
    1556:	89 e1       	ldi	r24, 0x19	; 25
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <EEPROM_u8ReadDataByte>
    155e:	80 93 6a 02 	sts	0x026A, r24
		EEPROM_voidSendDataByte(NUM_OF_TRIALS_ADDR, ++number_of_trials);
    1562:	80 91 6a 02 	lds	r24, 0x026A
    1566:	8f 5f       	subi	r24, 0xFF	; 255
    1568:	80 93 6a 02 	sts	0x026A, r24
    156c:	20 91 6a 02 	lds	r18, 0x026A
    1570:	89 e1       	ldi	r24, 0x19	; 25
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	62 2f       	mov	r22, r18
    1576:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <EEPROM_voidSendDataByte>
    157a:	80 e0       	ldi	r24, 0x00	; 0
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	aa e7       	ldi	r26, 0x7A	; 122
    1580:	b4 e4       	ldi	r27, 0x44	; 68
    1582:	8b 87       	std	Y+11, r24	; 0x0b
    1584:	9c 87       	std	Y+12, r25	; 0x0c
    1586:	ad 87       	std	Y+13, r26	; 0x0d
    1588:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    158a:	6b 85       	ldd	r22, Y+11	; 0x0b
    158c:	7c 85       	ldd	r23, Y+12	; 0x0c
    158e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1590:	9e 85       	ldd	r25, Y+14	; 0x0e
    1592:	20 e0       	ldi	r18, 0x00	; 0
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	4a ef       	ldi	r20, 0xFA	; 250
    1598:	54 e4       	ldi	r21, 0x44	; 68
    159a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    159e:	dc 01       	movw	r26, r24
    15a0:	cb 01       	movw	r24, r22
    15a2:	8f 83       	std	Y+7, r24	; 0x07
    15a4:	98 87       	std	Y+8, r25	; 0x08
    15a6:	a9 87       	std	Y+9, r26	; 0x09
    15a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15aa:	6f 81       	ldd	r22, Y+7	; 0x07
    15ac:	78 85       	ldd	r23, Y+8	; 0x08
    15ae:	89 85       	ldd	r24, Y+9	; 0x09
    15b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    15b2:	20 e0       	ldi	r18, 0x00	; 0
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	40 e8       	ldi	r20, 0x80	; 128
    15b8:	5f e3       	ldi	r21, 0x3F	; 63
    15ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15be:	88 23       	and	r24, r24
    15c0:	2c f4       	brge	.+10     	; 0x15cc <log_in+0x308>
		__ticks = 1;
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	9e 83       	std	Y+6, r25	; 0x06
    15c8:	8d 83       	std	Y+5, r24	; 0x05
    15ca:	3f c0       	rjmp	.+126    	; 0x164a <log_in+0x386>
	else if (__tmp > 65535)
    15cc:	6f 81       	ldd	r22, Y+7	; 0x07
    15ce:	78 85       	ldd	r23, Y+8	; 0x08
    15d0:	89 85       	ldd	r24, Y+9	; 0x09
    15d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15d4:	20 e0       	ldi	r18, 0x00	; 0
    15d6:	3f ef       	ldi	r19, 0xFF	; 255
    15d8:	4f e7       	ldi	r20, 0x7F	; 127
    15da:	57 e4       	ldi	r21, 0x47	; 71
    15dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15e0:	18 16       	cp	r1, r24
    15e2:	4c f5       	brge	.+82     	; 0x1636 <log_in+0x372>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    15e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    15e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    15ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	40 e2       	ldi	r20, 0x20	; 32
    15f2:	51 e4       	ldi	r21, 0x41	; 65
    15f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15f8:	dc 01       	movw	r26, r24
    15fa:	cb 01       	movw	r24, r22
    15fc:	bc 01       	movw	r22, r24
    15fe:	cd 01       	movw	r24, r26
    1600:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1604:	dc 01       	movw	r26, r24
    1606:	cb 01       	movw	r24, r22
    1608:	9e 83       	std	Y+6, r25	; 0x06
    160a:	8d 83       	std	Y+5, r24	; 0x05
    160c:	0f c0       	rjmp	.+30     	; 0x162c <log_in+0x368>
    160e:	88 ec       	ldi	r24, 0xC8	; 200
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	9c 83       	std	Y+4, r25	; 0x04
    1614:	8b 83       	std	Y+3, r24	; 0x03
    1616:	8b 81       	ldd	r24, Y+3	; 0x03
    1618:	9c 81       	ldd	r25, Y+4	; 0x04
    161a:	01 97       	sbiw	r24, 0x01	; 1
    161c:	f1 f7       	brne	.-4      	; 0x161a <log_in+0x356>
    161e:	9c 83       	std	Y+4, r25	; 0x04
    1620:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1622:	8d 81       	ldd	r24, Y+5	; 0x05
    1624:	9e 81       	ldd	r25, Y+6	; 0x06
    1626:	01 97       	sbiw	r24, 0x01	; 1
    1628:	9e 83       	std	Y+6, r25	; 0x06
    162a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    162c:	8d 81       	ldd	r24, Y+5	; 0x05
    162e:	9e 81       	ldd	r25, Y+6	; 0x06
    1630:	00 97       	sbiw	r24, 0x00	; 0
    1632:	69 f7       	brne	.-38     	; 0x160e <log_in+0x34a>
    1634:	14 c0       	rjmp	.+40     	; 0x165e <log_in+0x39a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1636:	6f 81       	ldd	r22, Y+7	; 0x07
    1638:	78 85       	ldd	r23, Y+8	; 0x08
    163a:	89 85       	ldd	r24, Y+9	; 0x09
    163c:	9a 85       	ldd	r25, Y+10	; 0x0a
    163e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1642:	dc 01       	movw	r26, r24
    1644:	cb 01       	movw	r24, r22
    1646:	9e 83       	std	Y+6, r25	; 0x06
    1648:	8d 83       	std	Y+5, r24	; 0x05
    164a:	8d 81       	ldd	r24, Y+5	; 0x05
    164c:	9e 81       	ldd	r25, Y+6	; 0x06
    164e:	9a 83       	std	Y+2, r25	; 0x02
    1650:	89 83       	std	Y+1, r24	; 0x01
    1652:	89 81       	ldd	r24, Y+1	; 0x01
    1654:	9a 81       	ldd	r25, Y+2	; 0x02
    1656:	01 97       	sbiw	r24, 0x01	; 1
    1658:	f1 f7       	brne	.-4      	; 0x1656 <log_in+0x392>
    165a:	9a 83       	std	Y+2, r25	; 0x02
    165c:	89 83       	std	Y+1, r24	; 0x01


		_delay_ms(1000);
	}
}
    165e:	e6 96       	adiw	r28, 0x36	; 54
    1660:	0f b6       	in	r0, 0x3f	; 63
    1662:	f8 94       	cli
    1664:	de bf       	out	0x3e, r29	; 62
    1666:	0f be       	out	0x3f, r0	; 63
    1668:	cd bf       	out	0x3d, r28	; 61
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	08 95       	ret

00001670 <MUART_voidInit>:
#include <util/delay.h>
#include <stdlib.h>


void MUART_voidInit (void)
{
    1670:	df 93       	push	r29
    1672:	cf 93       	push	r28
    1674:	00 d0       	rcall	.+0      	; 0x1676 <MUART_voidInit+0x6>
    1676:	cd b7       	in	r28, 0x3d	; 61
    1678:	de b7       	in	r29, 0x3e	; 62
	u16 UBRR;
	/* choose baud rate */
#if BAUD_RATE == 2400 || BAUD_RATE == 4800 || BAUD_RATE == 9600
	UBRR = (F_CPU/(16*(u32)BAUD_RATE))-1;
    167a:	83 e3       	ldi	r24, 0x33	; 51
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	9a 83       	std	Y+2, r25	; 0x02
    1680:	89 83       	std	Y+1, r24	; 0x01
	UBRRL = (u8)UBRR;
    1682:	e9 e2       	ldi	r30, 0x29	; 41
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	89 81       	ldd	r24, Y+1	; 0x01
    1688:	80 83       	st	Z, r24
	UBRRH = (u8)(UBRR>>8);
    168a:	e0 e4       	ldi	r30, 0x40	; 64
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	89 81       	ldd	r24, Y+1	; 0x01
    1690:	9a 81       	ldd	r25, Y+2	; 0x02
    1692:	89 2f       	mov	r24, r25
    1694:	99 27       	eor	r25, r25
    1696:	80 83       	st	Z, r24
#else
	#error "Select correct BAUD_RATE"
#endif

	/*Enable UART TRANSMITTER*/
	SET_BIT(UCSRB,TXEN);
    1698:	aa e2       	ldi	r26, 0x2A	; 42
    169a:	b0 e0       	ldi	r27, 0x00	; 0
    169c:	ea e2       	ldi	r30, 0x2A	; 42
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	88 60       	ori	r24, 0x08	; 8
    16a4:	8c 93       	st	X, r24
	/*Enable UART RECEIVER*/
	SET_BIT(UCSRB,RXEN);
    16a6:	aa e2       	ldi	r26, 0x2A	; 42
    16a8:	b0 e0       	ldi	r27, 0x00	; 0
    16aa:	ea e2       	ldi	r30, 0x2A	; 42
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
    16b0:	80 61       	ori	r24, 0x10	; 16
    16b2:	8c 93       	st	X, r24

	/*SELECT UCSRC REG*/
	SET_BIT(UCSRC, URSEL);
    16b4:	a0 e4       	ldi	r26, 0x40	; 64
    16b6:	b0 e0       	ldi	r27, 0x00	; 0
    16b8:	e0 e4       	ldi	r30, 0x40	; 64
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	80 81       	ld	r24, Z
    16be:	80 68       	ori	r24, 0x80	; 128
    16c0:	8c 93       	st	X, r24
	/* Choose  8-BITS number of bits of char size*/
	SET_BIT(UCSRC, UCSZ0);
    16c2:	a0 e4       	ldi	r26, 0x40	; 64
    16c4:	b0 e0       	ldi	r27, 0x00	; 0
    16c6:	e0 e4       	ldi	r30, 0x40	; 64
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	80 81       	ld	r24, Z
    16cc:	82 60       	ori	r24, 0x02	; 2
    16ce:	8c 93       	st	X, r24
	SET_BIT(UCSRC, UCSZ1);
    16d0:	a0 e4       	ldi	r26, 0x40	; 64
    16d2:	b0 e0       	ldi	r27, 0x00	; 0
    16d4:	e0 e4       	ldi	r30, 0x40	; 64
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	80 81       	ld	r24, Z
    16da:	84 60       	ori	r24, 0x04	; 4
    16dc:	8c 93       	st	X, r24
	CLEAR_BIT(UCSRB, UCSZ2);
    16de:	aa e2       	ldi	r26, 0x2A	; 42
    16e0:	b0 e0       	ldi	r27, 0x00	; 0
    16e2:	ea e2       	ldi	r30, 0x2A	; 42
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	80 81       	ld	r24, Z
    16e8:	8b 7f       	andi	r24, 0xFB	; 251
    16ea:	8c 93       	st	X, r24

}
    16ec:	0f 90       	pop	r0
    16ee:	0f 90       	pop	r0
    16f0:	cf 91       	pop	r28
    16f2:	df 91       	pop	r29
    16f4:	08 95       	ret

000016f6 <MUART_voidSendData>:

void MUART_voidSendData(u8 A_u8Data)
{
    16f6:	df 93       	push	r29
    16f8:	cf 93       	push	r28
    16fa:	0f 92       	push	r0
    16fc:	cd b7       	in	r28, 0x3d	; 61
    16fe:	de b7       	in	r29, 0x3e	; 62
    1700:	89 83       	std	Y+1, r24	; 0x01
	/* WAIT FOR UDR BUFFER TO BE EMPTY*/
	while(GET_BIT(UCSRA,UDRE) == 0);
    1702:	eb e2       	ldi	r30, 0x2B	; 43
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	82 95       	swap	r24
    170a:	86 95       	lsr	r24
    170c:	87 70       	andi	r24, 0x07	; 7
    170e:	88 2f       	mov	r24, r24
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	81 70       	andi	r24, 0x01	; 1
    1714:	90 70       	andi	r25, 0x00	; 0
    1716:	00 97       	sbiw	r24, 0x00	; 0
    1718:	a1 f3       	breq	.-24     	; 0x1702 <MUART_voidSendData+0xc>
	UDR = A_u8Data;
    171a:	ec e2       	ldi	r30, 0x2C	; 44
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	89 81       	ldd	r24, Y+1	; 0x01
    1720:	80 83       	st	Z, r24
}
    1722:	0f 90       	pop	r0
    1724:	cf 91       	pop	r28
    1726:	df 91       	pop	r29
    1728:	08 95       	ret

0000172a <MUART_u8ReceiveData>:

u8 MUART_u8ReceiveData(void)
{
    172a:	df 93       	push	r29
    172c:	cf 93       	push	r28
    172e:	cd b7       	in	r28, 0x3d	; 61
    1730:	de b7       	in	r29, 0x3e	; 62
	/* WAIT FOR UDR BUFFER TO BE filled with unread data*/
	while(GET_BIT(UCSRA,RXC) == 0);
    1732:	eb e2       	ldi	r30, 0x2B	; 43
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	88 23       	and	r24, r24
    173a:	dc f7       	brge	.-10     	; 0x1732 <MUART_u8ReceiveData+0x8>
	return UDR;
    173c:	ec e2       	ldi	r30, 0x2C	; 44
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	80 81       	ld	r24, Z
}
    1742:	cf 91       	pop	r28
    1744:	df 91       	pop	r29
    1746:	08 95       	ret

00001748 <MUART_voidSendString>:

void MUART_voidSendString(u8* A_pu8Str)
{
    1748:	df 93       	push	r29
    174a:	cf 93       	push	r28
    174c:	00 d0       	rcall	.+0      	; 0x174e <MUART_voidSendString+0x6>
    174e:	cd b7       	in	r28, 0x3d	; 61
    1750:	de b7       	in	r29, 0x3e	; 62
    1752:	9a 83       	std	Y+2, r25	; 0x02
    1754:	89 83       	std	Y+1, r24	; 0x01
    1756:	0a c0       	rjmp	.+20     	; 0x176c <MUART_voidSendString+0x24>
	while(*A_pu8Str != '\0')
	{
		MUART_voidSendData(*A_pu8Str);
    1758:	e9 81       	ldd	r30, Y+1	; 0x01
    175a:	fa 81       	ldd	r31, Y+2	; 0x02
    175c:	80 81       	ld	r24, Z
    175e:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <MUART_voidSendData>
		A_pu8Str++;
    1762:	89 81       	ldd	r24, Y+1	; 0x01
    1764:	9a 81       	ldd	r25, Y+2	; 0x02
    1766:	01 96       	adiw	r24, 0x01	; 1
    1768:	9a 83       	std	Y+2, r25	; 0x02
    176a:	89 83       	std	Y+1, r24	; 0x01
	return UDR;
}

void MUART_voidSendString(u8* A_pu8Str)
{
	while(*A_pu8Str != '\0')
    176c:	e9 81       	ldd	r30, Y+1	; 0x01
    176e:	fa 81       	ldd	r31, Y+2	; 0x02
    1770:	80 81       	ld	r24, Z
    1772:	88 23       	and	r24, r24
    1774:	89 f7       	brne	.-30     	; 0x1758 <MUART_voidSendString+0x10>
	{
		MUART_voidSendData(*A_pu8Str);
		A_pu8Str++;
	}
	MUART_voidSendData('\n');
    1776:	8a e0       	ldi	r24, 0x0A	; 10
    1778:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <MUART_voidSendData>

}
    177c:	0f 90       	pop	r0
    177e:	0f 90       	pop	r0
    1780:	cf 91       	pop	r28
    1782:	df 91       	pop	r29
    1784:	08 95       	ret

00001786 <TIMER0_init>:
 * @param parameters_in The mode and initial value settings for TIMER0.
 * @param parameters_out None.
 * @return None.
 */

void TIMER0_init(void){
    1786:	df 93       	push	r29
    1788:	cf 93       	push	r28
    178a:	cd b7       	in	r28, 0x3d	; 61
    178c:	de b7       	in	r29, 0x3e	; 62
	case TIMER0_PHASECORRECT_MODE:
		SET_BIT(TCCR0,WGM00);
		CLEAR_BIT(TCCR0,WGM01);
		break;
	case TIMER0_CTC_MODE:
		CLEAR_BIT(TCCR0,WGM00);
    178e:	a3 e5       	ldi	r26, 0x53	; 83
    1790:	b0 e0       	ldi	r27, 0x00	; 0
    1792:	e3 e5       	ldi	r30, 0x53	; 83
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	80 81       	ld	r24, Z
    1798:	8f 7b       	andi	r24, 0xBF	; 191
    179a:	8c 93       	st	X, r24
		SET_BIT(TCCR0,WGM01);
    179c:	a3 e5       	ldi	r26, 0x53	; 83
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    17a0:	e3 e5       	ldi	r30, 0x53	; 83
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	88 60       	ori	r24, 0x08	; 8
    17a8:	8c 93       	st	X, r24
		/*ENABLE COMPARE MATCH INTRRUPET*/
		TIMER0_IntrrupetEnable_OC();
    17aa:	0e 94 1c 0c 	call	0x1838	; 0x1838 <TIMER0_IntrrupetEnable_OC>
		break;
	}


	/*SET INTI VALUE*/
	TIMER0_Preload(TIMER0_INITIAL_VALUE);
    17ae:	80 e0       	ldi	r24, 0x00	; 0
    17b0:	0e 94 42 0c 	call	0x1884	; 0x1884 <TIMER0_Preload>
}
    17b4:	cf 91       	pop	r28
    17b6:	df 91       	pop	r29
    17b8:	08 95       	ret

000017ba <TIMER0_Start>:
 * @param parameters_in The prescaler setting for TIMER0.
 * @param parameters_out None.
 * @return None.
 */

void TIMER0_Start(void){
    17ba:	df 93       	push	r29
    17bc:	cf 93       	push	r28
    17be:	cd b7       	in	r28, 0x3d	; 61
    17c0:	de b7       	in	r29, 0x3e	; 62
	case TIMER0_SCALER_1024:
		SET_BIT(TCCR0,CS00);
		SET_BIT(TCCR0,CS02);
		break;
	case TIMER0_SCALER_256:
		SET_BIT(TCCR0,CS02);
    17c2:	a3 e5       	ldi	r26, 0x53	; 83
    17c4:	b0 e0       	ldi	r27, 0x00	; 0
    17c6:	e3 e5       	ldi	r30, 0x53	; 83
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	80 81       	ld	r24, Z
    17cc:	84 60       	ori	r24, 0x04	; 4
    17ce:	8c 93       	st	X, r24
		break;
	default:
		break;

	}
}
    17d0:	cf 91       	pop	r28
    17d2:	df 91       	pop	r29
    17d4:	08 95       	ret

000017d6 <FAST_PWM_MODE_0>:
 * @param parameters_out None.
 * @return None.
 */

void FAST_PWM_MODE_0(void)
{
    17d6:	df 93       	push	r29
    17d8:	cf 93       	push	r28
    17da:	cd b7       	in	r28, 0x3d	; 61
    17dc:	de b7       	in	r29, 0x3e	; 62
	case nin_inverting:
		CLEAR_BIT(TCCR0 , COM00);
		SET_BIT(TCCR0 , COM01);
		break;
	case inverting:
		SET_BIT(TCCR0 , COM00);
    17de:	a3 e5       	ldi	r26, 0x53	; 83
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
    17e2:	e3 e5       	ldi	r30, 0x53	; 83
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	80 81       	ld	r24, Z
    17e8:	80 61       	ori	r24, 0x10	; 16
    17ea:	8c 93       	st	X, r24
		SET_BIT(TCCR0 , COM01);
    17ec:	a3 e5       	ldi	r26, 0x53	; 83
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	e3 e5       	ldi	r30, 0x53	; 83
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	80 62       	ori	r24, 0x20	; 32
    17f8:	8c 93       	st	X, r24
		break;

	}
}
    17fa:	cf 91       	pop	r28
    17fc:	df 91       	pop	r29
    17fe:	08 95       	ret

00001800 <TIMER0_IntrrupetEnable_OV>:
 * @param None.
 * @param parameters_in None.
 * @param parameters_out None.
 * @return None.
 */
void TIMER0_IntrrupetEnable_OV(){
    1800:	df 93       	push	r29
    1802:	cf 93       	push	r28
    1804:	cd b7       	in	r28, 0x3d	; 61
    1806:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TOIE0);
    1808:	a9 e5       	ldi	r26, 0x59	; 89
    180a:	b0 e0       	ldi	r27, 0x00	; 0
    180c:	e9 e5       	ldi	r30, 0x59	; 89
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	80 81       	ld	r24, Z
    1812:	81 60       	ori	r24, 0x01	; 1
    1814:	8c 93       	st	X, r24
}
    1816:	cf 91       	pop	r28
    1818:	df 91       	pop	r29
    181a:	08 95       	ret

0000181c <TIMER0_IntrrupetDisable_OV>:
 * @param None.
 * @param parameters_in None.
 * @param parameters_out None.
 * @return None.
 */
void TIMER0_IntrrupetDisable_OV(){
    181c:	df 93       	push	r29
    181e:	cf 93       	push	r28
    1820:	cd b7       	in	r28, 0x3d	; 61
    1822:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK,TOIE0);
    1824:	a9 e5       	ldi	r26, 0x59	; 89
    1826:	b0 e0       	ldi	r27, 0x00	; 0
    1828:	e9 e5       	ldi	r30, 0x59	; 89
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	80 81       	ld	r24, Z
    182e:	8e 7f       	andi	r24, 0xFE	; 254
    1830:	8c 93       	st	X, r24
}
    1832:	cf 91       	pop	r28
    1834:	df 91       	pop	r29
    1836:	08 95       	ret

00001838 <TIMER0_IntrrupetEnable_OC>:
 * @param parameters_in None.
 * @param parameters_out None.
 * @return None.
 */

void TIMER0_IntrrupetEnable_OC(){
    1838:	df 93       	push	r29
    183a:	cf 93       	push	r28
    183c:	cd b7       	in	r28, 0x3d	; 61
    183e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,OCIE0);
    1840:	a9 e5       	ldi	r26, 0x59	; 89
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	e9 e5       	ldi	r30, 0x59	; 89
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	80 81       	ld	r24, Z
    184a:	82 60       	ori	r24, 0x02	; 2
    184c:	8c 93       	st	X, r24
}
    184e:	cf 91       	pop	r28
    1850:	df 91       	pop	r29
    1852:	08 95       	ret

00001854 <TIMER0_IntrrupetDisable_OC>:
 * @param None.
 * @param parameters_in None.
 * @param parameters_out None.
 * @return None.
 */
void TIMER0_IntrrupetDisable_OC(){
    1854:	df 93       	push	r29
    1856:	cf 93       	push	r28
    1858:	cd b7       	in	r28, 0x3d	; 61
    185a:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK,OCIE0);
    185c:	a9 e5       	ldi	r26, 0x59	; 89
    185e:	b0 e0       	ldi	r27, 0x00	; 0
    1860:	e9 e5       	ldi	r30, 0x59	; 89
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	80 81       	ld	r24, Z
    1866:	8d 7f       	andi	r24, 0xFD	; 253
    1868:	8c 93       	st	X, r24
}
    186a:	cf 91       	pop	r28
    186c:	df 91       	pop	r29
    186e:	08 95       	ret

00001870 <TIMER0_Stop>:
 * @param parameters_in None.
 * @param parameters_out None.
 * @return None.
 */

void TIMER0_Stop(void){
    1870:	df 93       	push	r29
    1872:	cf 93       	push	r28
    1874:	cd b7       	in	r28, 0x3d	; 61
    1876:	de b7       	in	r29, 0x3e	; 62
	TCCR0=0X00;
    1878:	e3 e5       	ldi	r30, 0x53	; 83
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	10 82       	st	Z, r1
}
    187e:	cf 91       	pop	r28
    1880:	df 91       	pop	r29
    1882:	08 95       	ret

00001884 <TIMER0_Preload>:
 * @param preload The value to preload the TIMER0 counter with.
 * @param parameters_in The preload value.
 * @param parameters_out None.
 * @return None.
 */
void TIMER0_Preload(u8 preload){
    1884:	df 93       	push	r29
    1886:	cf 93       	push	r28
    1888:	0f 92       	push	r0
    188a:	cd b7       	in	r28, 0x3d	; 61
    188c:	de b7       	in	r29, 0x3e	; 62
    188e:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=preload;
    1890:	e2 e5       	ldi	r30, 0x52	; 82
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	89 81       	ldd	r24, Y+1	; 0x01
    1896:	80 83       	st	Z, r24
}
    1898:	0f 90       	pop	r0
    189a:	cf 91       	pop	r28
    189c:	df 91       	pop	r29
    189e:	08 95       	ret

000018a0 <TIMER0_OC_Value>:
 * @param value The value to set for the output compare register.
 * @param parameters_in The output compare value.
 * @param parameters_out None.
 * @return None.
 */
void TIMER0_OC_Value(u8 value){
    18a0:	df 93       	push	r29
    18a2:	cf 93       	push	r28
    18a4:	0f 92       	push	r0
    18a6:	cd b7       	in	r28, 0x3d	; 61
    18a8:	de b7       	in	r29, 0x3e	; 62
    18aa:	89 83       	std	Y+1, r24	; 0x01
	OCR0=value;
    18ac:	ec e5       	ldi	r30, 0x5C	; 92
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	89 81       	ldd	r24, Y+1	; 0x01
    18b2:	80 83       	st	Z, r24
}
    18b4:	0f 90       	pop	r0
    18b6:	cf 91       	pop	r28
    18b8:	df 91       	pop	r29
    18ba:	08 95       	ret

000018bc <vTIMER1_INIT>:
 * @param parameters_out None.
 * @return None.
 */

void vTIMER1_INIT(void)
{
    18bc:	df 93       	push	r29
    18be:	cf 93       	push	r28
    18c0:	cd b7       	in	r28, 0x3d	; 61
    18c2:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TCCR1A,WGM10);
	CLEAR_BIT(TCCR1A,WGM11);
	SET_BIT(TCCR1B,WGM12);
	CLEAR_BIT(TCCR1B,WGM13);
#elif  TIMER1_MODE==TIMER1_FASTPWM_ICR_TOP_MODE
	CLEAR_BIT(TCCR1A,WGM10);
    18c4:	af e4       	ldi	r26, 0x4F	; 79
    18c6:	b0 e0       	ldi	r27, 0x00	; 0
    18c8:	ef e4       	ldi	r30, 0x4F	; 79
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	80 81       	ld	r24, Z
    18ce:	8e 7f       	andi	r24, 0xFE	; 254
    18d0:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,WGM11);
    18d2:	af e4       	ldi	r26, 0x4F	; 79
    18d4:	b0 e0       	ldi	r27, 0x00	; 0
    18d6:	ef e4       	ldi	r30, 0x4F	; 79
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
    18dc:	82 60       	ori	r24, 0x02	; 2
    18de:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM12);
    18e0:	ae e4       	ldi	r26, 0x4E	; 78
    18e2:	b0 e0       	ldi	r27, 0x00	; 0
    18e4:	ee e4       	ldi	r30, 0x4E	; 78
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	80 81       	ld	r24, Z
    18ea:	88 60       	ori	r24, 0x08	; 8
    18ec:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM13);
    18ee:	ae e4       	ldi	r26, 0x4E	; 78
    18f0:	b0 e0       	ldi	r27, 0x00	; 0
    18f2:	ee e4       	ldi	r30, 0x4E	; 78
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	80 81       	ld	r24, Z
    18f8:	80 61       	ori	r24, 0x10	; 16
    18fa:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM12);
	SET_BIT(TCCR1B,WGM13);
#endif


}
    18fc:	cf 91       	pop	r28
    18fe:	df 91       	pop	r29
    1900:	08 95       	ret

00001902 <Timer1_OCRA1Mode>:
 * @param parameters_out None.
 * @return None.
 */

void Timer1_OCRA1Mode(u8 oc1a_mode)
{
    1902:	df 93       	push	r29
    1904:	cf 93       	push	r28
    1906:	00 d0       	rcall	.+0      	; 0x1908 <Timer1_OCRA1Mode+0x6>
    1908:	0f 92       	push	r0
    190a:	cd b7       	in	r28, 0x3d	; 61
    190c:	de b7       	in	r29, 0x3e	; 62
    190e:	89 83       	std	Y+1, r24	; 0x01
	switch (oc1a_mode)
    1910:	89 81       	ldd	r24, Y+1	; 0x01
    1912:	28 2f       	mov	r18, r24
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	3b 83       	std	Y+3, r19	; 0x03
    1918:	2a 83       	std	Y+2, r18	; 0x02
    191a:	8a 81       	ldd	r24, Y+2	; 0x02
    191c:	9b 81       	ldd	r25, Y+3	; 0x03
    191e:	82 30       	cpi	r24, 0x02	; 2
    1920:	91 05       	cpc	r25, r1
    1922:	c1 f0       	breq	.+48     	; 0x1954 <Timer1_OCRA1Mode+0x52>
    1924:	2a 81       	ldd	r18, Y+2	; 0x02
    1926:	3b 81       	ldd	r19, Y+3	; 0x03
    1928:	23 30       	cpi	r18, 0x03	; 3
    192a:	31 05       	cpc	r19, r1
    192c:	11 f1       	breq	.+68     	; 0x1972 <Timer1_OCRA1Mode+0x70>
    192e:	8a 81       	ldd	r24, Y+2	; 0x02
    1930:	9b 81       	ldd	r25, Y+3	; 0x03
    1932:	00 97       	sbiw	r24, 0x00	; 0
    1934:	61 f5       	brne	.+88     	; 0x198e <Timer1_OCRA1Mode+0x8c>
	{
	case OCRA1_DISCONNECTED:
		CLEAR_BIT(TCCR1A,COM1A0);
    1936:	af e4       	ldi	r26, 0x4F	; 79
    1938:	b0 e0       	ldi	r27, 0x00	; 0
    193a:	ef e4       	ldi	r30, 0x4F	; 79
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	80 81       	ld	r24, Z
    1940:	8f 7b       	andi	r24, 0xBF	; 191
    1942:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,COM1A1);
    1944:	af e4       	ldi	r26, 0x4F	; 79
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	ef e4       	ldi	r30, 0x4F	; 79
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	80 81       	ld	r24, Z
    194e:	8f 77       	andi	r24, 0x7F	; 127
    1950:	8c 93       	st	X, r24
    1952:	1d c0       	rjmp	.+58     	; 0x198e <Timer1_OCRA1Mode+0x8c>
		break;

	case ORA1_NON_INVERTING:
		CLEAR_BIT(TCCR1A,COM1A0);
    1954:	af e4       	ldi	r26, 0x4F	; 79
    1956:	b0 e0       	ldi	r27, 0x00	; 0
    1958:	ef e4       	ldi	r30, 0x4F	; 79
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	80 81       	ld	r24, Z
    195e:	8f 7b       	andi	r24, 0xBF	; 191
    1960:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,COM1A1);
    1962:	af e4       	ldi	r26, 0x4F	; 79
    1964:	b0 e0       	ldi	r27, 0x00	; 0
    1966:	ef e4       	ldi	r30, 0x4F	; 79
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	80 81       	ld	r24, Z
    196c:	80 68       	ori	r24, 0x80	; 128
    196e:	8c 93       	st	X, r24
    1970:	0e c0       	rjmp	.+28     	; 0x198e <Timer1_OCRA1Mode+0x8c>
		break;
	case OCA1_INVERTING:
		SET_BIT(TCCR1A,COM1A0);
    1972:	af e4       	ldi	r26, 0x4F	; 79
    1974:	b0 e0       	ldi	r27, 0x00	; 0
    1976:	ef e4       	ldi	r30, 0x4F	; 79
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	80 81       	ld	r24, Z
    197c:	80 64       	ori	r24, 0x40	; 64
    197e:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,COM1A1);
    1980:	af e4       	ldi	r26, 0x4F	; 79
    1982:	b0 e0       	ldi	r27, 0x00	; 0
    1984:	ef e4       	ldi	r30, 0x4F	; 79
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	80 81       	ld	r24, Z
    198a:	80 68       	ori	r24, 0x80	; 128
    198c:	8c 93       	st	X, r24
		break;
	}
}
    198e:	0f 90       	pop	r0
    1990:	0f 90       	pop	r0
    1992:	0f 90       	pop	r0
    1994:	cf 91       	pop	r28
    1996:	df 91       	pop	r29
    1998:	08 95       	ret

0000199a <Timer1_OCRB1Mode>:
 * @param parameters_in The output compare mode for channel B.
 * @param parameters_out None.
 * @return None.
 */
void Timer1_OCRB1Mode(u8 oc1b_mode)
{
    199a:	df 93       	push	r29
    199c:	cf 93       	push	r28
    199e:	00 d0       	rcall	.+0      	; 0x19a0 <Timer1_OCRB1Mode+0x6>
    19a0:	0f 92       	push	r0
    19a2:	cd b7       	in	r28, 0x3d	; 61
    19a4:	de b7       	in	r29, 0x3e	; 62
    19a6:	89 83       	std	Y+1, r24	; 0x01
	switch (oc1b_mode)
    19a8:	89 81       	ldd	r24, Y+1	; 0x01
    19aa:	28 2f       	mov	r18, r24
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	3b 83       	std	Y+3, r19	; 0x03
    19b0:	2a 83       	std	Y+2, r18	; 0x02
    19b2:	8a 81       	ldd	r24, Y+2	; 0x02
    19b4:	9b 81       	ldd	r25, Y+3	; 0x03
    19b6:	82 30       	cpi	r24, 0x02	; 2
    19b8:	91 05       	cpc	r25, r1
    19ba:	c1 f0       	breq	.+48     	; 0x19ec <Timer1_OCRB1Mode+0x52>
    19bc:	2a 81       	ldd	r18, Y+2	; 0x02
    19be:	3b 81       	ldd	r19, Y+3	; 0x03
    19c0:	23 30       	cpi	r18, 0x03	; 3
    19c2:	31 05       	cpc	r19, r1
    19c4:	11 f1       	breq	.+68     	; 0x1a0a <Timer1_OCRB1Mode+0x70>
    19c6:	8a 81       	ldd	r24, Y+2	; 0x02
    19c8:	9b 81       	ldd	r25, Y+3	; 0x03
    19ca:	00 97       	sbiw	r24, 0x00	; 0
    19cc:	61 f5       	brne	.+88     	; 0x1a26 <Timer1_OCRB1Mode+0x8c>
	{
	case OCRB1_DISCONNECTED:
		CLEAR_BIT(TCCR1A,COM1B0);
    19ce:	af e4       	ldi	r26, 0x4F	; 79
    19d0:	b0 e0       	ldi	r27, 0x00	; 0
    19d2:	ef e4       	ldi	r30, 0x4F	; 79
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	80 81       	ld	r24, Z
    19d8:	8f 7e       	andi	r24, 0xEF	; 239
    19da:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,COM1B1);
    19dc:	af e4       	ldi	r26, 0x4F	; 79
    19de:	b0 e0       	ldi	r27, 0x00	; 0
    19e0:	ef e4       	ldi	r30, 0x4F	; 79
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	80 81       	ld	r24, Z
    19e6:	8f 7d       	andi	r24, 0xDF	; 223
    19e8:	8c 93       	st	X, r24
    19ea:	1d c0       	rjmp	.+58     	; 0x1a26 <Timer1_OCRB1Mode+0x8c>
		break;

	case ORB1_NON_INVERTING:
		CLEAR_BIT(TCCR1A,COM1B0);
    19ec:	af e4       	ldi	r26, 0x4F	; 79
    19ee:	b0 e0       	ldi	r27, 0x00	; 0
    19f0:	ef e4       	ldi	r30, 0x4F	; 79
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	80 81       	ld	r24, Z
    19f6:	8f 7e       	andi	r24, 0xEF	; 239
    19f8:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,COM1B1);
    19fa:	af e4       	ldi	r26, 0x4F	; 79
    19fc:	b0 e0       	ldi	r27, 0x00	; 0
    19fe:	ef e4       	ldi	r30, 0x4F	; 79
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	80 81       	ld	r24, Z
    1a04:	80 62       	ori	r24, 0x20	; 32
    1a06:	8c 93       	st	X, r24
    1a08:	0e c0       	rjmp	.+28     	; 0x1a26 <Timer1_OCRB1Mode+0x8c>
		break;
	case OCB1_INVERTING:
		SET_BIT(TCCR1A,COM1B0);
    1a0a:	af e4       	ldi	r26, 0x4F	; 79
    1a0c:	b0 e0       	ldi	r27, 0x00	; 0
    1a0e:	ef e4       	ldi	r30, 0x4F	; 79
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	80 81       	ld	r24, Z
    1a14:	80 61       	ori	r24, 0x10	; 16
    1a16:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,COM1B1);
    1a18:	af e4       	ldi	r26, 0x4F	; 79
    1a1a:	b0 e0       	ldi	r27, 0x00	; 0
    1a1c:	ef e4       	ldi	r30, 0x4F	; 79
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	80 81       	ld	r24, Z
    1a22:	80 62       	ori	r24, 0x20	; 32
    1a24:	8c 93       	st	X, r24
		break;
	}
}
    1a26:	0f 90       	pop	r0
    1a28:	0f 90       	pop	r0
    1a2a:	0f 90       	pop	r0
    1a2c:	cf 91       	pop	r28
    1a2e:	df 91       	pop	r29
    1a30:	08 95       	ret

00001a32 <vTIMER1_START>:
 * @param parameters_out None.
 * @return None.
 */

void vTIMER1_START(void)
{
    1a32:	df 93       	push	r29
    1a34:	cf 93       	push	r28
    1a36:	cd b7       	in	r28, 0x3d	; 61
    1a38:	de b7       	in	r29, 0x3e	; 62
	TCCR1B=TCCR1B&0b11111000;
    1a3a:	ae e4       	ldi	r26, 0x4E	; 78
    1a3c:	b0 e0       	ldi	r27, 0x00	; 0
    1a3e:	ee e4       	ldi	r30, 0x4E	; 78
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	80 81       	ld	r24, Z
    1a44:	88 7f       	andi	r24, 0xF8	; 248
    1a46:	8c 93       	st	X, r24
	TCCR1B=TCCR1B|TIMER1_PRESCALLER;
    1a48:	ae e4       	ldi	r26, 0x4E	; 78
    1a4a:	b0 e0       	ldi	r27, 0x00	; 0
    1a4c:	ee e4       	ldi	r30, 0x4E	; 78
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	80 81       	ld	r24, Z
    1a52:	82 60       	ori	r24, 0x02	; 2
    1a54:	8c 93       	st	X, r24
}
    1a56:	cf 91       	pop	r28
    1a58:	df 91       	pop	r29
    1a5a:	08 95       	ret

00001a5c <vTIMER1_STOP>:
 * @param parameters_in None.
 * @param parameters_out None.
 * @return None.
 */
void vTIMER1_STOP(void)
{
    1a5c:	df 93       	push	r29
    1a5e:	cf 93       	push	r28
    1a60:	cd b7       	in	r28, 0x3d	; 61
    1a62:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TCCR1B,0);
    1a64:	ae e4       	ldi	r26, 0x4E	; 78
    1a66:	b0 e0       	ldi	r27, 0x00	; 0
    1a68:	ee e4       	ldi	r30, 0x4E	; 78
    1a6a:	f0 e0       	ldi	r31, 0x00	; 0
    1a6c:	80 81       	ld	r24, Z
    1a6e:	8e 7f       	andi	r24, 0xFE	; 254
    1a70:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,1);
    1a72:	ae e4       	ldi	r26, 0x4E	; 78
    1a74:	b0 e0       	ldi	r27, 0x00	; 0
    1a76:	ee e4       	ldi	r30, 0x4E	; 78
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	80 81       	ld	r24, Z
    1a7c:	8d 7f       	andi	r24, 0xFD	; 253
    1a7e:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,2);
    1a80:	ae e4       	ldi	r26, 0x4E	; 78
    1a82:	b0 e0       	ldi	r27, 0x00	; 0
    1a84:	ee e4       	ldi	r30, 0x4E	; 78
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	80 81       	ld	r24, Z
    1a8a:	8b 7f       	andi	r24, 0xFB	; 251
    1a8c:	8c 93       	st	X, r24
}
    1a8e:	cf 91       	pop	r28
    1a90:	df 91       	pop	r29
    1a92:	08 95       	ret

00001a94 <vTIMER1_preload>:
 * @param parameters_in The preload value.
 * @param parameters_out None.
 * @return None.
 */
void vTIMER1_preload(u8 preload)
{
    1a94:	df 93       	push	r29
    1a96:	cf 93       	push	r28
    1a98:	0f 92       	push	r0
    1a9a:	cd b7       	in	r28, 0x3d	; 61
    1a9c:	de b7       	in	r29, 0x3e	; 62
    1a9e:	89 83       	std	Y+1, r24	; 0x01
	TCNT1=preload;
    1aa0:	ec e4       	ldi	r30, 0x4C	; 76
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	89 81       	ldd	r24, Y+1	; 0x01
    1aa6:	88 2f       	mov	r24, r24
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	91 83       	std	Z+1, r25	; 0x01
    1aac:	80 83       	st	Z, r24
}
    1aae:	0f 90       	pop	r0
    1ab0:	cf 91       	pop	r28
    1ab2:	df 91       	pop	r29
    1ab4:	08 95       	ret

00001ab6 <vTIMER1_Compare_OCR1A>:
 * @param parameters_in The output compare value for channel A.
 * @param parameters_out None.
 * @return None.
 */
void vTIMER1_Compare_OCR1A(u16 OCRA)
{
    1ab6:	df 93       	push	r29
    1ab8:	cf 93       	push	r28
    1aba:	00 d0       	rcall	.+0      	; 0x1abc <vTIMER1_Compare_OCR1A+0x6>
    1abc:	cd b7       	in	r28, 0x3d	; 61
    1abe:	de b7       	in	r29, 0x3e	; 62
    1ac0:	9a 83       	std	Y+2, r25	; 0x02
    1ac2:	89 83       	std	Y+1, r24	; 0x01
	OCR1A=OCRA;
    1ac4:	ea e4       	ldi	r30, 0x4A	; 74
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	89 81       	ldd	r24, Y+1	; 0x01
    1aca:	9a 81       	ldd	r25, Y+2	; 0x02
    1acc:	91 83       	std	Z+1, r25	; 0x01
    1ace:	80 83       	st	Z, r24
}
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	cf 91       	pop	r28
    1ad6:	df 91       	pop	r29
    1ad8:	08 95       	ret

00001ada <vTIMER1_Compare_OCRB1>:
 * @param parameters_in The output compare value for channel B.
 * @param parameters_out None.
 * @return None.
 */
void vTIMER1_Compare_OCRB1(u16 OCRB)
{
    1ada:	df 93       	push	r29
    1adc:	cf 93       	push	r28
    1ade:	00 d0       	rcall	.+0      	; 0x1ae0 <vTIMER1_Compare_OCRB1+0x6>
    1ae0:	cd b7       	in	r28, 0x3d	; 61
    1ae2:	de b7       	in	r29, 0x3e	; 62
    1ae4:	9a 83       	std	Y+2, r25	; 0x02
    1ae6:	89 83       	std	Y+1, r24	; 0x01
	OCR1B=OCRB;
    1ae8:	e8 e4       	ldi	r30, 0x48	; 72
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	89 81       	ldd	r24, Y+1	; 0x01
    1aee:	9a 81       	ldd	r25, Y+2	; 0x02
    1af0:	91 83       	std	Z+1, r25	; 0x01
    1af2:	80 83       	st	Z, r24
}
    1af4:	0f 90       	pop	r0
    1af6:	0f 90       	pop	r0
    1af8:	cf 91       	pop	r28
    1afa:	df 91       	pop	r29
    1afc:	08 95       	ret

00001afe <vTIMER1_ICR1>:
 * @param parameters_in The input capture value.
 * @param parameters_out None.
 * @return None.
 */
void vTIMER1_ICR1(u16 ICR)
{
    1afe:	df 93       	push	r29
    1b00:	cf 93       	push	r28
    1b02:	00 d0       	rcall	.+0      	; 0x1b04 <vTIMER1_ICR1+0x6>
    1b04:	cd b7       	in	r28, 0x3d	; 61
    1b06:	de b7       	in	r29, 0x3e	; 62
    1b08:	9a 83       	std	Y+2, r25	; 0x02
    1b0a:	89 83       	std	Y+1, r24	; 0x01
	ICR1=ICR;
    1b0c:	e6 e4       	ldi	r30, 0x46	; 70
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	89 81       	ldd	r24, Y+1	; 0x01
    1b12:	9a 81       	ldd	r25, Y+2	; 0x02
    1b14:	91 83       	std	Z+1, r25	; 0x01
    1b16:	80 83       	st	Z, r24
}
    1b18:	0f 90       	pop	r0
    1b1a:	0f 90       	pop	r0
    1b1c:	cf 91       	pop	r28
    1b1e:	df 91       	pop	r29
    1b20:	08 95       	ret

00001b22 <Timer1_InputCaptureEdge>:
 * @param parameters_in The edge type for input capture.
 * @param parameters_out None.
 * @return None.
 */
void Timer1_InputCaptureEdge(u8 ICU_Edge_type_edge)
{
    1b22:	df 93       	push	r29
    1b24:	cf 93       	push	r28
    1b26:	0f 92       	push	r0
    1b28:	cd b7       	in	r28, 0x3d	; 61
    1b2a:	de b7       	in	r29, 0x3e	; 62
    1b2c:	89 83       	std	Y+1, r24	; 0x01
	if(ICU_Edge_type_edge==ICU_Edge_type_RISING)
    1b2e:	89 81       	ldd	r24, Y+1	; 0x01
    1b30:	88 23       	and	r24, r24
    1b32:	41 f4       	brne	.+16     	; 0x1b44 <Timer1_InputCaptureEdge+0x22>
		SET_BIT(TCCR1B,ICES1);
    1b34:	ae e4       	ldi	r26, 0x4E	; 78
    1b36:	b0 e0       	ldi	r27, 0x00	; 0
    1b38:	ee e4       	ldi	r30, 0x4E	; 78
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	80 81       	ld	r24, Z
    1b3e:	80 64       	ori	r24, 0x40	; 64
    1b40:	8c 93       	st	X, r24
    1b42:	0a c0       	rjmp	.+20     	; 0x1b58 <Timer1_InputCaptureEdge+0x36>

	else if(ICU_Edge_type_edge==ICU_Edge_type_RISING)
    1b44:	89 81       	ldd	r24, Y+1	; 0x01
    1b46:	88 23       	and	r24, r24
    1b48:	39 f4       	brne	.+14     	; 0x1b58 <Timer1_InputCaptureEdge+0x36>
		CLEAR_BIT(TCCR1B,ICES1);
    1b4a:	ae e4       	ldi	r26, 0x4E	; 78
    1b4c:	b0 e0       	ldi	r27, 0x00	; 0
    1b4e:	ee e4       	ldi	r30, 0x4E	; 78
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	80 81       	ld	r24, Z
    1b54:	8f 7b       	andi	r24, 0xBF	; 191
    1b56:	8c 93       	st	X, r24
}
    1b58:	0f 90       	pop	r0
    1b5a:	cf 91       	pop	r28
    1b5c:	df 91       	pop	r29
    1b5e:	08 95       	ret

00001b60 <Timer1_ICR_InterruptEnable>:
 * @param parameters_out None.
 * @return None.
 */

void Timer1_ICR_InterruptEnable(void)
{
    1b60:	df 93       	push	r29
    1b62:	cf 93       	push	r28
    1b64:	cd b7       	in	r28, 0x3d	; 61
    1b66:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TICIE1);
    1b68:	a9 e5       	ldi	r26, 0x59	; 89
    1b6a:	b0 e0       	ldi	r27, 0x00	; 0
    1b6c:	e9 e5       	ldi	r30, 0x59	; 89
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	80 81       	ld	r24, Z
    1b72:	80 62       	ori	r24, 0x20	; 32
    1b74:	8c 93       	st	X, r24
}
    1b76:	cf 91       	pop	r28
    1b78:	df 91       	pop	r29
    1b7a:	08 95       	ret

00001b7c <Timer1_ICR_InterruptDisable>:
 * @param parameters_in None.
 * @param parameters_out None.
 * @return None.
 */
void Timer1_ICR_InterruptDisable(void)
{
    1b7c:	df 93       	push	r29
    1b7e:	cf 93       	push	r28
    1b80:	cd b7       	in	r28, 0x3d	; 61
    1b82:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK, TICIE1);
    1b84:	a9 e5       	ldi	r26, 0x59	; 89
    1b86:	b0 e0       	ldi	r27, 0x00	; 0
    1b88:	e9 e5       	ldi	r30, 0x59	; 89
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	80 81       	ld	r24, Z
    1b8e:	8f 7d       	andi	r24, 0xDF	; 223
    1b90:	8c 93       	st	X, r24
}
    1b92:	cf 91       	pop	r28
    1b94:	df 91       	pop	r29
    1b96:	08 95       	ret

00001b98 <Timer1_OVF_InterruptEnable>:
 * @param parameters_in None.
 * @param parameters_out None.
 * @return None.
 */
void Timer1_OVF_InterruptEnable(void)
{
    1b98:	df 93       	push	r29
    1b9a:	cf 93       	push	r28
    1b9c:	cd b7       	in	r28, 0x3d	; 61
    1b9e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, TOIE1);
    1ba0:	a9 e5       	ldi	r26, 0x59	; 89
    1ba2:	b0 e0       	ldi	r27, 0x00	; 0
    1ba4:	e9 e5       	ldi	r30, 0x59	; 89
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	80 81       	ld	r24, Z
    1baa:	84 60       	ori	r24, 0x04	; 4
    1bac:	8c 93       	st	X, r24
}
    1bae:	cf 91       	pop	r28
    1bb0:	df 91       	pop	r29
    1bb2:	08 95       	ret

00001bb4 <Timer1_OVF_InterruptDisable>:
 * @param parameters_in None.
 * @param parameters_out None.
 * @return None.
 */
void Timer1_OVF_InterruptDisable(void)
{
    1bb4:	df 93       	push	r29
    1bb6:	cf 93       	push	r28
    1bb8:	cd b7       	in	r28, 0x3d	; 61
    1bba:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK, TOIE1);
    1bbc:	a9 e5       	ldi	r26, 0x59	; 89
    1bbe:	b0 e0       	ldi	r27, 0x00	; 0
    1bc0:	e9 e5       	ldi	r30, 0x59	; 89
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	80 81       	ld	r24, Z
    1bc6:	8b 7f       	andi	r24, 0xFB	; 251
    1bc8:	8c 93       	st	X, r24
}
    1bca:	cf 91       	pop	r28
    1bcc:	df 91       	pop	r29
    1bce:	08 95       	ret

00001bd0 <Timer1_OCA_InterruptEnable>:
 * @param parameters_in None.
 * @param parameters_out None.
 * @return None.
 */
void Timer1_OCA_InterruptEnable(void)
{
    1bd0:	df 93       	push	r29
    1bd2:	cf 93       	push	r28
    1bd4:	cd b7       	in	r28, 0x3d	; 61
    1bd6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, OCIE1A);
    1bd8:	a9 e5       	ldi	r26, 0x59	; 89
    1bda:	b0 e0       	ldi	r27, 0x00	; 0
    1bdc:	e9 e5       	ldi	r30, 0x59	; 89
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	80 81       	ld	r24, Z
    1be2:	80 61       	ori	r24, 0x10	; 16
    1be4:	8c 93       	st	X, r24
}
    1be6:	cf 91       	pop	r28
    1be8:	df 91       	pop	r29
    1bea:	08 95       	ret

00001bec <Timer1_OCA_InterruptDisable>:
 * @param parameters_in None.
 * @param parameters_out None.
 * @return None.
 */
void Timer1_OCA_InterruptDisable(void)
{
    1bec:	df 93       	push	r29
    1bee:	cf 93       	push	r28
    1bf0:	cd b7       	in	r28, 0x3d	; 61
    1bf2:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK, OCIE1A);
    1bf4:	a9 e5       	ldi	r26, 0x59	; 89
    1bf6:	b0 e0       	ldi	r27, 0x00	; 0
    1bf8:	e9 e5       	ldi	r30, 0x59	; 89
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	80 81       	ld	r24, Z
    1bfe:	8f 7e       	andi	r24, 0xEF	; 239
    1c00:	8c 93       	st	X, r24
}
    1c02:	cf 91       	pop	r28
    1c04:	df 91       	pop	r29
    1c06:	08 95       	ret

00001c08 <Timer1_OCB_InterruptEnable>:
 * @param parameters_in None.
 * @param parameters_out None.
 * @return None.
 */
void Timer1_OCB_InterruptEnable(void)
{
    1c08:	df 93       	push	r29
    1c0a:	cf 93       	push	r28
    1c0c:	cd b7       	in	r28, 0x3d	; 61
    1c0e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, OCIE1B);
    1c10:	a9 e5       	ldi	r26, 0x59	; 89
    1c12:	b0 e0       	ldi	r27, 0x00	; 0
    1c14:	e9 e5       	ldi	r30, 0x59	; 89
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	80 81       	ld	r24, Z
    1c1a:	88 60       	ori	r24, 0x08	; 8
    1c1c:	8c 93       	st	X, r24
}
    1c1e:	cf 91       	pop	r28
    1c20:	df 91       	pop	r29
    1c22:	08 95       	ret

00001c24 <Timer1_OCB_InterruptDisable>:
 * @param parameters_in None.
 * @param parameters_out None.
 * @return None.
 */
void Timer1_OCB_InterruptDisable(void)
{
    1c24:	df 93       	push	r29
    1c26:	cf 93       	push	r28
    1c28:	cd b7       	in	r28, 0x3d	; 61
    1c2a:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK, OCIE1B);
    1c2c:	a9 e5       	ldi	r26, 0x59	; 89
    1c2e:	b0 e0       	ldi	r27, 0x00	; 0
    1c30:	e9 e5       	ldi	r30, 0x59	; 89
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	80 81       	ld	r24, Z
    1c36:	87 7f       	andi	r24, 0xF7	; 247
    1c38:	8c 93       	st	X, r24
}
    1c3a:	cf 91       	pop	r28
    1c3c:	df 91       	pop	r29
    1c3e:	08 95       	ret

00001c40 <vTIMER2_Init>:

/**********************************Timer 2**************************************/

// Timer2 Initialization
void vTIMER2_Init(void)
{
    1c40:	df 93       	push	r29
    1c42:	cf 93       	push	r28
    1c44:	cd b7       	in	r28, 0x3d	; 61
    1c46:	de b7       	in	r29, 0x3e	; 62
    /*1. Select Mode*/
    vTimer2_SetMode(TIMER2_MODE);
    1c48:	83 e0       	ldi	r24, 0x03	; 3
    1c4a:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <vTimer2_SetMode>

    /*2- Select OC2 Pin Mode*/
    vTimer2_OC2_SetMode(TIMER2_OC2_MODE);
    1c4e:	82 e0       	ldi	r24, 0x02	; 2
    1c50:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <vTimer2_OC2_SetMode>

    /*3- Set Pre-load "Initial Counting Value" Value*/
    vTimer2_SetPreLoad(TIMER2_INITIAL_VALUE);
    1c54:	80 e0       	ldi	r24, 0x00	; 0
    1c56:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <vTimer2_SetPreLoad>

    /*4- Set Compare Match Value*/
    vTimer2_SetOCRValue(TIMER2_OCR2_VALUE);
    1c5a:	80 e0       	ldi	r24, 0x00	; 0
    1c5c:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <vTimer2_SetOCRValue>

    /*5- Enable/ Disable OV Interrupt*/
    vTimer2_OVF_InterruptDisable();
    1c60:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <vTimer2_OVF_InterruptDisable>

    /*6- Enable/ Disable OC Interrupt*/
    vTimer2_OCM_InterruptDisable();
    1c64:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <vTimer2_OCM_InterruptDisable>
}
    1c68:	cf 91       	pop	r28
    1c6a:	df 91       	pop	r29
    1c6c:	08 95       	ret

00001c6e <vTIMER2_Start>:

// Timer2 Start
void vTIMER2_Start(void)
{
    1c6e:	df 93       	push	r29
    1c70:	cf 93       	push	r28
    1c72:	cd b7       	in	r28, 0x3d	; 61
    1c74:	de b7       	in	r29, 0x3e	; 62
    vTimer2_PrescalerSelect(TIMER2_PRESCALER);
    1c76:	84 e0       	ldi	r24, 0x04	; 4
    1c78:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <vTimer2_PrescalerSelect>
}
    1c7c:	cf 91       	pop	r28
    1c7e:	df 91       	pop	r29
    1c80:	08 95       	ret

00001c82 <vTIMER2_Stop>:

// Timer2 Stop
void vTIMER2_Stop(void)
{
    1c82:	df 93       	push	r29
    1c84:	cf 93       	push	r28
    1c86:	cd b7       	in	r28, 0x3d	; 61
    1c88:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(TCCR2, CS20);
    1c8a:	a5 e4       	ldi	r26, 0x45	; 69
    1c8c:	b0 e0       	ldi	r27, 0x00	; 0
    1c8e:	e5 e4       	ldi	r30, 0x45	; 69
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	80 81       	ld	r24, Z
    1c94:	8e 7f       	andi	r24, 0xFE	; 254
    1c96:	8c 93       	st	X, r24
    CLEAR_BIT(TCCR2, CS21);
    1c98:	a5 e4       	ldi	r26, 0x45	; 69
    1c9a:	b0 e0       	ldi	r27, 0x00	; 0
    1c9c:	e5 e4       	ldi	r30, 0x45	; 69
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	80 81       	ld	r24, Z
    1ca2:	8d 7f       	andi	r24, 0xFD	; 253
    1ca4:	8c 93       	st	X, r24
    CLEAR_BIT(TCCR2, CS22);
    1ca6:	a5 e4       	ldi	r26, 0x45	; 69
    1ca8:	b0 e0       	ldi	r27, 0x00	; 0
    1caa:	e5 e4       	ldi	r30, 0x45	; 69
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	80 81       	ld	r24, Z
    1cb0:	8b 7f       	andi	r24, 0xFB	; 251
    1cb2:	8c 93       	st	X, r24
}
    1cb4:	cf 91       	pop	r28
    1cb6:	df 91       	pop	r29
    1cb8:	08 95       	ret

00001cba <vTimer2_SetPreLoad>:

// Set Timer2 Pre-load
void vTimer2_SetPreLoad(u8 value)
{
    1cba:	df 93       	push	r29
    1cbc:	cf 93       	push	r28
    1cbe:	0f 92       	push	r0
    1cc0:	cd b7       	in	r28, 0x3d	; 61
    1cc2:	de b7       	in	r29, 0x3e	; 62
    1cc4:	89 83       	std	Y+1, r24	; 0x01
    TCNT2 = value;
    1cc6:	e4 e4       	ldi	r30, 0x44	; 68
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	89 81       	ldd	r24, Y+1	; 0x01
    1ccc:	80 83       	st	Z, r24
}
    1cce:	0f 90       	pop	r0
    1cd0:	cf 91       	pop	r28
    1cd2:	df 91       	pop	r29
    1cd4:	08 95       	ret

00001cd6 <vTimer2_SetOCRValue>:

// Set Timer2 Compare Match Value
void vTimer2_SetOCRValue(u8 value)
{
    1cd6:	df 93       	push	r29
    1cd8:	cf 93       	push	r28
    1cda:	0f 92       	push	r0
    1cdc:	cd b7       	in	r28, 0x3d	; 61
    1cde:	de b7       	in	r29, 0x3e	; 62
    1ce0:	89 83       	std	Y+1, r24	; 0x01
    OCR2 = value;
    1ce2:	e3 e4       	ldi	r30, 0x43	; 67
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	89 81       	ldd	r24, Y+1	; 0x01
    1ce8:	80 83       	st	Z, r24
}
    1cea:	0f 90       	pop	r0
    1cec:	cf 91       	pop	r28
    1cee:	df 91       	pop	r29
    1cf0:	08 95       	ret

00001cf2 <vTimer2_SetMode>:

// Set Timer2 Mode
void vTimer2_SetMode(u8 mode)
{
    1cf2:	df 93       	push	r29
    1cf4:	cf 93       	push	r28
    1cf6:	00 d0       	rcall	.+0      	; 0x1cf8 <vTimer2_SetMode+0x6>
    1cf8:	0f 92       	push	r0
    1cfa:	cd b7       	in	r28, 0x3d	; 61
    1cfc:	de b7       	in	r29, 0x3e	; 62
    1cfe:	89 83       	std	Y+1, r24	; 0x01
    switch (mode)
    1d00:	89 81       	ldd	r24, Y+1	; 0x01
    1d02:	28 2f       	mov	r18, r24
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	3b 83       	std	Y+3, r19	; 0x03
    1d08:	2a 83       	std	Y+2, r18	; 0x02
    1d0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d0e:	81 30       	cpi	r24, 0x01	; 1
    1d10:	91 05       	cpc	r25, r1
    1d12:	21 f1       	breq	.+72     	; 0x1d5c <vTimer2_SetMode+0x6a>
    1d14:	2a 81       	ldd	r18, Y+2	; 0x02
    1d16:	3b 81       	ldd	r19, Y+3	; 0x03
    1d18:	22 30       	cpi	r18, 0x02	; 2
    1d1a:	31 05       	cpc	r19, r1
    1d1c:	2c f4       	brge	.+10     	; 0x1d28 <vTimer2_SetMode+0x36>
    1d1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d20:	9b 81       	ldd	r25, Y+3	; 0x03
    1d22:	00 97       	sbiw	r24, 0x00	; 0
    1d24:	61 f0       	breq	.+24     	; 0x1d3e <vTimer2_SetMode+0x4c>
    1d26:	46 c0       	rjmp	.+140    	; 0x1db4 <vTimer2_SetMode+0xc2>
    1d28:	2a 81       	ldd	r18, Y+2	; 0x02
    1d2a:	3b 81       	ldd	r19, Y+3	; 0x03
    1d2c:	22 30       	cpi	r18, 0x02	; 2
    1d2e:	31 05       	cpc	r19, r1
    1d30:	21 f1       	breq	.+72     	; 0x1d7a <vTimer2_SetMode+0x88>
    1d32:	8a 81       	ldd	r24, Y+2	; 0x02
    1d34:	9b 81       	ldd	r25, Y+3	; 0x03
    1d36:	83 30       	cpi	r24, 0x03	; 3
    1d38:	91 05       	cpc	r25, r1
    1d3a:	71 f1       	breq	.+92     	; 0x1d98 <vTimer2_SetMode+0xa6>
    1d3c:	3b c0       	rjmp	.+118    	; 0x1db4 <vTimer2_SetMode+0xc2>
    {
    case TIMER2_NORMAL_MODE:
        CLEAR_BIT(TCCR2, WGM20);
    1d3e:	a5 e4       	ldi	r26, 0x45	; 69
    1d40:	b0 e0       	ldi	r27, 0x00	; 0
    1d42:	e5 e4       	ldi	r30, 0x45	; 69
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	80 81       	ld	r24, Z
    1d48:	8f 7b       	andi	r24, 0xBF	; 191
    1d4a:	8c 93       	st	X, r24
        CLEAR_BIT(TCCR2, WGM21);
    1d4c:	a5 e4       	ldi	r26, 0x45	; 69
    1d4e:	b0 e0       	ldi	r27, 0x00	; 0
    1d50:	e5 e4       	ldi	r30, 0x45	; 69
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	80 81       	ld	r24, Z
    1d56:	87 7f       	andi	r24, 0xF7	; 247
    1d58:	8c 93       	st	X, r24
    1d5a:	2c c0       	rjmp	.+88     	; 0x1db4 <vTimer2_SetMode+0xc2>
        break;

    case TIMER2_PWM_PHASE_CORRECT_MODE:
        SET_BIT(TCCR2, WGM20);
    1d5c:	a5 e4       	ldi	r26, 0x45	; 69
    1d5e:	b0 e0       	ldi	r27, 0x00	; 0
    1d60:	e5 e4       	ldi	r30, 0x45	; 69
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	80 81       	ld	r24, Z
    1d66:	80 64       	ori	r24, 0x40	; 64
    1d68:	8c 93       	st	X, r24
        CLEAR_BIT(TCCR2, WGM21);
    1d6a:	a5 e4       	ldi	r26, 0x45	; 69
    1d6c:	b0 e0       	ldi	r27, 0x00	; 0
    1d6e:	e5 e4       	ldi	r30, 0x45	; 69
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	80 81       	ld	r24, Z
    1d74:	87 7f       	andi	r24, 0xF7	; 247
    1d76:	8c 93       	st	X, r24
    1d78:	1d c0       	rjmp	.+58     	; 0x1db4 <vTimer2_SetMode+0xc2>
        break;

    case TIMER2_CTC_MODE:
        CLEAR_BIT(TCCR2, WGM20);
    1d7a:	a5 e4       	ldi	r26, 0x45	; 69
    1d7c:	b0 e0       	ldi	r27, 0x00	; 0
    1d7e:	e5 e4       	ldi	r30, 0x45	; 69
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	80 81       	ld	r24, Z
    1d84:	8f 7b       	andi	r24, 0xBF	; 191
    1d86:	8c 93       	st	X, r24
        SET_BIT(TCCR2, WGM21);
    1d88:	a5 e4       	ldi	r26, 0x45	; 69
    1d8a:	b0 e0       	ldi	r27, 0x00	; 0
    1d8c:	e5 e4       	ldi	r30, 0x45	; 69
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	80 81       	ld	r24, Z
    1d92:	88 60       	ori	r24, 0x08	; 8
    1d94:	8c 93       	st	X, r24
    1d96:	0e c0       	rjmp	.+28     	; 0x1db4 <vTimer2_SetMode+0xc2>
        break;

    case TIMER2_FASTPWM_MODE:
        SET_BIT(TCCR2, WGM20);
    1d98:	a5 e4       	ldi	r26, 0x45	; 69
    1d9a:	b0 e0       	ldi	r27, 0x00	; 0
    1d9c:	e5 e4       	ldi	r30, 0x45	; 69
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	80 81       	ld	r24, Z
    1da2:	80 64       	ori	r24, 0x40	; 64
    1da4:	8c 93       	st	X, r24
        SET_BIT(TCCR2, WGM21);
    1da6:	a5 e4       	ldi	r26, 0x45	; 69
    1da8:	b0 e0       	ldi	r27, 0x00	; 0
    1daa:	e5 e4       	ldi	r30, 0x45	; 69
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	80 81       	ld	r24, Z
    1db0:	88 60       	ori	r24, 0x08	; 8
    1db2:	8c 93       	st	X, r24

    default:
        // Error handling
        break;
    }
}
    1db4:	0f 90       	pop	r0
    1db6:	0f 90       	pop	r0
    1db8:	0f 90       	pop	r0
    1dba:	cf 91       	pop	r28
    1dbc:	df 91       	pop	r29
    1dbe:	08 95       	ret

00001dc0 <vTimer2_OC2_SetMode>:

// Set Timer2 OC2 Mode
void vTimer2_OC2_SetMode(u8 mode)
{
    1dc0:	df 93       	push	r29
    1dc2:	cf 93       	push	r28
    1dc4:	00 d0       	rcall	.+0      	; 0x1dc6 <vTimer2_OC2_SetMode+0x6>
    1dc6:	0f 92       	push	r0
    1dc8:	cd b7       	in	r28, 0x3d	; 61
    1dca:	de b7       	in	r29, 0x3e	; 62
    1dcc:	89 83       	std	Y+1, r24	; 0x01
    switch (mode)
    1dce:	89 81       	ldd	r24, Y+1	; 0x01
    1dd0:	28 2f       	mov	r18, r24
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	3b 83       	std	Y+3, r19	; 0x03
    1dd6:	2a 83       	std	Y+2, r18	; 0x02
    1dd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dda:	9b 81       	ldd	r25, Y+3	; 0x03
    1ddc:	81 30       	cpi	r24, 0x01	; 1
    1dde:	91 05       	cpc	r25, r1
    1de0:	21 f1       	breq	.+72     	; 0x1e2a <vTimer2_OC2_SetMode+0x6a>
    1de2:	2a 81       	ldd	r18, Y+2	; 0x02
    1de4:	3b 81       	ldd	r19, Y+3	; 0x03
    1de6:	22 30       	cpi	r18, 0x02	; 2
    1de8:	31 05       	cpc	r19, r1
    1dea:	2c f4       	brge	.+10     	; 0x1df6 <vTimer2_OC2_SetMode+0x36>
    1dec:	8a 81       	ldd	r24, Y+2	; 0x02
    1dee:	9b 81       	ldd	r25, Y+3	; 0x03
    1df0:	00 97       	sbiw	r24, 0x00	; 0
    1df2:	61 f0       	breq	.+24     	; 0x1e0c <vTimer2_OC2_SetMode+0x4c>
    1df4:	46 c0       	rjmp	.+140    	; 0x1e82 <vTimer2_OC2_SetMode+0xc2>
    1df6:	2a 81       	ldd	r18, Y+2	; 0x02
    1df8:	3b 81       	ldd	r19, Y+3	; 0x03
    1dfa:	22 30       	cpi	r18, 0x02	; 2
    1dfc:	31 05       	cpc	r19, r1
    1dfe:	21 f1       	breq	.+72     	; 0x1e48 <vTimer2_OC2_SetMode+0x88>
    1e00:	8a 81       	ldd	r24, Y+2	; 0x02
    1e02:	9b 81       	ldd	r25, Y+3	; 0x03
    1e04:	83 30       	cpi	r24, 0x03	; 3
    1e06:	91 05       	cpc	r25, r1
    1e08:	71 f1       	breq	.+92     	; 0x1e66 <vTimer2_OC2_SetMode+0xa6>
    1e0a:	3b c0       	rjmp	.+118    	; 0x1e82 <vTimer2_OC2_SetMode+0xc2>
    {
    case TIMER_OC_DISCONNECTED:
        CLEAR_BIT(TCCR2, COM20);
    1e0c:	a5 e4       	ldi	r26, 0x45	; 69
    1e0e:	b0 e0       	ldi	r27, 0x00	; 0
    1e10:	e5 e4       	ldi	r30, 0x45	; 69
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	80 81       	ld	r24, Z
    1e16:	8f 7e       	andi	r24, 0xEF	; 239
    1e18:	8c 93       	st	X, r24
        CLEAR_BIT(TCCR2, COM21);
    1e1a:	a5 e4       	ldi	r26, 0x45	; 69
    1e1c:	b0 e0       	ldi	r27, 0x00	; 0
    1e1e:	e5 e4       	ldi	r30, 0x45	; 69
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	80 81       	ld	r24, Z
    1e24:	8f 7d       	andi	r24, 0xDF	; 223
    1e26:	8c 93       	st	X, r24
    1e28:	2c c0       	rjmp	.+88     	; 0x1e82 <vTimer2_OC2_SetMode+0xc2>
        break;

    case TIMER_OC_TOGGLE:
        SET_BIT(TCCR2, COM20);
    1e2a:	a5 e4       	ldi	r26, 0x45	; 69
    1e2c:	b0 e0       	ldi	r27, 0x00	; 0
    1e2e:	e5 e4       	ldi	r30, 0x45	; 69
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	80 81       	ld	r24, Z
    1e34:	80 61       	ori	r24, 0x10	; 16
    1e36:	8c 93       	st	X, r24
        CLEAR_BIT(TCCR2, COM21);
    1e38:	a5 e4       	ldi	r26, 0x45	; 69
    1e3a:	b0 e0       	ldi	r27, 0x00	; 0
    1e3c:	e5 e4       	ldi	r30, 0x45	; 69
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	80 81       	ld	r24, Z
    1e42:	8f 7d       	andi	r24, 0xDF	; 223
    1e44:	8c 93       	st	X, r24
    1e46:	1d c0       	rjmp	.+58     	; 0x1e82 <vTimer2_OC2_SetMode+0xc2>
        break;

    case TIMER_OC_NON_INVERTING:
        CLEAR_BIT(TCCR2, COM20);
    1e48:	a5 e4       	ldi	r26, 0x45	; 69
    1e4a:	b0 e0       	ldi	r27, 0x00	; 0
    1e4c:	e5 e4       	ldi	r30, 0x45	; 69
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	80 81       	ld	r24, Z
    1e52:	8f 7e       	andi	r24, 0xEF	; 239
    1e54:	8c 93       	st	X, r24
        SET_BIT(TCCR2, COM21);
    1e56:	a5 e4       	ldi	r26, 0x45	; 69
    1e58:	b0 e0       	ldi	r27, 0x00	; 0
    1e5a:	e5 e4       	ldi	r30, 0x45	; 69
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	80 81       	ld	r24, Z
    1e60:	80 62       	ori	r24, 0x20	; 32
    1e62:	8c 93       	st	X, r24
    1e64:	0e c0       	rjmp	.+28     	; 0x1e82 <vTimer2_OC2_SetMode+0xc2>
        break;

    case TIMER_OC_INVERTING:
        SET_BIT(TCCR2, COM20);
    1e66:	a5 e4       	ldi	r26, 0x45	; 69
    1e68:	b0 e0       	ldi	r27, 0x00	; 0
    1e6a:	e5 e4       	ldi	r30, 0x45	; 69
    1e6c:	f0 e0       	ldi	r31, 0x00	; 0
    1e6e:	80 81       	ld	r24, Z
    1e70:	80 61       	ori	r24, 0x10	; 16
    1e72:	8c 93       	st	X, r24
        SET_BIT(TCCR2, COM21);
    1e74:	a5 e4       	ldi	r26, 0x45	; 69
    1e76:	b0 e0       	ldi	r27, 0x00	; 0
    1e78:	e5 e4       	ldi	r30, 0x45	; 69
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	80 81       	ld	r24, Z
    1e7e:	80 62       	ori	r24, 0x20	; 32
    1e80:	8c 93       	st	X, r24

    default:
        // Error handling
        break;
    }
}
    1e82:	0f 90       	pop	r0
    1e84:	0f 90       	pop	r0
    1e86:	0f 90       	pop	r0
    1e88:	cf 91       	pop	r28
    1e8a:	df 91       	pop	r29
    1e8c:	08 95       	ret

00001e8e <vTimer2_OVF_InterruptEnable>:

// Timer2 OVF Interrupt Enable
void vTimer2_OVF_InterruptEnable(void)
{
    1e8e:	df 93       	push	r29
    1e90:	cf 93       	push	r28
    1e92:	cd b7       	in	r28, 0x3d	; 61
    1e94:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, TOIE2);
    1e96:	a9 e5       	ldi	r26, 0x59	; 89
    1e98:	b0 e0       	ldi	r27, 0x00	; 0
    1e9a:	e9 e5       	ldi	r30, 0x59	; 89
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	80 81       	ld	r24, Z
    1ea0:	80 64       	ori	r24, 0x40	; 64
    1ea2:	8c 93       	st	X, r24
}
    1ea4:	cf 91       	pop	r28
    1ea6:	df 91       	pop	r29
    1ea8:	08 95       	ret

00001eaa <vTimer2_OVF_InterruptDisable>:

// Timer2 OVF Interrupt Disable
void vTimer2_OVF_InterruptDisable(void)
{
    1eaa:	df 93       	push	r29
    1eac:	cf 93       	push	r28
    1eae:	cd b7       	in	r28, 0x3d	; 61
    1eb0:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(TIMSK, TOIE2);
    1eb2:	a9 e5       	ldi	r26, 0x59	; 89
    1eb4:	b0 e0       	ldi	r27, 0x00	; 0
    1eb6:	e9 e5       	ldi	r30, 0x59	; 89
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	80 81       	ld	r24, Z
    1ebc:	8f 7b       	andi	r24, 0xBF	; 191
    1ebe:	8c 93       	st	X, r24
}
    1ec0:	cf 91       	pop	r28
    1ec2:	df 91       	pop	r29
    1ec4:	08 95       	ret

00001ec6 <vTimer2_OCM_InterruptEnable>:

// Timer2 OCM Interrupt Enable
void vTimer2_OCM_InterruptEnable(void)
{
    1ec6:	df 93       	push	r29
    1ec8:	cf 93       	push	r28
    1eca:	cd b7       	in	r28, 0x3d	; 61
    1ecc:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, OCIE2);
    1ece:	a9 e5       	ldi	r26, 0x59	; 89
    1ed0:	b0 e0       	ldi	r27, 0x00	; 0
    1ed2:	e9 e5       	ldi	r30, 0x59	; 89
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	80 81       	ld	r24, Z
    1ed8:	80 68       	ori	r24, 0x80	; 128
    1eda:	8c 93       	st	X, r24
}
    1edc:	cf 91       	pop	r28
    1ede:	df 91       	pop	r29
    1ee0:	08 95       	ret

00001ee2 <vTimer2_OCM_InterruptDisable>:

// Timer2 OCM Interrupt Disable
void vTimer2_OCM_InterruptDisable(void)
{
    1ee2:	df 93       	push	r29
    1ee4:	cf 93       	push	r28
    1ee6:	cd b7       	in	r28, 0x3d	; 61
    1ee8:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(TIMSK, OCIE2);
    1eea:	a9 e5       	ldi	r26, 0x59	; 89
    1eec:	b0 e0       	ldi	r27, 0x00	; 0
    1eee:	e9 e5       	ldi	r30, 0x59	; 89
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	80 81       	ld	r24, Z
    1ef4:	8f 77       	andi	r24, 0x7F	; 127
    1ef6:	8c 93       	st	X, r24
}
    1ef8:	cf 91       	pop	r28
    1efa:	df 91       	pop	r29
    1efc:	08 95       	ret

00001efe <vTimer2_PrescalerSelect>:

// Set Timer2 Prescaler
void vTimer2_PrescalerSelect(u8 prescaler)
{
    1efe:	df 93       	push	r29
    1f00:	cf 93       	push	r28
    1f02:	00 d0       	rcall	.+0      	; 0x1f04 <vTimer2_PrescalerSelect+0x6>
    1f04:	0f 92       	push	r0
    1f06:	cd b7       	in	r28, 0x3d	; 61
    1f08:	de b7       	in	r29, 0x3e	; 62
    1f0a:	89 83       	std	Y+1, r24	; 0x01
    switch (prescaler)
    1f0c:	89 81       	ldd	r24, Y+1	; 0x01
    1f0e:	28 2f       	mov	r18, r24
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	3b 83       	std	Y+3, r19	; 0x03
    1f14:	2a 83       	std	Y+2, r18	; 0x02
    1f16:	8a 81       	ldd	r24, Y+2	; 0x02
    1f18:	9b 81       	ldd	r25, Y+3	; 0x03
    1f1a:	84 30       	cpi	r24, 0x04	; 4
    1f1c:	91 05       	cpc	r25, r1
    1f1e:	09 f4       	brne	.+2      	; 0x1f22 <vTimer2_PrescalerSelect+0x24>
    1f20:	6b c0       	rjmp	.+214    	; 0x1ff8 <vTimer2_PrescalerSelect+0xfa>
    1f22:	2a 81       	ldd	r18, Y+2	; 0x02
    1f24:	3b 81       	ldd	r19, Y+3	; 0x03
    1f26:	25 30       	cpi	r18, 0x05	; 5
    1f28:	31 05       	cpc	r19, r1
    1f2a:	8c f4       	brge	.+34     	; 0x1f4e <vTimer2_PrescalerSelect+0x50>
    1f2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f30:	82 30       	cpi	r24, 0x02	; 2
    1f32:	91 05       	cpc	r25, r1
    1f34:	a9 f1       	breq	.+106    	; 0x1fa0 <vTimer2_PrescalerSelect+0xa2>
    1f36:	2a 81       	ldd	r18, Y+2	; 0x02
    1f38:	3b 81       	ldd	r19, Y+3	; 0x03
    1f3a:	23 30       	cpi	r18, 0x03	; 3
    1f3c:	31 05       	cpc	r19, r1
    1f3e:	0c f0       	brlt	.+2      	; 0x1f42 <vTimer2_PrescalerSelect+0x44>
    1f40:	45 c0       	rjmp	.+138    	; 0x1fcc <vTimer2_PrescalerSelect+0xce>
    1f42:	8a 81       	ldd	r24, Y+2	; 0x02
    1f44:	9b 81       	ldd	r25, Y+3	; 0x03
    1f46:	81 30       	cpi	r24, 0x01	; 1
    1f48:	91 05       	cpc	r25, r1
    1f4a:	a1 f0       	breq	.+40     	; 0x1f74 <vTimer2_PrescalerSelect+0x76>
    1f4c:	ac c0       	rjmp	.+344    	; 0x20a6 <vTimer2_PrescalerSelect+0x1a8>
    1f4e:	2a 81       	ldd	r18, Y+2	; 0x02
    1f50:	3b 81       	ldd	r19, Y+3	; 0x03
    1f52:	26 30       	cpi	r18, 0x06	; 6
    1f54:	31 05       	cpc	r19, r1
    1f56:	09 f4       	brne	.+2      	; 0x1f5a <vTimer2_PrescalerSelect+0x5c>
    1f58:	7b c0       	rjmp	.+246    	; 0x2050 <vTimer2_PrescalerSelect+0x152>
    1f5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f5e:	86 30       	cpi	r24, 0x06	; 6
    1f60:	91 05       	cpc	r25, r1
    1f62:	0c f4       	brge	.+2      	; 0x1f66 <vTimer2_PrescalerSelect+0x68>
    1f64:	5f c0       	rjmp	.+190    	; 0x2024 <vTimer2_PrescalerSelect+0x126>
    1f66:	2a 81       	ldd	r18, Y+2	; 0x02
    1f68:	3b 81       	ldd	r19, Y+3	; 0x03
    1f6a:	27 30       	cpi	r18, 0x07	; 7
    1f6c:	31 05       	cpc	r19, r1
    1f6e:	09 f4       	brne	.+2      	; 0x1f72 <vTimer2_PrescalerSelect+0x74>
    1f70:	85 c0       	rjmp	.+266    	; 0x207c <vTimer2_PrescalerSelect+0x17e>
    1f72:	99 c0       	rjmp	.+306    	; 0x20a6 <vTimer2_PrescalerSelect+0x1a8>
    {
    case TIMER2_SCALER_1:
        SET_BIT(TCCR2, CS20);
    1f74:	a5 e4       	ldi	r26, 0x45	; 69
    1f76:	b0 e0       	ldi	r27, 0x00	; 0
    1f78:	e5 e4       	ldi	r30, 0x45	; 69
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
    1f7c:	80 81       	ld	r24, Z
    1f7e:	81 60       	ori	r24, 0x01	; 1
    1f80:	8c 93       	st	X, r24
        CLEAR_BIT(TCCR2, CS21);
    1f82:	a5 e4       	ldi	r26, 0x45	; 69
    1f84:	b0 e0       	ldi	r27, 0x00	; 0
    1f86:	e5 e4       	ldi	r30, 0x45	; 69
    1f88:	f0 e0       	ldi	r31, 0x00	; 0
    1f8a:	80 81       	ld	r24, Z
    1f8c:	8d 7f       	andi	r24, 0xFD	; 253
    1f8e:	8c 93       	st	X, r24
        CLEAR_BIT(TCCR2, CS22);
    1f90:	a5 e4       	ldi	r26, 0x45	; 69
    1f92:	b0 e0       	ldi	r27, 0x00	; 0
    1f94:	e5 e4       	ldi	r30, 0x45	; 69
    1f96:	f0 e0       	ldi	r31, 0x00	; 0
    1f98:	80 81       	ld	r24, Z
    1f9a:	8b 7f       	andi	r24, 0xFB	; 251
    1f9c:	8c 93       	st	X, r24
    1f9e:	83 c0       	rjmp	.+262    	; 0x20a6 <vTimer2_PrescalerSelect+0x1a8>
        break;
    case TIMER2_SCALER_8:
        CLEAR_BIT(TCCR2, CS20);
    1fa0:	a5 e4       	ldi	r26, 0x45	; 69
    1fa2:	b0 e0       	ldi	r27, 0x00	; 0
    1fa4:	e5 e4       	ldi	r30, 0x45	; 69
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	80 81       	ld	r24, Z
    1faa:	8e 7f       	andi	r24, 0xFE	; 254
    1fac:	8c 93       	st	X, r24
        SET_BIT(TCCR2, CS21);
    1fae:	a5 e4       	ldi	r26, 0x45	; 69
    1fb0:	b0 e0       	ldi	r27, 0x00	; 0
    1fb2:	e5 e4       	ldi	r30, 0x45	; 69
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	80 81       	ld	r24, Z
    1fb8:	82 60       	ori	r24, 0x02	; 2
    1fba:	8c 93       	st	X, r24
        CLEAR_BIT(TCCR2, CS22);
    1fbc:	a5 e4       	ldi	r26, 0x45	; 69
    1fbe:	b0 e0       	ldi	r27, 0x00	; 0
    1fc0:	e5 e4       	ldi	r30, 0x45	; 69
    1fc2:	f0 e0       	ldi	r31, 0x00	; 0
    1fc4:	80 81       	ld	r24, Z
    1fc6:	8b 7f       	andi	r24, 0xFB	; 251
    1fc8:	8c 93       	st	X, r24
    1fca:	6d c0       	rjmp	.+218    	; 0x20a6 <vTimer2_PrescalerSelect+0x1a8>
        break;
    case TIMER2_SCALER_32:
        SET_BIT(TCCR2, CS20);
    1fcc:	a5 e4       	ldi	r26, 0x45	; 69
    1fce:	b0 e0       	ldi	r27, 0x00	; 0
    1fd0:	e5 e4       	ldi	r30, 0x45	; 69
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	80 81       	ld	r24, Z
    1fd6:	81 60       	ori	r24, 0x01	; 1
    1fd8:	8c 93       	st	X, r24
        SET_BIT(TCCR2, CS21);
    1fda:	a5 e4       	ldi	r26, 0x45	; 69
    1fdc:	b0 e0       	ldi	r27, 0x00	; 0
    1fde:	e5 e4       	ldi	r30, 0x45	; 69
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	80 81       	ld	r24, Z
    1fe4:	82 60       	ori	r24, 0x02	; 2
    1fe6:	8c 93       	st	X, r24
        CLEAR_BIT(TCCR2, CS22);
    1fe8:	a5 e4       	ldi	r26, 0x45	; 69
    1fea:	b0 e0       	ldi	r27, 0x00	; 0
    1fec:	e5 e4       	ldi	r30, 0x45	; 69
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	80 81       	ld	r24, Z
    1ff2:	8b 7f       	andi	r24, 0xFB	; 251
    1ff4:	8c 93       	st	X, r24
    1ff6:	57 c0       	rjmp	.+174    	; 0x20a6 <vTimer2_PrescalerSelect+0x1a8>
        break;
    case TIMER2_SCALER_64:
        CLEAR_BIT(TCCR2, CS20);
    1ff8:	a5 e4       	ldi	r26, 0x45	; 69
    1ffa:	b0 e0       	ldi	r27, 0x00	; 0
    1ffc:	e5 e4       	ldi	r30, 0x45	; 69
    1ffe:	f0 e0       	ldi	r31, 0x00	; 0
    2000:	80 81       	ld	r24, Z
    2002:	8e 7f       	andi	r24, 0xFE	; 254
    2004:	8c 93       	st	X, r24
        CLEAR_BIT(TCCR2, CS21);
    2006:	a5 e4       	ldi	r26, 0x45	; 69
    2008:	b0 e0       	ldi	r27, 0x00	; 0
    200a:	e5 e4       	ldi	r30, 0x45	; 69
    200c:	f0 e0       	ldi	r31, 0x00	; 0
    200e:	80 81       	ld	r24, Z
    2010:	8d 7f       	andi	r24, 0xFD	; 253
    2012:	8c 93       	st	X, r24
        SET_BIT(TCCR2, CS22);
    2014:	a5 e4       	ldi	r26, 0x45	; 69
    2016:	b0 e0       	ldi	r27, 0x00	; 0
    2018:	e5 e4       	ldi	r30, 0x45	; 69
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	80 81       	ld	r24, Z
    201e:	84 60       	ori	r24, 0x04	; 4
    2020:	8c 93       	st	X, r24
    2022:	41 c0       	rjmp	.+130    	; 0x20a6 <vTimer2_PrescalerSelect+0x1a8>
        break;
    case TIMER2_SCALER_128:
        SET_BIT(TCCR2, CS20);
    2024:	a5 e4       	ldi	r26, 0x45	; 69
    2026:	b0 e0       	ldi	r27, 0x00	; 0
    2028:	e5 e4       	ldi	r30, 0x45	; 69
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	80 81       	ld	r24, Z
    202e:	81 60       	ori	r24, 0x01	; 1
    2030:	8c 93       	st	X, r24
        CLEAR_BIT(TCCR2, CS21);
    2032:	a5 e4       	ldi	r26, 0x45	; 69
    2034:	b0 e0       	ldi	r27, 0x00	; 0
    2036:	e5 e4       	ldi	r30, 0x45	; 69
    2038:	f0 e0       	ldi	r31, 0x00	; 0
    203a:	80 81       	ld	r24, Z
    203c:	8d 7f       	andi	r24, 0xFD	; 253
    203e:	8c 93       	st	X, r24
        SET_BIT(TCCR2, CS22);
    2040:	a5 e4       	ldi	r26, 0x45	; 69
    2042:	b0 e0       	ldi	r27, 0x00	; 0
    2044:	e5 e4       	ldi	r30, 0x45	; 69
    2046:	f0 e0       	ldi	r31, 0x00	; 0
    2048:	80 81       	ld	r24, Z
    204a:	84 60       	ori	r24, 0x04	; 4
    204c:	8c 93       	st	X, r24
    204e:	2b c0       	rjmp	.+86     	; 0x20a6 <vTimer2_PrescalerSelect+0x1a8>
        break;
    case TIMER2_SCALER_256:
        CLEAR_BIT(TCCR2, CS20);
    2050:	a5 e4       	ldi	r26, 0x45	; 69
    2052:	b0 e0       	ldi	r27, 0x00	; 0
    2054:	e5 e4       	ldi	r30, 0x45	; 69
    2056:	f0 e0       	ldi	r31, 0x00	; 0
    2058:	80 81       	ld	r24, Z
    205a:	8e 7f       	andi	r24, 0xFE	; 254
    205c:	8c 93       	st	X, r24
        SET_BIT(TCCR2, CS21);
    205e:	a5 e4       	ldi	r26, 0x45	; 69
    2060:	b0 e0       	ldi	r27, 0x00	; 0
    2062:	e5 e4       	ldi	r30, 0x45	; 69
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	80 81       	ld	r24, Z
    2068:	82 60       	ori	r24, 0x02	; 2
    206a:	8c 93       	st	X, r24
        SET_BIT(TCCR2, CS22);
    206c:	a5 e4       	ldi	r26, 0x45	; 69
    206e:	b0 e0       	ldi	r27, 0x00	; 0
    2070:	e5 e4       	ldi	r30, 0x45	; 69
    2072:	f0 e0       	ldi	r31, 0x00	; 0
    2074:	80 81       	ld	r24, Z
    2076:	84 60       	ori	r24, 0x04	; 4
    2078:	8c 93       	st	X, r24
    207a:	15 c0       	rjmp	.+42     	; 0x20a6 <vTimer2_PrescalerSelect+0x1a8>
        break;
    case TIMER2_SCALER_1024:
        SET_BIT(TCCR2, CS20);
    207c:	a5 e4       	ldi	r26, 0x45	; 69
    207e:	b0 e0       	ldi	r27, 0x00	; 0
    2080:	e5 e4       	ldi	r30, 0x45	; 69
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	80 81       	ld	r24, Z
    2086:	81 60       	ori	r24, 0x01	; 1
    2088:	8c 93       	st	X, r24
        SET_BIT(TCCR2, CS21);
    208a:	a5 e4       	ldi	r26, 0x45	; 69
    208c:	b0 e0       	ldi	r27, 0x00	; 0
    208e:	e5 e4       	ldi	r30, 0x45	; 69
    2090:	f0 e0       	ldi	r31, 0x00	; 0
    2092:	80 81       	ld	r24, Z
    2094:	82 60       	ori	r24, 0x02	; 2
    2096:	8c 93       	st	X, r24
        SET_BIT(TCCR2, CS22);
    2098:	a5 e4       	ldi	r26, 0x45	; 69
    209a:	b0 e0       	ldi	r27, 0x00	; 0
    209c:	e5 e4       	ldi	r30, 0x45	; 69
    209e:	f0 e0       	ldi	r31, 0x00	; 0
    20a0:	80 81       	ld	r24, Z
    20a2:	84 60       	ori	r24, 0x04	; 4
    20a4:	8c 93       	st	X, r24
        break;
    default:
        // Error handling
        break;
    }
}
    20a6:	0f 90       	pop	r0
    20a8:	0f 90       	pop	r0
    20aa:	0f 90       	pop	r0
    20ac:	cf 91       	pop	r28
    20ae:	df 91       	pop	r29
    20b0:	08 95       	ret

000020b2 <TWI_voidMasterInit>:
#include "TWI_Private.h"
#include "TWI_Config.h"

/* A function to Initialize Master */
void TWI_voidMasterInit (u8 Copy_u8SlaveAddress)
{
    20b2:	df 93       	push	r29
    20b4:	cf 93       	push	r28
    20b6:	0f 92       	push	r0
    20b8:	cd b7       	in	r28, 0x3d	; 61
    20ba:	de b7       	in	r29, 0x3e	; 62
    20bc:	89 83       	std	Y+1, r24	; 0x01
	/* Set Clock Frequency to 400kbps ( TWBR = 2, TWPS two Bits = 00 ) */
	TWBR = 2;
    20be:	e0 e2       	ldi	r30, 0x20	; 32
    20c0:	f0 e0       	ldi	r31, 0x00	; 0
    20c2:	82 e0       	ldi	r24, 0x02	; 2
    20c4:	80 83       	st	Z, r24
	CLEAR_BIT(TWSR, TWSR_TWPS0);
    20c6:	a1 e2       	ldi	r26, 0x21	; 33
    20c8:	b0 e0       	ldi	r27, 0x00	; 0
    20ca:	e1 e2       	ldi	r30, 0x21	; 33
    20cc:	f0 e0       	ldi	r31, 0x00	; 0
    20ce:	80 81       	ld	r24, Z
    20d0:	8e 7f       	andi	r24, 0xFE	; 254
    20d2:	8c 93       	st	X, r24
	CLEAR_BIT(TWSR, TWSR_TWPS1);
    20d4:	a1 e2       	ldi	r26, 0x21	; 33
    20d6:	b0 e0       	ldi	r27, 0x00	; 0
    20d8:	e1 e2       	ldi	r30, 0x21	; 33
    20da:	f0 e0       	ldi	r31, 0x00	; 0
    20dc:	80 81       	ld	r24, Z
    20de:	8d 7f       	andi	r24, 0xFD	; 253
    20e0:	8c 93       	st	X, r24

	/* Set address for master */
	if (Copy_u8SlaveAddress != 0)
    20e2:	89 81       	ldd	r24, Y+1	; 0x01
    20e4:	88 23       	and	r24, r24
    20e6:	29 f0       	breq	.+10     	; 0x20f2 <TWI_voidMasterInit+0x40>
	{
		/* Assign the required node address in the 7MSB in the register */
		TWAR = (Copy_u8SlaveAddress << 1);
    20e8:	e2 e2       	ldi	r30, 0x22	; 34
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	89 81       	ldd	r24, Y+1	; 0x01
    20ee:	88 0f       	add	r24, r24
    20f0:	80 83       	st	Z, r24
	}

	/* Enable TWI */
	SET_BIT(TWCR, TWCR_TWEN);
    20f2:	a6 e5       	ldi	r26, 0x56	; 86
    20f4:	b0 e0       	ldi	r27, 0x00	; 0
    20f6:	e6 e5       	ldi	r30, 0x56	; 86
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	80 81       	ld	r24, Z
    20fc:	84 60       	ori	r24, 0x04	; 4
    20fe:	8c 93       	st	X, r24
}
    2100:	0f 90       	pop	r0
    2102:	cf 91       	pop	r28
    2104:	df 91       	pop	r29
    2106:	08 95       	ret

00002108 <TWI_voidSlaveInit>:

/* A function to Initialize Slave */
void TWI_voidSlaveInit (u8 Copy_u8SlaveAddress)
{
    2108:	df 93       	push	r29
    210a:	cf 93       	push	r28
    210c:	0f 92       	push	r0
    210e:	cd b7       	in	r28, 0x3d	; 61
    2110:	de b7       	in	r29, 0x3e	; 62
    2112:	89 83       	std	Y+1, r24	; 0x01
	/* Assign the required node address in the 7MSB in the register */
	TWAR = Copy_u8SlaveAddress << 1;
    2114:	e2 e2       	ldi	r30, 0x22	; 34
    2116:	f0 e0       	ldi	r31, 0x00	; 0
    2118:	89 81       	ldd	r24, Y+1	; 0x01
    211a:	88 0f       	add	r24, r24
    211c:	80 83       	st	Z, r24

	/* Enable TWI */
	SET_BIT(TWCR, TWCR_TWEN);
    211e:	a6 e5       	ldi	r26, 0x56	; 86
    2120:	b0 e0       	ldi	r27, 0x00	; 0
    2122:	e6 e5       	ldi	r30, 0x56	; 86
    2124:	f0 e0       	ldi	r31, 0x00	; 0
    2126:	80 81       	ld	r24, Z
    2128:	84 60       	ori	r24, 0x04	; 4
    212a:	8c 93       	st	X, r24
}
    212c:	0f 90       	pop	r0
    212e:	cf 91       	pop	r28
    2130:	df 91       	pop	r29
    2132:	08 95       	ret

00002134 <TWI_SendStartCondition>:

/* A function to send start condition */
TWI_ErrStatus TWI_SendStartCondition (void)
{
    2134:	df 93       	push	r29
    2136:	cf 93       	push	r28
    2138:	0f 92       	push	r0
    213a:	cd b7       	in	r28, 0x3d	; 61
    213c:	de b7       	in	r29, 0x3e	; 62
	/* Variable for Error Status */
	TWI_ErrStatus Local_ErrStatus = NoError;
    213e:	19 82       	std	Y+1, r1	; 0x01

	/* Send Start Condition on the bus */
	SET_BIT(TWCR, TWCR_TWSTA);
    2140:	a6 e5       	ldi	r26, 0x56	; 86
    2142:	b0 e0       	ldi	r27, 0x00	; 0
    2144:	e6 e5       	ldi	r30, 0x56	; 86
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	80 81       	ld	r24, Z
    214a:	80 62       	ori	r24, 0x20	; 32
    214c:	8c 93       	st	X, r24

	/* Clear the interrupt flag to start previous operation */
	SET_BIT(TWCR, TWCR_TWINT);
    214e:	a6 e5       	ldi	r26, 0x56	; 86
    2150:	b0 e0       	ldi	r27, 0x00	; 0
    2152:	e6 e5       	ldi	r30, 0x56	; 86
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	80 81       	ld	r24, Z
    2158:	80 68       	ori	r24, 0x80	; 128
    215a:	8c 93       	st	X, r24

	/* Wait until the interrupt flag is raised again and previous operation is complete */
	while ((GET_BIT(TWCR, TWCR_TWINT)) == 0);
    215c:	e6 e5       	ldi	r30, 0x56	; 86
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	80 81       	ld	r24, Z
    2162:	88 23       	and	r24, r24
    2164:	dc f7       	brge	.-10     	; 0x215c <TWI_SendStartCondition+0x28>

	/* Check for the operation  */
	if ((TWSR & 0xF8) != START_ACK)
    2166:	e1 e2       	ldi	r30, 0x21	; 33
    2168:	f0 e0       	ldi	r31, 0x00	; 0
    216a:	80 81       	ld	r24, Z
    216c:	88 2f       	mov	r24, r24
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	88 7f       	andi	r24, 0xF8	; 248
    2172:	90 70       	andi	r25, 0x00	; 0
    2174:	88 30       	cpi	r24, 0x08	; 8
    2176:	91 05       	cpc	r25, r1
    2178:	11 f0       	breq	.+4      	; 0x217e <TWI_SendStartCondition+0x4a>
	{
		Local_ErrStatus = StartConditionErr;
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/* Do nothing */
	}

	return Local_ErrStatus;
    217e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2180:	0f 90       	pop	r0
    2182:	cf 91       	pop	r28
    2184:	df 91       	pop	r29
    2186:	08 95       	ret

00002188 <TWI_SendRepeatedStart>:

/* A function to send repeated start */
TWI_ErrStatus TWI_SendRepeatedStart (void)
{
    2188:	df 93       	push	r29
    218a:	cf 93       	push	r28
    218c:	0f 92       	push	r0
    218e:	cd b7       	in	r28, 0x3d	; 61
    2190:	de b7       	in	r29, 0x3e	; 62
	/* Variable for Error Status */
	TWI_ErrStatus Local_ErrStatus = NoError;
    2192:	19 82       	std	Y+1, r1	; 0x01

	/* Send Start Condition on the bus */
	SET_BIT(TWCR, TWCR_TWSTA);
    2194:	a6 e5       	ldi	r26, 0x56	; 86
    2196:	b0 e0       	ldi	r27, 0x00	; 0
    2198:	e6 e5       	ldi	r30, 0x56	; 86
    219a:	f0 e0       	ldi	r31, 0x00	; 0
    219c:	80 81       	ld	r24, Z
    219e:	80 62       	ori	r24, 0x20	; 32
    21a0:	8c 93       	st	X, r24

	/* Clear the interrupt flag to start previous operation */
	SET_BIT(TWCR, TWCR_TWINT);
    21a2:	a6 e5       	ldi	r26, 0x56	; 86
    21a4:	b0 e0       	ldi	r27, 0x00	; 0
    21a6:	e6 e5       	ldi	r30, 0x56	; 86
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	80 81       	ld	r24, Z
    21ac:	80 68       	ori	r24, 0x80	; 128
    21ae:	8c 93       	st	X, r24

	/* Wait until the interrupt flag is raised again and previous operation is complete */
	while ((GET_BIT(TWCR, TWCR_TWINT)) == 0);
    21b0:	e6 e5       	ldi	r30, 0x56	; 86
    21b2:	f0 e0       	ldi	r31, 0x00	; 0
    21b4:	80 81       	ld	r24, Z
    21b6:	88 23       	and	r24, r24
    21b8:	dc f7       	brge	.-10     	; 0x21b0 <TWI_SendRepeatedStart+0x28>

	/* Check for the operation  */
	if ((TWSR & 0xF8) != REP_START_ACK)
    21ba:	e1 e2       	ldi	r30, 0x21	; 33
    21bc:	f0 e0       	ldi	r31, 0x00	; 0
    21be:	80 81       	ld	r24, Z
    21c0:	88 2f       	mov	r24, r24
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	88 7f       	andi	r24, 0xF8	; 248
    21c6:	90 70       	andi	r25, 0x00	; 0
    21c8:	80 31       	cpi	r24, 0x10	; 16
    21ca:	91 05       	cpc	r25, r1
    21cc:	11 f0       	breq	.+4      	; 0x21d2 <TWI_SendRepeatedStart+0x4a>
	{
		Local_ErrStatus = RepeatedStartConditionErr;
    21ce:	82 e0       	ldi	r24, 0x02	; 2
    21d0:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/* Do nothing */
	}

	return Local_ErrStatus;
    21d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    21d4:	0f 90       	pop	r0
    21d6:	cf 91       	pop	r28
    21d8:	df 91       	pop	r29
    21da:	08 95       	ret

000021dc <TWI_SendSlaveAddressWithWrite>:

/* A function to send slave address with write */
TWI_ErrStatus TWI_SendSlaveAddressWithWrite (u8 Copy_u8SlaveAddress)
{
    21dc:	df 93       	push	r29
    21de:	cf 93       	push	r28
    21e0:	00 d0       	rcall	.+0      	; 0x21e2 <TWI_SendSlaveAddressWithWrite+0x6>
    21e2:	cd b7       	in	r28, 0x3d	; 61
    21e4:	de b7       	in	r29, 0x3e	; 62
    21e6:	8a 83       	std	Y+2, r24	; 0x02
	/* Variable for Error Status */
	TWI_ErrStatus Local_ErrStatus = NoError;
    21e8:	19 82       	std	Y+1, r1	; 0x01

	/* Set the slave address in the 7 MSB in the data register */
	TWDR = (Copy_u8SlaveAddress << 1);
    21ea:	e3 e2       	ldi	r30, 0x23	; 35
    21ec:	f0 e0       	ldi	r31, 0x00	; 0
    21ee:	8a 81       	ldd	r24, Y+2	; 0x02
    21f0:	88 0f       	add	r24, r24
    21f2:	80 83       	st	Z, r24

	/* Select Write */
	CLEAR_BIT(TWDR, TWDR_TWD0);
    21f4:	a3 e2       	ldi	r26, 0x23	; 35
    21f6:	b0 e0       	ldi	r27, 0x00	; 0
    21f8:	e3 e2       	ldi	r30, 0x23	; 35
    21fa:	f0 e0       	ldi	r31, 0x00	; 0
    21fc:	80 81       	ld	r24, Z
    21fe:	8e 7f       	andi	r24, 0xFE	; 254
    2200:	8c 93       	st	X, r24

	/* Clear Start Condition bit */
	CLEAR_BIT(TWCR, TWCR_TWSTA);
    2202:	a6 e5       	ldi	r26, 0x56	; 86
    2204:	b0 e0       	ldi	r27, 0x00	; 0
    2206:	e6 e5       	ldi	r30, 0x56	; 86
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	80 81       	ld	r24, Z
    220c:	8f 7d       	andi	r24, 0xDF	; 223
    220e:	8c 93       	st	X, r24

	/* Clear the interrupt flag to start previous operation */
	SET_BIT(TWCR, TWCR_TWINT);
    2210:	a6 e5       	ldi	r26, 0x56	; 86
    2212:	b0 e0       	ldi	r27, 0x00	; 0
    2214:	e6 e5       	ldi	r30, 0x56	; 86
    2216:	f0 e0       	ldi	r31, 0x00	; 0
    2218:	80 81       	ld	r24, Z
    221a:	80 68       	ori	r24, 0x80	; 128
    221c:	8c 93       	st	X, r24

	/* Wait until the interrupt flag is raised again and previous operation is complete */
	while ((GET_BIT(TWCR, TWCR_TWINT)) == 0);
    221e:	e6 e5       	ldi	r30, 0x56	; 86
    2220:	f0 e0       	ldi	r31, 0x00	; 0
    2222:	80 81       	ld	r24, Z
    2224:	88 23       	and	r24, r24
    2226:	dc f7       	brge	.-10     	; 0x221e <TWI_SendSlaveAddressWithWrite+0x42>

	/* Check for the operation  */
	if ((TWSR & 0xF8) != SLAVE_ADD_AND_WR_ACK)
    2228:	e1 e2       	ldi	r30, 0x21	; 33
    222a:	f0 e0       	ldi	r31, 0x00	; 0
    222c:	80 81       	ld	r24, Z
    222e:	88 2f       	mov	r24, r24
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	88 7f       	andi	r24, 0xF8	; 248
    2234:	90 70       	andi	r25, 0x00	; 0
    2236:	88 31       	cpi	r24, 0x18	; 24
    2238:	91 05       	cpc	r25, r1
    223a:	11 f0       	breq	.+4      	; 0x2240 <TWI_SendSlaveAddressWithWrite+0x64>
	{
		Local_ErrStatus = SlaveAddressWithWriteErr;
    223c:	83 e0       	ldi	r24, 0x03	; 3
    223e:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/* Do nothing */
	}

	return Local_ErrStatus;
    2240:	89 81       	ldd	r24, Y+1	; 0x01
}
    2242:	0f 90       	pop	r0
    2244:	0f 90       	pop	r0
    2246:	cf 91       	pop	r28
    2248:	df 91       	pop	r29
    224a:	08 95       	ret

0000224c <TWI_SendSlaveAddressWithRead>:

/* A function to send slave address with read */
TWI_ErrStatus TWI_SendSlaveAddressWithRead (u8 Copy_u8SlaveAddress)
{
    224c:	df 93       	push	r29
    224e:	cf 93       	push	r28
    2250:	00 d0       	rcall	.+0      	; 0x2252 <TWI_SendSlaveAddressWithRead+0x6>
    2252:	cd b7       	in	r28, 0x3d	; 61
    2254:	de b7       	in	r29, 0x3e	; 62
    2256:	8a 83       	std	Y+2, r24	; 0x02
	/* Variable for Error Status */
	TWI_ErrStatus Local_ErrStatus = NoError;
    2258:	19 82       	std	Y+1, r1	; 0x01

	/* Set the slave address in the 7 MSB in the data register */
	TWDR = Copy_u8SlaveAddress << 1;
    225a:	e3 e2       	ldi	r30, 0x23	; 35
    225c:	f0 e0       	ldi	r31, 0x00	; 0
    225e:	8a 81       	ldd	r24, Y+2	; 0x02
    2260:	88 0f       	add	r24, r24
    2262:	80 83       	st	Z, r24

	/* Select Read */
	SET_BIT(TWDR, TWDR_TWD0);
    2264:	a3 e2       	ldi	r26, 0x23	; 35
    2266:	b0 e0       	ldi	r27, 0x00	; 0
    2268:	e3 e2       	ldi	r30, 0x23	; 35
    226a:	f0 e0       	ldi	r31, 0x00	; 0
    226c:	80 81       	ld	r24, Z
    226e:	81 60       	ori	r24, 0x01	; 1
    2270:	8c 93       	st	X, r24

	/* Clear Start Condition bit */
	CLEAR_BIT(TWCR, TWCR_TWSTA);
    2272:	a6 e5       	ldi	r26, 0x56	; 86
    2274:	b0 e0       	ldi	r27, 0x00	; 0
    2276:	e6 e5       	ldi	r30, 0x56	; 86
    2278:	f0 e0       	ldi	r31, 0x00	; 0
    227a:	80 81       	ld	r24, Z
    227c:	8f 7d       	andi	r24, 0xDF	; 223
    227e:	8c 93       	st	X, r24

	/* Clear the interrupt flag to start previous operation */
	SET_BIT(TWCR, TWCR_TWINT);
    2280:	a6 e5       	ldi	r26, 0x56	; 86
    2282:	b0 e0       	ldi	r27, 0x00	; 0
    2284:	e6 e5       	ldi	r30, 0x56	; 86
    2286:	f0 e0       	ldi	r31, 0x00	; 0
    2288:	80 81       	ld	r24, Z
    228a:	80 68       	ori	r24, 0x80	; 128
    228c:	8c 93       	st	X, r24

	/* Wait until the interrupt flag is raised again and previous operation is complete */
	while ((GET_BIT(TWCR, TWCR_TWINT)) == 0);
    228e:	e6 e5       	ldi	r30, 0x56	; 86
    2290:	f0 e0       	ldi	r31, 0x00	; 0
    2292:	80 81       	ld	r24, Z
    2294:	88 23       	and	r24, r24
    2296:	dc f7       	brge	.-10     	; 0x228e <TWI_SendSlaveAddressWithRead+0x42>

	/* Check for the operation  */
	if ((TWSR & 0xF8) != SLAVE_ADD_AND_RD_ACK)
    2298:	e1 e2       	ldi	r30, 0x21	; 33
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	80 81       	ld	r24, Z
    229e:	88 2f       	mov	r24, r24
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	88 7f       	andi	r24, 0xF8	; 248
    22a4:	90 70       	andi	r25, 0x00	; 0
    22a6:	80 34       	cpi	r24, 0x40	; 64
    22a8:	91 05       	cpc	r25, r1
    22aa:	11 f0       	breq	.+4      	; 0x22b0 <TWI_SendSlaveAddressWithRead+0x64>
	{
		Local_ErrStatus = SlaveAddressWithReadErr;
    22ac:	84 e0       	ldi	r24, 0x04	; 4
    22ae:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/* Do nothing */
	}

	return Local_ErrStatus;
    22b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    22b2:	0f 90       	pop	r0
    22b4:	0f 90       	pop	r0
    22b6:	cf 91       	pop	r28
    22b8:	df 91       	pop	r29
    22ba:	08 95       	ret

000022bc <TWI_MasterWriteDataByte>:

/* A function to write data byte */
TWI_ErrStatus TWI_MasterWriteDataByte (u8 Copy_u8DataByte)
{
    22bc:	df 93       	push	r29
    22be:	cf 93       	push	r28
    22c0:	00 d0       	rcall	.+0      	; 0x22c2 <TWI_MasterWriteDataByte+0x6>
    22c2:	cd b7       	in	r28, 0x3d	; 61
    22c4:	de b7       	in	r29, 0x3e	; 62
    22c6:	8a 83       	std	Y+2, r24	; 0x02
	/* Variable for Error Status */
	TWI_ErrStatus Local_ErrStatus = NoError;
    22c8:	19 82       	std	Y+1, r1	; 0x01

	/* Write the data Byte */
	TWDR = Copy_u8DataByte;
    22ca:	e3 e2       	ldi	r30, 0x23	; 35
    22cc:	f0 e0       	ldi	r31, 0x00	; 0
    22ce:	8a 81       	ldd	r24, Y+2	; 0x02
    22d0:	80 83       	st	Z, r24

	/* Clear the interrupt flag to start previous operation */
	SET_BIT(TWCR, TWCR_TWINT);
    22d2:	a6 e5       	ldi	r26, 0x56	; 86
    22d4:	b0 e0       	ldi	r27, 0x00	; 0
    22d6:	e6 e5       	ldi	r30, 0x56	; 86
    22d8:	f0 e0       	ldi	r31, 0x00	; 0
    22da:	80 81       	ld	r24, Z
    22dc:	80 68       	ori	r24, 0x80	; 128
    22de:	8c 93       	st	X, r24

	/* Wait until the interrupt flag is raised again and previous operation is complete */
	while ((GET_BIT(TWCR, TWCR_TWINT)) == 0);
    22e0:	e6 e5       	ldi	r30, 0x56	; 86
    22e2:	f0 e0       	ldi	r31, 0x00	; 0
    22e4:	80 81       	ld	r24, Z
    22e6:	88 23       	and	r24, r24
    22e8:	dc f7       	brge	.-10     	; 0x22e0 <TWI_MasterWriteDataByte+0x24>

	/* Check for the operation  */
	if ((TWSR & 0xF8) != MSTR_WR_BYTE_ACK)
    22ea:	e1 e2       	ldi	r30, 0x21	; 33
    22ec:	f0 e0       	ldi	r31, 0x00	; 0
    22ee:	80 81       	ld	r24, Z
    22f0:	88 2f       	mov	r24, r24
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	88 7f       	andi	r24, 0xF8	; 248
    22f6:	90 70       	andi	r25, 0x00	; 0
    22f8:	88 32       	cpi	r24, 0x28	; 40
    22fa:	91 05       	cpc	r25, r1
    22fc:	11 f0       	breq	.+4      	; 0x2302 <TWI_MasterWriteDataByte+0x46>
	{
		Local_ErrStatus = MasterWriteByteErr;
    22fe:	85 e0       	ldi	r24, 0x05	; 5
    2300:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/* Do nothing */
	}

	return Local_ErrStatus;
    2302:	89 81       	ldd	r24, Y+1	; 0x01
}
    2304:	0f 90       	pop	r0
    2306:	0f 90       	pop	r0
    2308:	cf 91       	pop	r28
    230a:	df 91       	pop	r29
    230c:	08 95       	ret

0000230e <TWI_MasterReadDataByte>:

/* A function to read data byte */
TWI_ErrStatus TWI_MasterReadDataByte (u8 *Copy_pu8DataByte)
{
    230e:	df 93       	push	r29
    2310:	cf 93       	push	r28
    2312:	00 d0       	rcall	.+0      	; 0x2314 <TWI_MasterReadDataByte+0x6>
    2314:	0f 92       	push	r0
    2316:	cd b7       	in	r28, 0x3d	; 61
    2318:	de b7       	in	r29, 0x3e	; 62
    231a:	9b 83       	std	Y+3, r25	; 0x03
    231c:	8a 83       	std	Y+2, r24	; 0x02
	/* Variable for Error Status */
	TWI_ErrStatus Local_ErrStatus = NoError;
    231e:	19 82       	std	Y+1, r1	; 0x01

	/* Enable Master generating acknowledge bit after receiving the data */
	CLEAR_BIT(TWCR, TWCR_TWEA);
    2320:	a6 e5       	ldi	r26, 0x56	; 86
    2322:	b0 e0       	ldi	r27, 0x00	; 0
    2324:	e6 e5       	ldi	r30, 0x56	; 86
    2326:	f0 e0       	ldi	r31, 0x00	; 0
    2328:	80 81       	ld	r24, Z
    232a:	8f 7b       	andi	r24, 0xBF	; 191
    232c:	8c 93       	st	X, r24

	/* Clear the interrupt flag to start Slave Send data */
	SET_BIT(TWCR, TWCR_TWINT);
    232e:	a6 e5       	ldi	r26, 0x56	; 86
    2330:	b0 e0       	ldi	r27, 0x00	; 0
    2332:	e6 e5       	ldi	r30, 0x56	; 86
    2334:	f0 e0       	ldi	r31, 0x00	; 0
    2336:	80 81       	ld	r24, Z
    2338:	80 68       	ori	r24, 0x80	; 128
    233a:	8c 93       	st	X, r24

	/* Wait until the interrupt flag is raised again and previous operation is complete */
	while ((GET_BIT(TWCR, TWCR_TWINT)) == 0);
    233c:	e6 e5       	ldi	r30, 0x56	; 86
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	80 81       	ld	r24, Z
    2342:	88 23       	and	r24, r24
    2344:	dc f7       	brge	.-10     	; 0x233c <TWI_MasterReadDataByte+0x2e>

	/* Check for the operation  */
	if ((TWSR & 0xF8) != MSTR_RD_BYTE_WITH_NACK)
    2346:	e1 e2       	ldi	r30, 0x21	; 33
    2348:	f0 e0       	ldi	r31, 0x00	; 0
    234a:	80 81       	ld	r24, Z
    234c:	88 2f       	mov	r24, r24
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	88 7f       	andi	r24, 0xF8	; 248
    2352:	90 70       	andi	r25, 0x00	; 0
    2354:	88 35       	cpi	r24, 0x58	; 88
    2356:	91 05       	cpc	r25, r1
    2358:	19 f0       	breq	.+6      	; 0x2360 <TWI_MasterReadDataByte+0x52>
	{
		Local_ErrStatus = MasterReadByteErr;
    235a:	86 e0       	ldi	r24, 0x06	; 6
    235c:	89 83       	std	Y+1, r24	; 0x01
    235e:	06 c0       	rjmp	.+12     	; 0x236c <TWI_MasterReadDataByte+0x5e>
	}
	else
	{
		/* Read the received data */
		*Copy_pu8DataByte = TWDR;
    2360:	e3 e2       	ldi	r30, 0x23	; 35
    2362:	f0 e0       	ldi	r31, 0x00	; 0
    2364:	80 81       	ld	r24, Z
    2366:	ea 81       	ldd	r30, Y+2	; 0x02
    2368:	fb 81       	ldd	r31, Y+3	; 0x03
    236a:	80 83       	st	Z, r24
	}

	return Local_ErrStatus;
    236c:	89 81       	ldd	r24, Y+1	; 0x01
}
    236e:	0f 90       	pop	r0
    2370:	0f 90       	pop	r0
    2372:	0f 90       	pop	r0
    2374:	cf 91       	pop	r28
    2376:	df 91       	pop	r29
    2378:	08 95       	ret

0000237a <TWI_SendStopCondition>:

/* A function to send stop condition */
void TWI_SendStopCondition (void)
{
    237a:	df 93       	push	r29
    237c:	cf 93       	push	r28
    237e:	cd b7       	in	r28, 0x3d	; 61
    2380:	de b7       	in	r29, 0x3e	; 62
	/* Generate stop condition on the bus */
	SET_BIT(TWCR, TWCR_TWSTO);
    2382:	a6 e5       	ldi	r26, 0x56	; 86
    2384:	b0 e0       	ldi	r27, 0x00	; 0
    2386:	e6 e5       	ldi	r30, 0x56	; 86
    2388:	f0 e0       	ldi	r31, 0x00	; 0
    238a:	80 81       	ld	r24, Z
    238c:	80 61       	ori	r24, 0x10	; 16
    238e:	8c 93       	st	X, r24

	/* Clear the interrupt flag to start Slave Send data */
	SET_BIT(TWCR, TWCR_TWINT);
    2390:	a6 e5       	ldi	r26, 0x56	; 86
    2392:	b0 e0       	ldi	r27, 0x00	; 0
    2394:	e6 e5       	ldi	r30, 0x56	; 86
    2396:	f0 e0       	ldi	r31, 0x00	; 0
    2398:	80 81       	ld	r24, Z
    239a:	80 68       	ori	r24, 0x80	; 128
    239c:	8c 93       	st	X, r24
}
    239e:	cf 91       	pop	r28
    23a0:	df 91       	pop	r29
    23a2:	08 95       	ret

000023a4 <GLOB_INT_Enable>:
 * @param parameters_in None.
 * @param parameters_out None.
 * @return None.
 */
void GLOB_INT_Enable(void)
{
    23a4:	df 93       	push	r29
    23a6:	cf 93       	push	r28
    23a8:	cd b7       	in	r28, 0x3d	; 61
    23aa:	de b7       	in	r29, 0x3e	; 62
    /*Enable GIE = 1*/
    SET_BIT(SREG, I);
    23ac:	af e5       	ldi	r26, 0x5F	; 95
    23ae:	b0 e0       	ldi	r27, 0x00	; 0
    23b0:	ef e5       	ldi	r30, 0x5F	; 95
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	80 81       	ld	r24, Z
    23b6:	80 68       	ori	r24, 0x80	; 128
    23b8:	8c 93       	st	X, r24
}
    23ba:	cf 91       	pop	r28
    23bc:	df 91       	pop	r29
    23be:	08 95       	ret

000023c0 <GLOB_INT_Disable>:
 * @param parameters_in None.
 * @param parameters_out None.
 * @return None.
 */
void GLOB_INT_Disable(void)
{
    23c0:	df 93       	push	r29
    23c2:	cf 93       	push	r28
    23c4:	cd b7       	in	r28, 0x3d	; 61
    23c6:	de b7       	in	r29, 0x3e	; 62
    /*Disable GIE = 0*/
    CLEAR_BIT(SREG, I);
    23c8:	af e5       	ldi	r26, 0x5F	; 95
    23ca:	b0 e0       	ldi	r27, 0x00	; 0
    23cc:	ef e5       	ldi	r30, 0x5F	; 95
    23ce:	f0 e0       	ldi	r31, 0x00	; 0
    23d0:	80 81       	ld	r24, Z
    23d2:	8f 77       	andi	r24, 0x7F	; 127
    23d4:	8c 93       	st	X, r24
}
    23d6:	cf 91       	pop	r28
    23d8:	df 91       	pop	r29
    23da:	08 95       	ret

000023dc <EXT_INT_Enable>:
 *   - EXT_INT_2: Enable External Interrupt 2.
 * @param parameters_out None.
 * @return None.
 */
void EXT_INT_Enable(EXT_INT_Sources source)
{
    23dc:	df 93       	push	r29
    23de:	cf 93       	push	r28
    23e0:	00 d0       	rcall	.+0      	; 0x23e2 <EXT_INT_Enable+0x6>
    23e2:	0f 92       	push	r0
    23e4:	cd b7       	in	r28, 0x3d	; 61
    23e6:	de b7       	in	r29, 0x3e	; 62
    23e8:	89 83       	std	Y+1, r24	; 0x01
    switch(source)
    23ea:	89 81       	ldd	r24, Y+1	; 0x01
    23ec:	28 2f       	mov	r18, r24
    23ee:	30 e0       	ldi	r19, 0x00	; 0
    23f0:	3b 83       	std	Y+3, r19	; 0x03
    23f2:	2a 83       	std	Y+2, r18	; 0x02
    23f4:	8a 81       	ldd	r24, Y+2	; 0x02
    23f6:	9b 81       	ldd	r25, Y+3	; 0x03
    23f8:	81 30       	cpi	r24, 0x01	; 1
    23fa:	91 05       	cpc	r25, r1
    23fc:	89 f0       	breq	.+34     	; 0x2420 <EXT_INT_Enable+0x44>
    23fe:	2a 81       	ldd	r18, Y+2	; 0x02
    2400:	3b 81       	ldd	r19, Y+3	; 0x03
    2402:	22 30       	cpi	r18, 0x02	; 2
    2404:	31 05       	cpc	r19, r1
    2406:	a1 f0       	breq	.+40     	; 0x2430 <EXT_INT_Enable+0x54>
    2408:	8a 81       	ldd	r24, Y+2	; 0x02
    240a:	9b 81       	ldd	r25, Y+3	; 0x03
    240c:	00 97       	sbiw	r24, 0x00	; 0
    240e:	b9 f4       	brne	.+46     	; 0x243e <EXT_INT_Enable+0x62>
    {
        case EXT_INT_0:
            SET_BIT(GICR, INT0_En_Bit);
    2410:	ab e5       	ldi	r26, 0x5B	; 91
    2412:	b0 e0       	ldi	r27, 0x00	; 0
    2414:	eb e5       	ldi	r30, 0x5B	; 91
    2416:	f0 e0       	ldi	r31, 0x00	; 0
    2418:	80 81       	ld	r24, Z
    241a:	80 64       	ori	r24, 0x40	; 64
    241c:	8c 93       	st	X, r24
    241e:	0f c0       	rjmp	.+30     	; 0x243e <EXT_INT_Enable+0x62>
            break;

        case EXT_INT_1:
            SET_BIT(GICR, INT1_En_Bit);
    2420:	ab e5       	ldi	r26, 0x5B	; 91
    2422:	b0 e0       	ldi	r27, 0x00	; 0
    2424:	eb e5       	ldi	r30, 0x5B	; 91
    2426:	f0 e0       	ldi	r31, 0x00	; 0
    2428:	80 81       	ld	r24, Z
    242a:	80 68       	ori	r24, 0x80	; 128
    242c:	8c 93       	st	X, r24
    242e:	07 c0       	rjmp	.+14     	; 0x243e <EXT_INT_Enable+0x62>
            break;

        case EXT_INT_2:
            SET_BIT(GICR, INT2_En_Bit);
    2430:	ab e5       	ldi	r26, 0x5B	; 91
    2432:	b0 e0       	ldi	r27, 0x00	; 0
    2434:	eb e5       	ldi	r30, 0x5B	; 91
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	80 81       	ld	r24, Z
    243a:	80 62       	ori	r24, 0x20	; 32
    243c:	8c 93       	st	X, r24

        default:
            break;
            /*error handling*/
    }
}
    243e:	0f 90       	pop	r0
    2440:	0f 90       	pop	r0
    2442:	0f 90       	pop	r0
    2444:	cf 91       	pop	r28
    2446:	df 91       	pop	r29
    2448:	08 95       	ret

0000244a <EXT_INT_Disable>:
 *   - EXT_INT_2: Disable External Interrupt 2.
 * @param parameters_out None.
 * @return None.
 */
void EXT_INT_Disable(EXT_INT_Sources source)
{
    244a:	df 93       	push	r29
    244c:	cf 93       	push	r28
    244e:	00 d0       	rcall	.+0      	; 0x2450 <EXT_INT_Disable+0x6>
    2450:	0f 92       	push	r0
    2452:	cd b7       	in	r28, 0x3d	; 61
    2454:	de b7       	in	r29, 0x3e	; 62
    2456:	89 83       	std	Y+1, r24	; 0x01
    switch(source)
    2458:	89 81       	ldd	r24, Y+1	; 0x01
    245a:	28 2f       	mov	r18, r24
    245c:	30 e0       	ldi	r19, 0x00	; 0
    245e:	3b 83       	std	Y+3, r19	; 0x03
    2460:	2a 83       	std	Y+2, r18	; 0x02
    2462:	8a 81       	ldd	r24, Y+2	; 0x02
    2464:	9b 81       	ldd	r25, Y+3	; 0x03
    2466:	81 30       	cpi	r24, 0x01	; 1
    2468:	91 05       	cpc	r25, r1
    246a:	89 f0       	breq	.+34     	; 0x248e <EXT_INT_Disable+0x44>
    246c:	2a 81       	ldd	r18, Y+2	; 0x02
    246e:	3b 81       	ldd	r19, Y+3	; 0x03
    2470:	22 30       	cpi	r18, 0x02	; 2
    2472:	31 05       	cpc	r19, r1
    2474:	a1 f0       	breq	.+40     	; 0x249e <EXT_INT_Disable+0x54>
    2476:	8a 81       	ldd	r24, Y+2	; 0x02
    2478:	9b 81       	ldd	r25, Y+3	; 0x03
    247a:	00 97       	sbiw	r24, 0x00	; 0
    247c:	b9 f4       	brne	.+46     	; 0x24ac <EXT_INT_Disable+0x62>
    {
        case EXT_INT_0:
            CLEAR_BIT(GICR, INT0_En_Bit);
    247e:	ab e5       	ldi	r26, 0x5B	; 91
    2480:	b0 e0       	ldi	r27, 0x00	; 0
    2482:	eb e5       	ldi	r30, 0x5B	; 91
    2484:	f0 e0       	ldi	r31, 0x00	; 0
    2486:	80 81       	ld	r24, Z
    2488:	8f 7b       	andi	r24, 0xBF	; 191
    248a:	8c 93       	st	X, r24
    248c:	0f c0       	rjmp	.+30     	; 0x24ac <EXT_INT_Disable+0x62>
            break;

        case EXT_INT_1:
            CLEAR_BIT(GICR, INT1_En_Bit);
    248e:	ab e5       	ldi	r26, 0x5B	; 91
    2490:	b0 e0       	ldi	r27, 0x00	; 0
    2492:	eb e5       	ldi	r30, 0x5B	; 91
    2494:	f0 e0       	ldi	r31, 0x00	; 0
    2496:	80 81       	ld	r24, Z
    2498:	8f 77       	andi	r24, 0x7F	; 127
    249a:	8c 93       	st	X, r24
    249c:	07 c0       	rjmp	.+14     	; 0x24ac <EXT_INT_Disable+0x62>
            break;

        case EXT_INT_2:
            CLEAR_BIT(GICR, INT2_En_Bit);
    249e:	ab e5       	ldi	r26, 0x5B	; 91
    24a0:	b0 e0       	ldi	r27, 0x00	; 0
    24a2:	eb e5       	ldi	r30, 0x5B	; 91
    24a4:	f0 e0       	ldi	r31, 0x00	; 0
    24a6:	80 81       	ld	r24, Z
    24a8:	8f 7d       	andi	r24, 0xDF	; 223
    24aa:	8c 93       	st	X, r24

        default:
            break;
            /*error handling*/
    }
}
    24ac:	0f 90       	pop	r0
    24ae:	0f 90       	pop	r0
    24b0:	0f 90       	pop	r0
    24b2:	cf 91       	pop	r28
    24b4:	df 91       	pop	r29
    24b6:	08 95       	ret

000024b8 <EXT_INT_setTriggerType>:
 *   - trigger: The type of edge or level that triggers the interrupt.
 * @param parameters_out None.
 * @return None.
 */
void EXT_INT_setTriggerType(EXT_INT_Sources source, EXT_INT_TriggerTypes trigger)
{
    24b8:	df 93       	push	r29
    24ba:	cf 93       	push	r28
    24bc:	cd b7       	in	r28, 0x3d	; 61
    24be:	de b7       	in	r29, 0x3e	; 62
    24c0:	2a 97       	sbiw	r28, 0x0a	; 10
    24c2:	0f b6       	in	r0, 0x3f	; 63
    24c4:	f8 94       	cli
    24c6:	de bf       	out	0x3e, r29	; 62
    24c8:	0f be       	out	0x3f, r0	; 63
    24ca:	cd bf       	out	0x3d, r28	; 61
    24cc:	89 83       	std	Y+1, r24	; 0x01
    24ce:	6a 83       	std	Y+2, r22	; 0x02
    switch(source)
    24d0:	89 81       	ldd	r24, Y+1	; 0x01
    24d2:	28 2f       	mov	r18, r24
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	3a 87       	std	Y+10, r19	; 0x0a
    24d8:	29 87       	std	Y+9, r18	; 0x09
    24da:	89 85       	ldd	r24, Y+9	; 0x09
    24dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    24de:	81 30       	cpi	r24, 0x01	; 1
    24e0:	91 05       	cpc	r25, r1
    24e2:	09 f4       	brne	.+2      	; 0x24e6 <EXT_INT_setTriggerType+0x2e>
    24e4:	66 c0       	rjmp	.+204    	; 0x25b2 <EXT_INT_setTriggerType+0xfa>
    24e6:	29 85       	ldd	r18, Y+9	; 0x09
    24e8:	3a 85       	ldd	r19, Y+10	; 0x0a
    24ea:	22 30       	cpi	r18, 0x02	; 2
    24ec:	31 05       	cpc	r19, r1
    24ee:	09 f4       	brne	.+2      	; 0x24f2 <EXT_INT_setTriggerType+0x3a>
    24f0:	bb c0       	rjmp	.+374    	; 0x2668 <EXT_INT_setTriggerType+0x1b0>
    24f2:	89 85       	ldd	r24, Y+9	; 0x09
    24f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    24f6:	00 97       	sbiw	r24, 0x00	; 0
    24f8:	09 f0       	breq	.+2      	; 0x24fc <EXT_INT_setTriggerType+0x44>
    24fa:	d5 c0       	rjmp	.+426    	; 0x26a6 <EXT_INT_setTriggerType+0x1ee>
    {
        case EXT_INT_0:
            switch(trigger)
    24fc:	8a 81       	ldd	r24, Y+2	; 0x02
    24fe:	28 2f       	mov	r18, r24
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	38 87       	std	Y+8, r19	; 0x08
    2504:	2f 83       	std	Y+7, r18	; 0x07
    2506:	8f 81       	ldd	r24, Y+7	; 0x07
    2508:	98 85       	ldd	r25, Y+8	; 0x08
    250a:	81 30       	cpi	r24, 0x01	; 1
    250c:	91 05       	cpc	r25, r1
    250e:	21 f1       	breq	.+72     	; 0x2558 <EXT_INT_setTriggerType+0xa0>
    2510:	2f 81       	ldd	r18, Y+7	; 0x07
    2512:	38 85       	ldd	r19, Y+8	; 0x08
    2514:	22 30       	cpi	r18, 0x02	; 2
    2516:	31 05       	cpc	r19, r1
    2518:	2c f4       	brge	.+10     	; 0x2524 <EXT_INT_setTriggerType+0x6c>
    251a:	8f 81       	ldd	r24, Y+7	; 0x07
    251c:	98 85       	ldd	r25, Y+8	; 0x08
    251e:	00 97       	sbiw	r24, 0x00	; 0
    2520:	61 f0       	breq	.+24     	; 0x253a <EXT_INT_setTriggerType+0x82>
    2522:	c1 c0       	rjmp	.+386    	; 0x26a6 <EXT_INT_setTriggerType+0x1ee>
    2524:	2f 81       	ldd	r18, Y+7	; 0x07
    2526:	38 85       	ldd	r19, Y+8	; 0x08
    2528:	22 30       	cpi	r18, 0x02	; 2
    252a:	31 05       	cpc	r19, r1
    252c:	21 f1       	breq	.+72     	; 0x2576 <EXT_INT_setTriggerType+0xbe>
    252e:	8f 81       	ldd	r24, Y+7	; 0x07
    2530:	98 85       	ldd	r25, Y+8	; 0x08
    2532:	83 30       	cpi	r24, 0x03	; 3
    2534:	91 05       	cpc	r25, r1
    2536:	71 f1       	breq	.+92     	; 0x2594 <EXT_INT_setTriggerType+0xdc>
    2538:	b6 c0       	rjmp	.+364    	; 0x26a6 <EXT_INT_setTriggerType+0x1ee>
            {
                case LOW_LEVEL:
                    CLEAR_BIT(MCUCR, ISC00);
    253a:	a5 e5       	ldi	r26, 0x55	; 85
    253c:	b0 e0       	ldi	r27, 0x00	; 0
    253e:	e5 e5       	ldi	r30, 0x55	; 85
    2540:	f0 e0       	ldi	r31, 0x00	; 0
    2542:	80 81       	ld	r24, Z
    2544:	8e 7f       	andi	r24, 0xFE	; 254
    2546:	8c 93       	st	X, r24
                    CLEAR_BIT(MCUCR, ISC01);
    2548:	a5 e5       	ldi	r26, 0x55	; 85
    254a:	b0 e0       	ldi	r27, 0x00	; 0
    254c:	e5 e5       	ldi	r30, 0x55	; 85
    254e:	f0 e0       	ldi	r31, 0x00	; 0
    2550:	80 81       	ld	r24, Z
    2552:	8d 7f       	andi	r24, 0xFD	; 253
    2554:	8c 93       	st	X, r24
    2556:	a7 c0       	rjmp	.+334    	; 0x26a6 <EXT_INT_setTriggerType+0x1ee>
                    break;

                case ANY_LOGICAL_CHANGE:
                    SET_BIT(MCUCR, ISC00);
    2558:	a5 e5       	ldi	r26, 0x55	; 85
    255a:	b0 e0       	ldi	r27, 0x00	; 0
    255c:	e5 e5       	ldi	r30, 0x55	; 85
    255e:	f0 e0       	ldi	r31, 0x00	; 0
    2560:	80 81       	ld	r24, Z
    2562:	81 60       	ori	r24, 0x01	; 1
    2564:	8c 93       	st	X, r24
                    CLEAR_BIT(MCUCR, ISC01);
    2566:	a5 e5       	ldi	r26, 0x55	; 85
    2568:	b0 e0       	ldi	r27, 0x00	; 0
    256a:	e5 e5       	ldi	r30, 0x55	; 85
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	80 81       	ld	r24, Z
    2570:	8d 7f       	andi	r24, 0xFD	; 253
    2572:	8c 93       	st	X, r24
    2574:	98 c0       	rjmp	.+304    	; 0x26a6 <EXT_INT_setTriggerType+0x1ee>
                    break;

                case FALLING:
                    CLEAR_BIT(MCUCR, ISC00);
    2576:	a5 e5       	ldi	r26, 0x55	; 85
    2578:	b0 e0       	ldi	r27, 0x00	; 0
    257a:	e5 e5       	ldi	r30, 0x55	; 85
    257c:	f0 e0       	ldi	r31, 0x00	; 0
    257e:	80 81       	ld	r24, Z
    2580:	8e 7f       	andi	r24, 0xFE	; 254
    2582:	8c 93       	st	X, r24
                    SET_BIT(MCUCR, ISC01);
    2584:	a5 e5       	ldi	r26, 0x55	; 85
    2586:	b0 e0       	ldi	r27, 0x00	; 0
    2588:	e5 e5       	ldi	r30, 0x55	; 85
    258a:	f0 e0       	ldi	r31, 0x00	; 0
    258c:	80 81       	ld	r24, Z
    258e:	82 60       	ori	r24, 0x02	; 2
    2590:	8c 93       	st	X, r24
    2592:	89 c0       	rjmp	.+274    	; 0x26a6 <EXT_INT_setTriggerType+0x1ee>
                    break;

                case RISING:
                    SET_BIT(MCUCR, ISC00);
    2594:	a5 e5       	ldi	r26, 0x55	; 85
    2596:	b0 e0       	ldi	r27, 0x00	; 0
    2598:	e5 e5       	ldi	r30, 0x55	; 85
    259a:	f0 e0       	ldi	r31, 0x00	; 0
    259c:	80 81       	ld	r24, Z
    259e:	81 60       	ori	r24, 0x01	; 1
    25a0:	8c 93       	st	X, r24
                    SET_BIT(MCUCR, ISC01);
    25a2:	a5 e5       	ldi	r26, 0x55	; 85
    25a4:	b0 e0       	ldi	r27, 0x00	; 0
    25a6:	e5 e5       	ldi	r30, 0x55	; 85
    25a8:	f0 e0       	ldi	r31, 0x00	; 0
    25aa:	80 81       	ld	r24, Z
    25ac:	82 60       	ori	r24, 0x02	; 2
    25ae:	8c 93       	st	X, r24
    25b0:	7a c0       	rjmp	.+244    	; 0x26a6 <EXT_INT_setTriggerType+0x1ee>
                    /*error handling*/
            }
            break;

        case EXT_INT_1:
            switch(trigger)
    25b2:	8a 81       	ldd	r24, Y+2	; 0x02
    25b4:	28 2f       	mov	r18, r24
    25b6:	30 e0       	ldi	r19, 0x00	; 0
    25b8:	3e 83       	std	Y+6, r19	; 0x06
    25ba:	2d 83       	std	Y+5, r18	; 0x05
    25bc:	8d 81       	ldd	r24, Y+5	; 0x05
    25be:	9e 81       	ldd	r25, Y+6	; 0x06
    25c0:	81 30       	cpi	r24, 0x01	; 1
    25c2:	91 05       	cpc	r25, r1
    25c4:	21 f1       	breq	.+72     	; 0x260e <EXT_INT_setTriggerType+0x156>
    25c6:	2d 81       	ldd	r18, Y+5	; 0x05
    25c8:	3e 81       	ldd	r19, Y+6	; 0x06
    25ca:	22 30       	cpi	r18, 0x02	; 2
    25cc:	31 05       	cpc	r19, r1
    25ce:	2c f4       	brge	.+10     	; 0x25da <EXT_INT_setTriggerType+0x122>
    25d0:	8d 81       	ldd	r24, Y+5	; 0x05
    25d2:	9e 81       	ldd	r25, Y+6	; 0x06
    25d4:	00 97       	sbiw	r24, 0x00	; 0
    25d6:	61 f0       	breq	.+24     	; 0x25f0 <EXT_INT_setTriggerType+0x138>
    25d8:	66 c0       	rjmp	.+204    	; 0x26a6 <EXT_INT_setTriggerType+0x1ee>
    25da:	2d 81       	ldd	r18, Y+5	; 0x05
    25dc:	3e 81       	ldd	r19, Y+6	; 0x06
    25de:	22 30       	cpi	r18, 0x02	; 2
    25e0:	31 05       	cpc	r19, r1
    25e2:	21 f1       	breq	.+72     	; 0x262c <EXT_INT_setTriggerType+0x174>
    25e4:	8d 81       	ldd	r24, Y+5	; 0x05
    25e6:	9e 81       	ldd	r25, Y+6	; 0x06
    25e8:	83 30       	cpi	r24, 0x03	; 3
    25ea:	91 05       	cpc	r25, r1
    25ec:	71 f1       	breq	.+92     	; 0x264a <EXT_INT_setTriggerType+0x192>
    25ee:	5b c0       	rjmp	.+182    	; 0x26a6 <EXT_INT_setTriggerType+0x1ee>
            {
                case LOW_LEVEL:
                    CLEAR_BIT(MCUCR, ISC10);
    25f0:	a5 e5       	ldi	r26, 0x55	; 85
    25f2:	b0 e0       	ldi	r27, 0x00	; 0
    25f4:	e5 e5       	ldi	r30, 0x55	; 85
    25f6:	f0 e0       	ldi	r31, 0x00	; 0
    25f8:	80 81       	ld	r24, Z
    25fa:	8b 7f       	andi	r24, 0xFB	; 251
    25fc:	8c 93       	st	X, r24
                    CLEAR_BIT(MCUCR, ISC11);
    25fe:	a5 e5       	ldi	r26, 0x55	; 85
    2600:	b0 e0       	ldi	r27, 0x00	; 0
    2602:	e5 e5       	ldi	r30, 0x55	; 85
    2604:	f0 e0       	ldi	r31, 0x00	; 0
    2606:	80 81       	ld	r24, Z
    2608:	87 7f       	andi	r24, 0xF7	; 247
    260a:	8c 93       	st	X, r24
    260c:	4c c0       	rjmp	.+152    	; 0x26a6 <EXT_INT_setTriggerType+0x1ee>
                    break;

                case ANY_LOGICAL_CHANGE:
                    SET_BIT(MCUCR, ISC10);
    260e:	a5 e5       	ldi	r26, 0x55	; 85
    2610:	b0 e0       	ldi	r27, 0x00	; 0
    2612:	e5 e5       	ldi	r30, 0x55	; 85
    2614:	f0 e0       	ldi	r31, 0x00	; 0
    2616:	80 81       	ld	r24, Z
    2618:	84 60       	ori	r24, 0x04	; 4
    261a:	8c 93       	st	X, r24
                    CLEAR_BIT(MCUCR, ISC11);
    261c:	a5 e5       	ldi	r26, 0x55	; 85
    261e:	b0 e0       	ldi	r27, 0x00	; 0
    2620:	e5 e5       	ldi	r30, 0x55	; 85
    2622:	f0 e0       	ldi	r31, 0x00	; 0
    2624:	80 81       	ld	r24, Z
    2626:	87 7f       	andi	r24, 0xF7	; 247
    2628:	8c 93       	st	X, r24
    262a:	3d c0       	rjmp	.+122    	; 0x26a6 <EXT_INT_setTriggerType+0x1ee>
                    break;

                case FALLING:
                    CLEAR_BIT(MCUCR, ISC10);
    262c:	a5 e5       	ldi	r26, 0x55	; 85
    262e:	b0 e0       	ldi	r27, 0x00	; 0
    2630:	e5 e5       	ldi	r30, 0x55	; 85
    2632:	f0 e0       	ldi	r31, 0x00	; 0
    2634:	80 81       	ld	r24, Z
    2636:	8b 7f       	andi	r24, 0xFB	; 251
    2638:	8c 93       	st	X, r24
                    SET_BIT(MCUCR, ISC11);
    263a:	a5 e5       	ldi	r26, 0x55	; 85
    263c:	b0 e0       	ldi	r27, 0x00	; 0
    263e:	e5 e5       	ldi	r30, 0x55	; 85
    2640:	f0 e0       	ldi	r31, 0x00	; 0
    2642:	80 81       	ld	r24, Z
    2644:	88 60       	ori	r24, 0x08	; 8
    2646:	8c 93       	st	X, r24
    2648:	2e c0       	rjmp	.+92     	; 0x26a6 <EXT_INT_setTriggerType+0x1ee>
                    break;

                case RISING:
                    SET_BIT(MCUCR, ISC10);
    264a:	a5 e5       	ldi	r26, 0x55	; 85
    264c:	b0 e0       	ldi	r27, 0x00	; 0
    264e:	e5 e5       	ldi	r30, 0x55	; 85
    2650:	f0 e0       	ldi	r31, 0x00	; 0
    2652:	80 81       	ld	r24, Z
    2654:	84 60       	ori	r24, 0x04	; 4
    2656:	8c 93       	st	X, r24
                    SET_BIT(MCUCR, ISC11);
    2658:	a5 e5       	ldi	r26, 0x55	; 85
    265a:	b0 e0       	ldi	r27, 0x00	; 0
    265c:	e5 e5       	ldi	r30, 0x55	; 85
    265e:	f0 e0       	ldi	r31, 0x00	; 0
    2660:	80 81       	ld	r24, Z
    2662:	88 60       	ori	r24, 0x08	; 8
    2664:	8c 93       	st	X, r24
    2666:	1f c0       	rjmp	.+62     	; 0x26a6 <EXT_INT_setTriggerType+0x1ee>
                    /*error handling*/
            }
            break;

        case EXT_INT_2:
            switch(trigger)
    2668:	8a 81       	ldd	r24, Y+2	; 0x02
    266a:	28 2f       	mov	r18, r24
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	3c 83       	std	Y+4, r19	; 0x04
    2670:	2b 83       	std	Y+3, r18	; 0x03
    2672:	8b 81       	ldd	r24, Y+3	; 0x03
    2674:	9c 81       	ldd	r25, Y+4	; 0x04
    2676:	82 30       	cpi	r24, 0x02	; 2
    2678:	91 05       	cpc	r25, r1
    267a:	31 f0       	breq	.+12     	; 0x2688 <EXT_INT_setTriggerType+0x1d0>
    267c:	2b 81       	ldd	r18, Y+3	; 0x03
    267e:	3c 81       	ldd	r19, Y+4	; 0x04
    2680:	23 30       	cpi	r18, 0x03	; 3
    2682:	31 05       	cpc	r19, r1
    2684:	49 f0       	breq	.+18     	; 0x2698 <EXT_INT_setTriggerType+0x1e0>
    2686:	0f c0       	rjmp	.+30     	; 0x26a6 <EXT_INT_setTriggerType+0x1ee>
            {
                case FALLING:
                    CLEAR_BIT(MCUCSR, ISC2);
    2688:	a4 e5       	ldi	r26, 0x54	; 84
    268a:	b0 e0       	ldi	r27, 0x00	; 0
    268c:	e4 e5       	ldi	r30, 0x54	; 84
    268e:	f0 e0       	ldi	r31, 0x00	; 0
    2690:	80 81       	ld	r24, Z
    2692:	8f 7b       	andi	r24, 0xBF	; 191
    2694:	8c 93       	st	X, r24
    2696:	07 c0       	rjmp	.+14     	; 0x26a6 <EXT_INT_setTriggerType+0x1ee>
                    break;

                case RISING:
                    SET_BIT(MCUCSR, ISC2);
    2698:	a4 e5       	ldi	r26, 0x54	; 84
    269a:	b0 e0       	ldi	r27, 0x00	; 0
    269c:	e4 e5       	ldi	r30, 0x54	; 84
    269e:	f0 e0       	ldi	r31, 0x00	; 0
    26a0:	80 81       	ld	r24, Z
    26a2:	80 64       	ori	r24, 0x40	; 64
    26a4:	8c 93       	st	X, r24

        default:
            break;
            /*error handling*/
    }
}
    26a6:	2a 96       	adiw	r28, 0x0a	; 10
    26a8:	0f b6       	in	r0, 0x3f	; 63
    26aa:	f8 94       	cli
    26ac:	de bf       	out	0x3e, r29	; 62
    26ae:	0f be       	out	0x3f, r0	; 63
    26b0:	cd bf       	out	0x3d, r28	; 61
    26b2:	cf 91       	pop	r28
    26b4:	df 91       	pop	r29
    26b6:	08 95       	ret

000026b8 <vSet_Pin_Direction>:
 *   - Direction: The direction to set (OUTPUT or INPUT).
 * @param parameters_out None.
 * @return None.
 */
void vSet_Pin_Direction(u8 PORT_ID, u8 PIN_ID, u8 Direction)
{
    26b8:	df 93       	push	r29
    26ba:	cf 93       	push	r28
    26bc:	cd b7       	in	r28, 0x3d	; 61
    26be:	de b7       	in	r29, 0x3e	; 62
    26c0:	29 97       	sbiw	r28, 0x09	; 9
    26c2:	0f b6       	in	r0, 0x3f	; 63
    26c4:	f8 94       	cli
    26c6:	de bf       	out	0x3e, r29	; 62
    26c8:	0f be       	out	0x3f, r0	; 63
    26ca:	cd bf       	out	0x3d, r28	; 61
    26cc:	89 83       	std	Y+1, r24	; 0x01
    26ce:	6a 83       	std	Y+2, r22	; 0x02
    26d0:	4b 83       	std	Y+3, r20	; 0x03
    switch(Direction)
    26d2:	8b 81       	ldd	r24, Y+3	; 0x03
    26d4:	28 2f       	mov	r18, r24
    26d6:	30 e0       	ldi	r19, 0x00	; 0
    26d8:	39 87       	std	Y+9, r19	; 0x09
    26da:	28 87       	std	Y+8, r18	; 0x08
    26dc:	88 85       	ldd	r24, Y+8	; 0x08
    26de:	99 85       	ldd	r25, Y+9	; 0x09
    26e0:	00 97       	sbiw	r24, 0x00	; 0
    26e2:	09 f4       	brne	.+2      	; 0x26e6 <vSet_Pin_Direction+0x2e>
    26e4:	75 c0       	rjmp	.+234    	; 0x27d0 <vSet_Pin_Direction+0x118>
    26e6:	28 85       	ldd	r18, Y+8	; 0x08
    26e8:	39 85       	ldd	r19, Y+9	; 0x09
    26ea:	21 30       	cpi	r18, 0x01	; 1
    26ec:	31 05       	cpc	r19, r1
    26ee:	09 f0       	breq	.+2      	; 0x26f2 <vSet_Pin_Direction+0x3a>
    26f0:	e2 c0       	rjmp	.+452    	; 0x28b6 <vSet_Pin_Direction+0x1fe>
    {
        case OUTPUT:
            switch(PORT_ID)
    26f2:	89 81       	ldd	r24, Y+1	; 0x01
    26f4:	28 2f       	mov	r18, r24
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	3f 83       	std	Y+7, r19	; 0x07
    26fa:	2e 83       	std	Y+6, r18	; 0x06
    26fc:	8e 81       	ldd	r24, Y+6	; 0x06
    26fe:	9f 81       	ldd	r25, Y+7	; 0x07
    2700:	81 30       	cpi	r24, 0x01	; 1
    2702:	91 05       	cpc	r25, r1
    2704:	49 f1       	breq	.+82     	; 0x2758 <vSet_Pin_Direction+0xa0>
    2706:	2e 81       	ldd	r18, Y+6	; 0x06
    2708:	3f 81       	ldd	r19, Y+7	; 0x07
    270a:	22 30       	cpi	r18, 0x02	; 2
    270c:	31 05       	cpc	r19, r1
    270e:	2c f4       	brge	.+10     	; 0x271a <vSet_Pin_Direction+0x62>
    2710:	8e 81       	ldd	r24, Y+6	; 0x06
    2712:	9f 81       	ldd	r25, Y+7	; 0x07
    2714:	00 97       	sbiw	r24, 0x00	; 0
    2716:	61 f0       	breq	.+24     	; 0x2730 <vSet_Pin_Direction+0x78>
    2718:	ce c0       	rjmp	.+412    	; 0x28b6 <vSet_Pin_Direction+0x1fe>
    271a:	2e 81       	ldd	r18, Y+6	; 0x06
    271c:	3f 81       	ldd	r19, Y+7	; 0x07
    271e:	22 30       	cpi	r18, 0x02	; 2
    2720:	31 05       	cpc	r19, r1
    2722:	71 f1       	breq	.+92     	; 0x2780 <vSet_Pin_Direction+0xc8>
    2724:	8e 81       	ldd	r24, Y+6	; 0x06
    2726:	9f 81       	ldd	r25, Y+7	; 0x07
    2728:	83 30       	cpi	r24, 0x03	; 3
    272a:	91 05       	cpc	r25, r1
    272c:	e9 f1       	breq	.+122    	; 0x27a8 <vSet_Pin_Direction+0xf0>
    272e:	c3 c0       	rjmp	.+390    	; 0x28b6 <vSet_Pin_Direction+0x1fe>
            {
                case PORT_A: SET_BIT(DDRA, PIN_ID); break;
    2730:	aa e3       	ldi	r26, 0x3A	; 58
    2732:	b0 e0       	ldi	r27, 0x00	; 0
    2734:	ea e3       	ldi	r30, 0x3A	; 58
    2736:	f0 e0       	ldi	r31, 0x00	; 0
    2738:	80 81       	ld	r24, Z
    273a:	48 2f       	mov	r20, r24
    273c:	8a 81       	ldd	r24, Y+2	; 0x02
    273e:	28 2f       	mov	r18, r24
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	81 e0       	ldi	r24, 0x01	; 1
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	02 2e       	mov	r0, r18
    2748:	02 c0       	rjmp	.+4      	; 0x274e <vSet_Pin_Direction+0x96>
    274a:	88 0f       	add	r24, r24
    274c:	99 1f       	adc	r25, r25
    274e:	0a 94       	dec	r0
    2750:	e2 f7       	brpl	.-8      	; 0x274a <vSet_Pin_Direction+0x92>
    2752:	84 2b       	or	r24, r20
    2754:	8c 93       	st	X, r24
    2756:	af c0       	rjmp	.+350    	; 0x28b6 <vSet_Pin_Direction+0x1fe>
                case PORT_B: SET_BIT(DDRB, PIN_ID); break;
    2758:	a7 e3       	ldi	r26, 0x37	; 55
    275a:	b0 e0       	ldi	r27, 0x00	; 0
    275c:	e7 e3       	ldi	r30, 0x37	; 55
    275e:	f0 e0       	ldi	r31, 0x00	; 0
    2760:	80 81       	ld	r24, Z
    2762:	48 2f       	mov	r20, r24
    2764:	8a 81       	ldd	r24, Y+2	; 0x02
    2766:	28 2f       	mov	r18, r24
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	81 e0       	ldi	r24, 0x01	; 1
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	02 2e       	mov	r0, r18
    2770:	02 c0       	rjmp	.+4      	; 0x2776 <vSet_Pin_Direction+0xbe>
    2772:	88 0f       	add	r24, r24
    2774:	99 1f       	adc	r25, r25
    2776:	0a 94       	dec	r0
    2778:	e2 f7       	brpl	.-8      	; 0x2772 <vSet_Pin_Direction+0xba>
    277a:	84 2b       	or	r24, r20
    277c:	8c 93       	st	X, r24
    277e:	9b c0       	rjmp	.+310    	; 0x28b6 <vSet_Pin_Direction+0x1fe>
                case PORT_C: SET_BIT(DDRC, PIN_ID); break;
    2780:	a4 e3       	ldi	r26, 0x34	; 52
    2782:	b0 e0       	ldi	r27, 0x00	; 0
    2784:	e4 e3       	ldi	r30, 0x34	; 52
    2786:	f0 e0       	ldi	r31, 0x00	; 0
    2788:	80 81       	ld	r24, Z
    278a:	48 2f       	mov	r20, r24
    278c:	8a 81       	ldd	r24, Y+2	; 0x02
    278e:	28 2f       	mov	r18, r24
    2790:	30 e0       	ldi	r19, 0x00	; 0
    2792:	81 e0       	ldi	r24, 0x01	; 1
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	02 2e       	mov	r0, r18
    2798:	02 c0       	rjmp	.+4      	; 0x279e <vSet_Pin_Direction+0xe6>
    279a:	88 0f       	add	r24, r24
    279c:	99 1f       	adc	r25, r25
    279e:	0a 94       	dec	r0
    27a0:	e2 f7       	brpl	.-8      	; 0x279a <vSet_Pin_Direction+0xe2>
    27a2:	84 2b       	or	r24, r20
    27a4:	8c 93       	st	X, r24
    27a6:	87 c0       	rjmp	.+270    	; 0x28b6 <vSet_Pin_Direction+0x1fe>
                case PORT_D: SET_BIT(DDRD, PIN_ID); break;
    27a8:	a1 e3       	ldi	r26, 0x31	; 49
    27aa:	b0 e0       	ldi	r27, 0x00	; 0
    27ac:	e1 e3       	ldi	r30, 0x31	; 49
    27ae:	f0 e0       	ldi	r31, 0x00	; 0
    27b0:	80 81       	ld	r24, Z
    27b2:	48 2f       	mov	r20, r24
    27b4:	8a 81       	ldd	r24, Y+2	; 0x02
    27b6:	28 2f       	mov	r18, r24
    27b8:	30 e0       	ldi	r19, 0x00	; 0
    27ba:	81 e0       	ldi	r24, 0x01	; 1
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	02 2e       	mov	r0, r18
    27c0:	02 c0       	rjmp	.+4      	; 0x27c6 <vSet_Pin_Direction+0x10e>
    27c2:	88 0f       	add	r24, r24
    27c4:	99 1f       	adc	r25, r25
    27c6:	0a 94       	dec	r0
    27c8:	e2 f7       	brpl	.-8      	; 0x27c2 <vSet_Pin_Direction+0x10a>
    27ca:	84 2b       	or	r24, r20
    27cc:	8c 93       	st	X, r24
    27ce:	73 c0       	rjmp	.+230    	; 0x28b6 <vSet_Pin_Direction+0x1fe>
            }
            break;

        case INPUT:
            switch(PORT_ID)
    27d0:	89 81       	ldd	r24, Y+1	; 0x01
    27d2:	28 2f       	mov	r18, r24
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	3d 83       	std	Y+5, r19	; 0x05
    27d8:	2c 83       	std	Y+4, r18	; 0x04
    27da:	8c 81       	ldd	r24, Y+4	; 0x04
    27dc:	9d 81       	ldd	r25, Y+5	; 0x05
    27de:	81 30       	cpi	r24, 0x01	; 1
    27e0:	91 05       	cpc	r25, r1
    27e2:	59 f1       	breq	.+86     	; 0x283a <vSet_Pin_Direction+0x182>
    27e4:	2c 81       	ldd	r18, Y+4	; 0x04
    27e6:	3d 81       	ldd	r19, Y+5	; 0x05
    27e8:	22 30       	cpi	r18, 0x02	; 2
    27ea:	31 05       	cpc	r19, r1
    27ec:	2c f4       	brge	.+10     	; 0x27f8 <vSet_Pin_Direction+0x140>
    27ee:	8c 81       	ldd	r24, Y+4	; 0x04
    27f0:	9d 81       	ldd	r25, Y+5	; 0x05
    27f2:	00 97       	sbiw	r24, 0x00	; 0
    27f4:	69 f0       	breq	.+26     	; 0x2810 <vSet_Pin_Direction+0x158>
    27f6:	5f c0       	rjmp	.+190    	; 0x28b6 <vSet_Pin_Direction+0x1fe>
    27f8:	2c 81       	ldd	r18, Y+4	; 0x04
    27fa:	3d 81       	ldd	r19, Y+5	; 0x05
    27fc:	22 30       	cpi	r18, 0x02	; 2
    27fe:	31 05       	cpc	r19, r1
    2800:	89 f1       	breq	.+98     	; 0x2864 <vSet_Pin_Direction+0x1ac>
    2802:	8c 81       	ldd	r24, Y+4	; 0x04
    2804:	9d 81       	ldd	r25, Y+5	; 0x05
    2806:	83 30       	cpi	r24, 0x03	; 3
    2808:	91 05       	cpc	r25, r1
    280a:	09 f4       	brne	.+2      	; 0x280e <vSet_Pin_Direction+0x156>
    280c:	40 c0       	rjmp	.+128    	; 0x288e <vSet_Pin_Direction+0x1d6>
    280e:	53 c0       	rjmp	.+166    	; 0x28b6 <vSet_Pin_Direction+0x1fe>
            {
                case PORT_A: CLEAR_BIT(DDRA, PIN_ID); break;
    2810:	aa e3       	ldi	r26, 0x3A	; 58
    2812:	b0 e0       	ldi	r27, 0x00	; 0
    2814:	ea e3       	ldi	r30, 0x3A	; 58
    2816:	f0 e0       	ldi	r31, 0x00	; 0
    2818:	80 81       	ld	r24, Z
    281a:	48 2f       	mov	r20, r24
    281c:	8a 81       	ldd	r24, Y+2	; 0x02
    281e:	28 2f       	mov	r18, r24
    2820:	30 e0       	ldi	r19, 0x00	; 0
    2822:	81 e0       	ldi	r24, 0x01	; 1
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	02 2e       	mov	r0, r18
    2828:	02 c0       	rjmp	.+4      	; 0x282e <vSet_Pin_Direction+0x176>
    282a:	88 0f       	add	r24, r24
    282c:	99 1f       	adc	r25, r25
    282e:	0a 94       	dec	r0
    2830:	e2 f7       	brpl	.-8      	; 0x282a <vSet_Pin_Direction+0x172>
    2832:	80 95       	com	r24
    2834:	84 23       	and	r24, r20
    2836:	8c 93       	st	X, r24
    2838:	3e c0       	rjmp	.+124    	; 0x28b6 <vSet_Pin_Direction+0x1fe>
                case PORT_B: CLEAR_BIT(DDRB, PIN_ID); break;
    283a:	a7 e3       	ldi	r26, 0x37	; 55
    283c:	b0 e0       	ldi	r27, 0x00	; 0
    283e:	e7 e3       	ldi	r30, 0x37	; 55
    2840:	f0 e0       	ldi	r31, 0x00	; 0
    2842:	80 81       	ld	r24, Z
    2844:	48 2f       	mov	r20, r24
    2846:	8a 81       	ldd	r24, Y+2	; 0x02
    2848:	28 2f       	mov	r18, r24
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	81 e0       	ldi	r24, 0x01	; 1
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	02 2e       	mov	r0, r18
    2852:	02 c0       	rjmp	.+4      	; 0x2858 <vSet_Pin_Direction+0x1a0>
    2854:	88 0f       	add	r24, r24
    2856:	99 1f       	adc	r25, r25
    2858:	0a 94       	dec	r0
    285a:	e2 f7       	brpl	.-8      	; 0x2854 <vSet_Pin_Direction+0x19c>
    285c:	80 95       	com	r24
    285e:	84 23       	and	r24, r20
    2860:	8c 93       	st	X, r24
    2862:	29 c0       	rjmp	.+82     	; 0x28b6 <vSet_Pin_Direction+0x1fe>
                case PORT_C: CLEAR_BIT(DDRC, PIN_ID); break;
    2864:	a4 e3       	ldi	r26, 0x34	; 52
    2866:	b0 e0       	ldi	r27, 0x00	; 0
    2868:	e4 e3       	ldi	r30, 0x34	; 52
    286a:	f0 e0       	ldi	r31, 0x00	; 0
    286c:	80 81       	ld	r24, Z
    286e:	48 2f       	mov	r20, r24
    2870:	8a 81       	ldd	r24, Y+2	; 0x02
    2872:	28 2f       	mov	r18, r24
    2874:	30 e0       	ldi	r19, 0x00	; 0
    2876:	81 e0       	ldi	r24, 0x01	; 1
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	02 2e       	mov	r0, r18
    287c:	02 c0       	rjmp	.+4      	; 0x2882 <vSet_Pin_Direction+0x1ca>
    287e:	88 0f       	add	r24, r24
    2880:	99 1f       	adc	r25, r25
    2882:	0a 94       	dec	r0
    2884:	e2 f7       	brpl	.-8      	; 0x287e <vSet_Pin_Direction+0x1c6>
    2886:	80 95       	com	r24
    2888:	84 23       	and	r24, r20
    288a:	8c 93       	st	X, r24
    288c:	14 c0       	rjmp	.+40     	; 0x28b6 <vSet_Pin_Direction+0x1fe>
                case PORT_D: CLEAR_BIT(DDRD, PIN_ID); break;
    288e:	a1 e3       	ldi	r26, 0x31	; 49
    2890:	b0 e0       	ldi	r27, 0x00	; 0
    2892:	e1 e3       	ldi	r30, 0x31	; 49
    2894:	f0 e0       	ldi	r31, 0x00	; 0
    2896:	80 81       	ld	r24, Z
    2898:	48 2f       	mov	r20, r24
    289a:	8a 81       	ldd	r24, Y+2	; 0x02
    289c:	28 2f       	mov	r18, r24
    289e:	30 e0       	ldi	r19, 0x00	; 0
    28a0:	81 e0       	ldi	r24, 0x01	; 1
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	02 2e       	mov	r0, r18
    28a6:	02 c0       	rjmp	.+4      	; 0x28ac <vSet_Pin_Direction+0x1f4>
    28a8:	88 0f       	add	r24, r24
    28aa:	99 1f       	adc	r25, r25
    28ac:	0a 94       	dec	r0
    28ae:	e2 f7       	brpl	.-8      	; 0x28a8 <vSet_Pin_Direction+0x1f0>
    28b0:	80 95       	com	r24
    28b2:	84 23       	and	r24, r20
    28b4:	8c 93       	st	X, r24
            }
            break;
    }
}
    28b6:	29 96       	adiw	r28, 0x09	; 9
    28b8:	0f b6       	in	r0, 0x3f	; 63
    28ba:	f8 94       	cli
    28bc:	de bf       	out	0x3e, r29	; 62
    28be:	0f be       	out	0x3f, r0	; 63
    28c0:	cd bf       	out	0x3d, r28	; 61
    28c2:	cf 91       	pop	r28
    28c4:	df 91       	pop	r29
    28c6:	08 95       	ret

000028c8 <vSet_Pin_OUTPUTvalue>:
 *   - Value: The value to set (HIGH or LOW).
 * @param parameters_out None.
 * @return None.
 */
void vSet_Pin_OUTPUTvalue(u8 PORT_ID, u8 PIN_ID, u8 Value)
{
    28c8:	df 93       	push	r29
    28ca:	cf 93       	push	r28
    28cc:	cd b7       	in	r28, 0x3d	; 61
    28ce:	de b7       	in	r29, 0x3e	; 62
    28d0:	29 97       	sbiw	r28, 0x09	; 9
    28d2:	0f b6       	in	r0, 0x3f	; 63
    28d4:	f8 94       	cli
    28d6:	de bf       	out	0x3e, r29	; 62
    28d8:	0f be       	out	0x3f, r0	; 63
    28da:	cd bf       	out	0x3d, r28	; 61
    28dc:	89 83       	std	Y+1, r24	; 0x01
    28de:	6a 83       	std	Y+2, r22	; 0x02
    28e0:	4b 83       	std	Y+3, r20	; 0x03
    switch(Value)
    28e2:	8b 81       	ldd	r24, Y+3	; 0x03
    28e4:	28 2f       	mov	r18, r24
    28e6:	30 e0       	ldi	r19, 0x00	; 0
    28e8:	39 87       	std	Y+9, r19	; 0x09
    28ea:	28 87       	std	Y+8, r18	; 0x08
    28ec:	88 85       	ldd	r24, Y+8	; 0x08
    28ee:	99 85       	ldd	r25, Y+9	; 0x09
    28f0:	00 97       	sbiw	r24, 0x00	; 0
    28f2:	09 f4       	brne	.+2      	; 0x28f6 <vSet_Pin_OUTPUTvalue+0x2e>
    28f4:	75 c0       	rjmp	.+234    	; 0x29e0 <vSet_Pin_OUTPUTvalue+0x118>
    28f6:	28 85       	ldd	r18, Y+8	; 0x08
    28f8:	39 85       	ldd	r19, Y+9	; 0x09
    28fa:	21 30       	cpi	r18, 0x01	; 1
    28fc:	31 05       	cpc	r19, r1
    28fe:	09 f0       	breq	.+2      	; 0x2902 <vSet_Pin_OUTPUTvalue+0x3a>
    2900:	e2 c0       	rjmp	.+452    	; 0x2ac6 <vSet_Pin_OUTPUTvalue+0x1fe>
    {
        case HIGH:
            switch(PORT_ID)
    2902:	89 81       	ldd	r24, Y+1	; 0x01
    2904:	28 2f       	mov	r18, r24
    2906:	30 e0       	ldi	r19, 0x00	; 0
    2908:	3f 83       	std	Y+7, r19	; 0x07
    290a:	2e 83       	std	Y+6, r18	; 0x06
    290c:	8e 81       	ldd	r24, Y+6	; 0x06
    290e:	9f 81       	ldd	r25, Y+7	; 0x07
    2910:	81 30       	cpi	r24, 0x01	; 1
    2912:	91 05       	cpc	r25, r1
    2914:	49 f1       	breq	.+82     	; 0x2968 <vSet_Pin_OUTPUTvalue+0xa0>
    2916:	2e 81       	ldd	r18, Y+6	; 0x06
    2918:	3f 81       	ldd	r19, Y+7	; 0x07
    291a:	22 30       	cpi	r18, 0x02	; 2
    291c:	31 05       	cpc	r19, r1
    291e:	2c f4       	brge	.+10     	; 0x292a <vSet_Pin_OUTPUTvalue+0x62>
    2920:	8e 81       	ldd	r24, Y+6	; 0x06
    2922:	9f 81       	ldd	r25, Y+7	; 0x07
    2924:	00 97       	sbiw	r24, 0x00	; 0
    2926:	61 f0       	breq	.+24     	; 0x2940 <vSet_Pin_OUTPUTvalue+0x78>
    2928:	ce c0       	rjmp	.+412    	; 0x2ac6 <vSet_Pin_OUTPUTvalue+0x1fe>
    292a:	2e 81       	ldd	r18, Y+6	; 0x06
    292c:	3f 81       	ldd	r19, Y+7	; 0x07
    292e:	22 30       	cpi	r18, 0x02	; 2
    2930:	31 05       	cpc	r19, r1
    2932:	71 f1       	breq	.+92     	; 0x2990 <vSet_Pin_OUTPUTvalue+0xc8>
    2934:	8e 81       	ldd	r24, Y+6	; 0x06
    2936:	9f 81       	ldd	r25, Y+7	; 0x07
    2938:	83 30       	cpi	r24, 0x03	; 3
    293a:	91 05       	cpc	r25, r1
    293c:	e9 f1       	breq	.+122    	; 0x29b8 <vSet_Pin_OUTPUTvalue+0xf0>
    293e:	c3 c0       	rjmp	.+390    	; 0x2ac6 <vSet_Pin_OUTPUTvalue+0x1fe>
            {
                case PORT_A: SET_BIT(PORTA, PIN_ID); break;
    2940:	ab e3       	ldi	r26, 0x3B	; 59
    2942:	b0 e0       	ldi	r27, 0x00	; 0
    2944:	eb e3       	ldi	r30, 0x3B	; 59
    2946:	f0 e0       	ldi	r31, 0x00	; 0
    2948:	80 81       	ld	r24, Z
    294a:	48 2f       	mov	r20, r24
    294c:	8a 81       	ldd	r24, Y+2	; 0x02
    294e:	28 2f       	mov	r18, r24
    2950:	30 e0       	ldi	r19, 0x00	; 0
    2952:	81 e0       	ldi	r24, 0x01	; 1
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	02 2e       	mov	r0, r18
    2958:	02 c0       	rjmp	.+4      	; 0x295e <vSet_Pin_OUTPUTvalue+0x96>
    295a:	88 0f       	add	r24, r24
    295c:	99 1f       	adc	r25, r25
    295e:	0a 94       	dec	r0
    2960:	e2 f7       	brpl	.-8      	; 0x295a <vSet_Pin_OUTPUTvalue+0x92>
    2962:	84 2b       	or	r24, r20
    2964:	8c 93       	st	X, r24
    2966:	af c0       	rjmp	.+350    	; 0x2ac6 <vSet_Pin_OUTPUTvalue+0x1fe>
                case PORT_B: SET_BIT(PORTB, PIN_ID); break;
    2968:	a8 e3       	ldi	r26, 0x38	; 56
    296a:	b0 e0       	ldi	r27, 0x00	; 0
    296c:	e8 e3       	ldi	r30, 0x38	; 56
    296e:	f0 e0       	ldi	r31, 0x00	; 0
    2970:	80 81       	ld	r24, Z
    2972:	48 2f       	mov	r20, r24
    2974:	8a 81       	ldd	r24, Y+2	; 0x02
    2976:	28 2f       	mov	r18, r24
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	81 e0       	ldi	r24, 0x01	; 1
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	02 2e       	mov	r0, r18
    2980:	02 c0       	rjmp	.+4      	; 0x2986 <vSet_Pin_OUTPUTvalue+0xbe>
    2982:	88 0f       	add	r24, r24
    2984:	99 1f       	adc	r25, r25
    2986:	0a 94       	dec	r0
    2988:	e2 f7       	brpl	.-8      	; 0x2982 <vSet_Pin_OUTPUTvalue+0xba>
    298a:	84 2b       	or	r24, r20
    298c:	8c 93       	st	X, r24
    298e:	9b c0       	rjmp	.+310    	; 0x2ac6 <vSet_Pin_OUTPUTvalue+0x1fe>
                case PORT_C: SET_BIT(PORTC, PIN_ID); break;
    2990:	a5 e3       	ldi	r26, 0x35	; 53
    2992:	b0 e0       	ldi	r27, 0x00	; 0
    2994:	e5 e3       	ldi	r30, 0x35	; 53
    2996:	f0 e0       	ldi	r31, 0x00	; 0
    2998:	80 81       	ld	r24, Z
    299a:	48 2f       	mov	r20, r24
    299c:	8a 81       	ldd	r24, Y+2	; 0x02
    299e:	28 2f       	mov	r18, r24
    29a0:	30 e0       	ldi	r19, 0x00	; 0
    29a2:	81 e0       	ldi	r24, 0x01	; 1
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	02 2e       	mov	r0, r18
    29a8:	02 c0       	rjmp	.+4      	; 0x29ae <vSet_Pin_OUTPUTvalue+0xe6>
    29aa:	88 0f       	add	r24, r24
    29ac:	99 1f       	adc	r25, r25
    29ae:	0a 94       	dec	r0
    29b0:	e2 f7       	brpl	.-8      	; 0x29aa <vSet_Pin_OUTPUTvalue+0xe2>
    29b2:	84 2b       	or	r24, r20
    29b4:	8c 93       	st	X, r24
    29b6:	87 c0       	rjmp	.+270    	; 0x2ac6 <vSet_Pin_OUTPUTvalue+0x1fe>
                case PORT_D: SET_BIT(PORTD, PIN_ID); break;
    29b8:	a2 e3       	ldi	r26, 0x32	; 50
    29ba:	b0 e0       	ldi	r27, 0x00	; 0
    29bc:	e2 e3       	ldi	r30, 0x32	; 50
    29be:	f0 e0       	ldi	r31, 0x00	; 0
    29c0:	80 81       	ld	r24, Z
    29c2:	48 2f       	mov	r20, r24
    29c4:	8a 81       	ldd	r24, Y+2	; 0x02
    29c6:	28 2f       	mov	r18, r24
    29c8:	30 e0       	ldi	r19, 0x00	; 0
    29ca:	81 e0       	ldi	r24, 0x01	; 1
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	02 2e       	mov	r0, r18
    29d0:	02 c0       	rjmp	.+4      	; 0x29d6 <vSet_Pin_OUTPUTvalue+0x10e>
    29d2:	88 0f       	add	r24, r24
    29d4:	99 1f       	adc	r25, r25
    29d6:	0a 94       	dec	r0
    29d8:	e2 f7       	brpl	.-8      	; 0x29d2 <vSet_Pin_OUTPUTvalue+0x10a>
    29da:	84 2b       	or	r24, r20
    29dc:	8c 93       	st	X, r24
    29de:	73 c0       	rjmp	.+230    	; 0x2ac6 <vSet_Pin_OUTPUTvalue+0x1fe>
            }
            break;

        case LOW:
            switch(PORT_ID)
    29e0:	89 81       	ldd	r24, Y+1	; 0x01
    29e2:	28 2f       	mov	r18, r24
    29e4:	30 e0       	ldi	r19, 0x00	; 0
    29e6:	3d 83       	std	Y+5, r19	; 0x05
    29e8:	2c 83       	std	Y+4, r18	; 0x04
    29ea:	8c 81       	ldd	r24, Y+4	; 0x04
    29ec:	9d 81       	ldd	r25, Y+5	; 0x05
    29ee:	81 30       	cpi	r24, 0x01	; 1
    29f0:	91 05       	cpc	r25, r1
    29f2:	59 f1       	breq	.+86     	; 0x2a4a <vSet_Pin_OUTPUTvalue+0x182>
    29f4:	2c 81       	ldd	r18, Y+4	; 0x04
    29f6:	3d 81       	ldd	r19, Y+5	; 0x05
    29f8:	22 30       	cpi	r18, 0x02	; 2
    29fa:	31 05       	cpc	r19, r1
    29fc:	2c f4       	brge	.+10     	; 0x2a08 <vSet_Pin_OUTPUTvalue+0x140>
    29fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2a00:	9d 81       	ldd	r25, Y+5	; 0x05
    2a02:	00 97       	sbiw	r24, 0x00	; 0
    2a04:	69 f0       	breq	.+26     	; 0x2a20 <vSet_Pin_OUTPUTvalue+0x158>
    2a06:	5f c0       	rjmp	.+190    	; 0x2ac6 <vSet_Pin_OUTPUTvalue+0x1fe>
    2a08:	2c 81       	ldd	r18, Y+4	; 0x04
    2a0a:	3d 81       	ldd	r19, Y+5	; 0x05
    2a0c:	22 30       	cpi	r18, 0x02	; 2
    2a0e:	31 05       	cpc	r19, r1
    2a10:	89 f1       	breq	.+98     	; 0x2a74 <vSet_Pin_OUTPUTvalue+0x1ac>
    2a12:	8c 81       	ldd	r24, Y+4	; 0x04
    2a14:	9d 81       	ldd	r25, Y+5	; 0x05
    2a16:	83 30       	cpi	r24, 0x03	; 3
    2a18:	91 05       	cpc	r25, r1
    2a1a:	09 f4       	brne	.+2      	; 0x2a1e <vSet_Pin_OUTPUTvalue+0x156>
    2a1c:	40 c0       	rjmp	.+128    	; 0x2a9e <vSet_Pin_OUTPUTvalue+0x1d6>
    2a1e:	53 c0       	rjmp	.+166    	; 0x2ac6 <vSet_Pin_OUTPUTvalue+0x1fe>
            {
                case PORT_A: CLEAR_BIT(PORTA, PIN_ID); break;
    2a20:	ab e3       	ldi	r26, 0x3B	; 59
    2a22:	b0 e0       	ldi	r27, 0x00	; 0
    2a24:	eb e3       	ldi	r30, 0x3B	; 59
    2a26:	f0 e0       	ldi	r31, 0x00	; 0
    2a28:	80 81       	ld	r24, Z
    2a2a:	48 2f       	mov	r20, r24
    2a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a2e:	28 2f       	mov	r18, r24
    2a30:	30 e0       	ldi	r19, 0x00	; 0
    2a32:	81 e0       	ldi	r24, 0x01	; 1
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	02 2e       	mov	r0, r18
    2a38:	02 c0       	rjmp	.+4      	; 0x2a3e <vSet_Pin_OUTPUTvalue+0x176>
    2a3a:	88 0f       	add	r24, r24
    2a3c:	99 1f       	adc	r25, r25
    2a3e:	0a 94       	dec	r0
    2a40:	e2 f7       	brpl	.-8      	; 0x2a3a <vSet_Pin_OUTPUTvalue+0x172>
    2a42:	80 95       	com	r24
    2a44:	84 23       	and	r24, r20
    2a46:	8c 93       	st	X, r24
    2a48:	3e c0       	rjmp	.+124    	; 0x2ac6 <vSet_Pin_OUTPUTvalue+0x1fe>
                case PORT_B: CLEAR_BIT(PORTB, PIN_ID); break;
    2a4a:	a8 e3       	ldi	r26, 0x38	; 56
    2a4c:	b0 e0       	ldi	r27, 0x00	; 0
    2a4e:	e8 e3       	ldi	r30, 0x38	; 56
    2a50:	f0 e0       	ldi	r31, 0x00	; 0
    2a52:	80 81       	ld	r24, Z
    2a54:	48 2f       	mov	r20, r24
    2a56:	8a 81       	ldd	r24, Y+2	; 0x02
    2a58:	28 2f       	mov	r18, r24
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	81 e0       	ldi	r24, 0x01	; 1
    2a5e:	90 e0       	ldi	r25, 0x00	; 0
    2a60:	02 2e       	mov	r0, r18
    2a62:	02 c0       	rjmp	.+4      	; 0x2a68 <vSet_Pin_OUTPUTvalue+0x1a0>
    2a64:	88 0f       	add	r24, r24
    2a66:	99 1f       	adc	r25, r25
    2a68:	0a 94       	dec	r0
    2a6a:	e2 f7       	brpl	.-8      	; 0x2a64 <vSet_Pin_OUTPUTvalue+0x19c>
    2a6c:	80 95       	com	r24
    2a6e:	84 23       	and	r24, r20
    2a70:	8c 93       	st	X, r24
    2a72:	29 c0       	rjmp	.+82     	; 0x2ac6 <vSet_Pin_OUTPUTvalue+0x1fe>
                case PORT_C: CLEAR_BIT(PORTC, PIN_ID); break;
    2a74:	a5 e3       	ldi	r26, 0x35	; 53
    2a76:	b0 e0       	ldi	r27, 0x00	; 0
    2a78:	e5 e3       	ldi	r30, 0x35	; 53
    2a7a:	f0 e0       	ldi	r31, 0x00	; 0
    2a7c:	80 81       	ld	r24, Z
    2a7e:	48 2f       	mov	r20, r24
    2a80:	8a 81       	ldd	r24, Y+2	; 0x02
    2a82:	28 2f       	mov	r18, r24
    2a84:	30 e0       	ldi	r19, 0x00	; 0
    2a86:	81 e0       	ldi	r24, 0x01	; 1
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	02 2e       	mov	r0, r18
    2a8c:	02 c0       	rjmp	.+4      	; 0x2a92 <vSet_Pin_OUTPUTvalue+0x1ca>
    2a8e:	88 0f       	add	r24, r24
    2a90:	99 1f       	adc	r25, r25
    2a92:	0a 94       	dec	r0
    2a94:	e2 f7       	brpl	.-8      	; 0x2a8e <vSet_Pin_OUTPUTvalue+0x1c6>
    2a96:	80 95       	com	r24
    2a98:	84 23       	and	r24, r20
    2a9a:	8c 93       	st	X, r24
    2a9c:	14 c0       	rjmp	.+40     	; 0x2ac6 <vSet_Pin_OUTPUTvalue+0x1fe>
                case PORT_D: CLEAR_BIT(PORTD, PIN_ID); break;
    2a9e:	a2 e3       	ldi	r26, 0x32	; 50
    2aa0:	b0 e0       	ldi	r27, 0x00	; 0
    2aa2:	e2 e3       	ldi	r30, 0x32	; 50
    2aa4:	f0 e0       	ldi	r31, 0x00	; 0
    2aa6:	80 81       	ld	r24, Z
    2aa8:	48 2f       	mov	r20, r24
    2aaa:	8a 81       	ldd	r24, Y+2	; 0x02
    2aac:	28 2f       	mov	r18, r24
    2aae:	30 e0       	ldi	r19, 0x00	; 0
    2ab0:	81 e0       	ldi	r24, 0x01	; 1
    2ab2:	90 e0       	ldi	r25, 0x00	; 0
    2ab4:	02 2e       	mov	r0, r18
    2ab6:	02 c0       	rjmp	.+4      	; 0x2abc <vSet_Pin_OUTPUTvalue+0x1f4>
    2ab8:	88 0f       	add	r24, r24
    2aba:	99 1f       	adc	r25, r25
    2abc:	0a 94       	dec	r0
    2abe:	e2 f7       	brpl	.-8      	; 0x2ab8 <vSet_Pin_OUTPUTvalue+0x1f0>
    2ac0:	80 95       	com	r24
    2ac2:	84 23       	and	r24, r20
    2ac4:	8c 93       	st	X, r24
            }
            break;
    }
}
    2ac6:	29 96       	adiw	r28, 0x09	; 9
    2ac8:	0f b6       	in	r0, 0x3f	; 63
    2aca:	f8 94       	cli
    2acc:	de bf       	out	0x3e, r29	; 62
    2ace:	0f be       	out	0x3f, r0	; 63
    2ad0:	cd bf       	out	0x3d, r28	; 61
    2ad2:	cf 91       	pop	r28
    2ad4:	df 91       	pop	r29
    2ad6:	08 95       	ret

00002ad8 <vTOGGLE_Pin>:
 *   - PIN_ID: The pin number to toggle (0-7).
 * @param parameters_out None.
 * @return None.
 */
void vTOGGLE_Pin(u8 PORT_ID, u8 PIN_ID)
{
    2ad8:	df 93       	push	r29
    2ada:	cf 93       	push	r28
    2adc:	00 d0       	rcall	.+0      	; 0x2ade <vTOGGLE_Pin+0x6>
    2ade:	00 d0       	rcall	.+0      	; 0x2ae0 <vTOGGLE_Pin+0x8>
    2ae0:	cd b7       	in	r28, 0x3d	; 61
    2ae2:	de b7       	in	r29, 0x3e	; 62
    2ae4:	89 83       	std	Y+1, r24	; 0x01
    2ae6:	6a 83       	std	Y+2, r22	; 0x02
    switch(PORT_ID)
    2ae8:	89 81       	ldd	r24, Y+1	; 0x01
    2aea:	28 2f       	mov	r18, r24
    2aec:	30 e0       	ldi	r19, 0x00	; 0
    2aee:	3c 83       	std	Y+4, r19	; 0x04
    2af0:	2b 83       	std	Y+3, r18	; 0x03
    2af2:	8b 81       	ldd	r24, Y+3	; 0x03
    2af4:	9c 81       	ldd	r25, Y+4	; 0x04
    2af6:	81 30       	cpi	r24, 0x01	; 1
    2af8:	91 05       	cpc	r25, r1
    2afa:	49 f1       	breq	.+82     	; 0x2b4e <vTOGGLE_Pin+0x76>
    2afc:	2b 81       	ldd	r18, Y+3	; 0x03
    2afe:	3c 81       	ldd	r19, Y+4	; 0x04
    2b00:	22 30       	cpi	r18, 0x02	; 2
    2b02:	31 05       	cpc	r19, r1
    2b04:	2c f4       	brge	.+10     	; 0x2b10 <vTOGGLE_Pin+0x38>
    2b06:	8b 81       	ldd	r24, Y+3	; 0x03
    2b08:	9c 81       	ldd	r25, Y+4	; 0x04
    2b0a:	00 97       	sbiw	r24, 0x00	; 0
    2b0c:	61 f0       	breq	.+24     	; 0x2b26 <vTOGGLE_Pin+0x4e>
    2b0e:	5a c0       	rjmp	.+180    	; 0x2bc4 <vTOGGLE_Pin+0xec>
    2b10:	2b 81       	ldd	r18, Y+3	; 0x03
    2b12:	3c 81       	ldd	r19, Y+4	; 0x04
    2b14:	22 30       	cpi	r18, 0x02	; 2
    2b16:	31 05       	cpc	r19, r1
    2b18:	71 f1       	breq	.+92     	; 0x2b76 <vTOGGLE_Pin+0x9e>
    2b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b1c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b1e:	83 30       	cpi	r24, 0x03	; 3
    2b20:	91 05       	cpc	r25, r1
    2b22:	e9 f1       	breq	.+122    	; 0x2b9e <vTOGGLE_Pin+0xc6>
    2b24:	4f c0       	rjmp	.+158    	; 0x2bc4 <vTOGGLE_Pin+0xec>
    {
        case PORT_A: TOG_BIT(PORTA, PIN_ID); break;
    2b26:	ab e3       	ldi	r26, 0x3B	; 59
    2b28:	b0 e0       	ldi	r27, 0x00	; 0
    2b2a:	eb e3       	ldi	r30, 0x3B	; 59
    2b2c:	f0 e0       	ldi	r31, 0x00	; 0
    2b2e:	80 81       	ld	r24, Z
    2b30:	48 2f       	mov	r20, r24
    2b32:	8a 81       	ldd	r24, Y+2	; 0x02
    2b34:	28 2f       	mov	r18, r24
    2b36:	30 e0       	ldi	r19, 0x00	; 0
    2b38:	81 e0       	ldi	r24, 0x01	; 1
    2b3a:	90 e0       	ldi	r25, 0x00	; 0
    2b3c:	02 2e       	mov	r0, r18
    2b3e:	02 c0       	rjmp	.+4      	; 0x2b44 <vTOGGLE_Pin+0x6c>
    2b40:	88 0f       	add	r24, r24
    2b42:	99 1f       	adc	r25, r25
    2b44:	0a 94       	dec	r0
    2b46:	e2 f7       	brpl	.-8      	; 0x2b40 <vTOGGLE_Pin+0x68>
    2b48:	84 27       	eor	r24, r20
    2b4a:	8c 93       	st	X, r24
    2b4c:	3b c0       	rjmp	.+118    	; 0x2bc4 <vTOGGLE_Pin+0xec>
        case PORT_B: TOG_BIT(PORTB, PIN_ID); break;
    2b4e:	a8 e3       	ldi	r26, 0x38	; 56
    2b50:	b0 e0       	ldi	r27, 0x00	; 0
    2b52:	e8 e3       	ldi	r30, 0x38	; 56
    2b54:	f0 e0       	ldi	r31, 0x00	; 0
    2b56:	80 81       	ld	r24, Z
    2b58:	48 2f       	mov	r20, r24
    2b5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b5c:	28 2f       	mov	r18, r24
    2b5e:	30 e0       	ldi	r19, 0x00	; 0
    2b60:	81 e0       	ldi	r24, 0x01	; 1
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	02 2e       	mov	r0, r18
    2b66:	02 c0       	rjmp	.+4      	; 0x2b6c <vTOGGLE_Pin+0x94>
    2b68:	88 0f       	add	r24, r24
    2b6a:	99 1f       	adc	r25, r25
    2b6c:	0a 94       	dec	r0
    2b6e:	e2 f7       	brpl	.-8      	; 0x2b68 <vTOGGLE_Pin+0x90>
    2b70:	84 27       	eor	r24, r20
    2b72:	8c 93       	st	X, r24
    2b74:	27 c0       	rjmp	.+78     	; 0x2bc4 <vTOGGLE_Pin+0xec>
        case PORT_C: TOG_BIT(PORTC, PIN_ID); break;
    2b76:	a5 e3       	ldi	r26, 0x35	; 53
    2b78:	b0 e0       	ldi	r27, 0x00	; 0
    2b7a:	e5 e3       	ldi	r30, 0x35	; 53
    2b7c:	f0 e0       	ldi	r31, 0x00	; 0
    2b7e:	80 81       	ld	r24, Z
    2b80:	48 2f       	mov	r20, r24
    2b82:	8a 81       	ldd	r24, Y+2	; 0x02
    2b84:	28 2f       	mov	r18, r24
    2b86:	30 e0       	ldi	r19, 0x00	; 0
    2b88:	81 e0       	ldi	r24, 0x01	; 1
    2b8a:	90 e0       	ldi	r25, 0x00	; 0
    2b8c:	02 2e       	mov	r0, r18
    2b8e:	02 c0       	rjmp	.+4      	; 0x2b94 <vTOGGLE_Pin+0xbc>
    2b90:	88 0f       	add	r24, r24
    2b92:	99 1f       	adc	r25, r25
    2b94:	0a 94       	dec	r0
    2b96:	e2 f7       	brpl	.-8      	; 0x2b90 <vTOGGLE_Pin+0xb8>
    2b98:	84 27       	eor	r24, r20
    2b9a:	8c 93       	st	X, r24
    2b9c:	13 c0       	rjmp	.+38     	; 0x2bc4 <vTOGGLE_Pin+0xec>
        case PORT_D: TOG_BIT(PORTD, PIN_ID); break;
    2b9e:	a2 e3       	ldi	r26, 0x32	; 50
    2ba0:	b0 e0       	ldi	r27, 0x00	; 0
    2ba2:	e2 e3       	ldi	r30, 0x32	; 50
    2ba4:	f0 e0       	ldi	r31, 0x00	; 0
    2ba6:	80 81       	ld	r24, Z
    2ba8:	48 2f       	mov	r20, r24
    2baa:	8a 81       	ldd	r24, Y+2	; 0x02
    2bac:	28 2f       	mov	r18, r24
    2bae:	30 e0       	ldi	r19, 0x00	; 0
    2bb0:	81 e0       	ldi	r24, 0x01	; 1
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	02 2e       	mov	r0, r18
    2bb6:	02 c0       	rjmp	.+4      	; 0x2bbc <vTOGGLE_Pin+0xe4>
    2bb8:	88 0f       	add	r24, r24
    2bba:	99 1f       	adc	r25, r25
    2bbc:	0a 94       	dec	r0
    2bbe:	e2 f7       	brpl	.-8      	; 0x2bb8 <vTOGGLE_Pin+0xe0>
    2bc0:	84 27       	eor	r24, r20
    2bc2:	8c 93       	st	X, r24
    }
}
    2bc4:	0f 90       	pop	r0
    2bc6:	0f 90       	pop	r0
    2bc8:	0f 90       	pop	r0
    2bca:	0f 90       	pop	r0
    2bcc:	cf 91       	pop	r28
    2bce:	df 91       	pop	r29
    2bd0:	08 95       	ret

00002bd2 <vSet_Port_Direction>:
 *   - Direction: The direction to set (OUTPUT or INPUT).
 * @param parameters_out None.
 * @return None.
 */
void vSet_Port_Direction(u8 PORT_ID, u8 Direction)
{
    2bd2:	df 93       	push	r29
    2bd4:	cf 93       	push	r28
    2bd6:	cd b7       	in	r28, 0x3d	; 61
    2bd8:	de b7       	in	r29, 0x3e	; 62
    2bda:	28 97       	sbiw	r28, 0x08	; 8
    2bdc:	0f b6       	in	r0, 0x3f	; 63
    2bde:	f8 94       	cli
    2be0:	de bf       	out	0x3e, r29	; 62
    2be2:	0f be       	out	0x3f, r0	; 63
    2be4:	cd bf       	out	0x3d, r28	; 61
    2be6:	89 83       	std	Y+1, r24	; 0x01
    2be8:	6a 83       	std	Y+2, r22	; 0x02
    switch(Direction)
    2bea:	8a 81       	ldd	r24, Y+2	; 0x02
    2bec:	28 2f       	mov	r18, r24
    2bee:	30 e0       	ldi	r19, 0x00	; 0
    2bf0:	38 87       	std	Y+8, r19	; 0x08
    2bf2:	2f 83       	std	Y+7, r18	; 0x07
    2bf4:	8f 81       	ldd	r24, Y+7	; 0x07
    2bf6:	98 85       	ldd	r25, Y+8	; 0x08
    2bf8:	00 97       	sbiw	r24, 0x00	; 0
    2bfa:	c9 f1       	breq	.+114    	; 0x2c6e <vSet_Port_Direction+0x9c>
    2bfc:	2f 81       	ldd	r18, Y+7	; 0x07
    2bfe:	38 85       	ldd	r19, Y+8	; 0x08
    2c00:	21 30       	cpi	r18, 0x01	; 1
    2c02:	31 05       	cpc	r19, r1
    2c04:	09 f0       	breq	.+2      	; 0x2c08 <vSet_Port_Direction+0x36>
    2c06:	61 c0       	rjmp	.+194    	; 0x2cca <vSet_Port_Direction+0xf8>
    {
        case OUTPUT:
            switch(PORT_ID)
    2c08:	89 81       	ldd	r24, Y+1	; 0x01
    2c0a:	28 2f       	mov	r18, r24
    2c0c:	30 e0       	ldi	r19, 0x00	; 0
    2c0e:	3e 83       	std	Y+6, r19	; 0x06
    2c10:	2d 83       	std	Y+5, r18	; 0x05
    2c12:	8d 81       	ldd	r24, Y+5	; 0x05
    2c14:	9e 81       	ldd	r25, Y+6	; 0x06
    2c16:	81 30       	cpi	r24, 0x01	; 1
    2c18:	91 05       	cpc	r25, r1
    2c1a:	d1 f0       	breq	.+52     	; 0x2c50 <vSet_Port_Direction+0x7e>
    2c1c:	2d 81       	ldd	r18, Y+5	; 0x05
    2c1e:	3e 81       	ldd	r19, Y+6	; 0x06
    2c20:	22 30       	cpi	r18, 0x02	; 2
    2c22:	31 05       	cpc	r19, r1
    2c24:	2c f4       	brge	.+10     	; 0x2c30 <vSet_Port_Direction+0x5e>
    2c26:	8d 81       	ldd	r24, Y+5	; 0x05
    2c28:	9e 81       	ldd	r25, Y+6	; 0x06
    2c2a:	00 97       	sbiw	r24, 0x00	; 0
    2c2c:	61 f0       	breq	.+24     	; 0x2c46 <vSet_Port_Direction+0x74>
    2c2e:	4d c0       	rjmp	.+154    	; 0x2cca <vSet_Port_Direction+0xf8>
    2c30:	2d 81       	ldd	r18, Y+5	; 0x05
    2c32:	3e 81       	ldd	r19, Y+6	; 0x06
    2c34:	22 30       	cpi	r18, 0x02	; 2
    2c36:	31 05       	cpc	r19, r1
    2c38:	81 f0       	breq	.+32     	; 0x2c5a <vSet_Port_Direction+0x88>
    2c3a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c3c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c3e:	83 30       	cpi	r24, 0x03	; 3
    2c40:	91 05       	cpc	r25, r1
    2c42:	81 f0       	breq	.+32     	; 0x2c64 <vSet_Port_Direction+0x92>
    2c44:	42 c0       	rjmp	.+132    	; 0x2cca <vSet_Port_Direction+0xf8>
            {
                case PORT_A: DDRA = 0xff; break;
    2c46:	ea e3       	ldi	r30, 0x3A	; 58
    2c48:	f0 e0       	ldi	r31, 0x00	; 0
    2c4a:	8f ef       	ldi	r24, 0xFF	; 255
    2c4c:	80 83       	st	Z, r24
    2c4e:	3d c0       	rjmp	.+122    	; 0x2cca <vSet_Port_Direction+0xf8>
                case PORT_B: DDRB = 0xff; break;
    2c50:	e7 e3       	ldi	r30, 0x37	; 55
    2c52:	f0 e0       	ldi	r31, 0x00	; 0
    2c54:	8f ef       	ldi	r24, 0xFF	; 255
    2c56:	80 83       	st	Z, r24
    2c58:	38 c0       	rjmp	.+112    	; 0x2cca <vSet_Port_Direction+0xf8>
                case PORT_C: DDRC = 0xff; break;
    2c5a:	e4 e3       	ldi	r30, 0x34	; 52
    2c5c:	f0 e0       	ldi	r31, 0x00	; 0
    2c5e:	8f ef       	ldi	r24, 0xFF	; 255
    2c60:	80 83       	st	Z, r24
    2c62:	33 c0       	rjmp	.+102    	; 0x2cca <vSet_Port_Direction+0xf8>
                case PORT_D: DDRD = 0xff; break;
    2c64:	e1 e3       	ldi	r30, 0x31	; 49
    2c66:	f0 e0       	ldi	r31, 0x00	; 0
    2c68:	8f ef       	ldi	r24, 0xFF	; 255
    2c6a:	80 83       	st	Z, r24
    2c6c:	2e c0       	rjmp	.+92     	; 0x2cca <vSet_Port_Direction+0xf8>
            }
            break;

        case INPUT:
            switch(PORT_ID)
    2c6e:	89 81       	ldd	r24, Y+1	; 0x01
    2c70:	28 2f       	mov	r18, r24
    2c72:	30 e0       	ldi	r19, 0x00	; 0
    2c74:	3c 83       	std	Y+4, r19	; 0x04
    2c76:	2b 83       	std	Y+3, r18	; 0x03
    2c78:	8b 81       	ldd	r24, Y+3	; 0x03
    2c7a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c7c:	81 30       	cpi	r24, 0x01	; 1
    2c7e:	91 05       	cpc	r25, r1
    2c80:	c9 f0       	breq	.+50     	; 0x2cb4 <vSet_Port_Direction+0xe2>
    2c82:	2b 81       	ldd	r18, Y+3	; 0x03
    2c84:	3c 81       	ldd	r19, Y+4	; 0x04
    2c86:	22 30       	cpi	r18, 0x02	; 2
    2c88:	31 05       	cpc	r19, r1
    2c8a:	2c f4       	brge	.+10     	; 0x2c96 <vSet_Port_Direction+0xc4>
    2c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c8e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c90:	00 97       	sbiw	r24, 0x00	; 0
    2c92:	61 f0       	breq	.+24     	; 0x2cac <vSet_Port_Direction+0xda>
    2c94:	1a c0       	rjmp	.+52     	; 0x2cca <vSet_Port_Direction+0xf8>
    2c96:	2b 81       	ldd	r18, Y+3	; 0x03
    2c98:	3c 81       	ldd	r19, Y+4	; 0x04
    2c9a:	22 30       	cpi	r18, 0x02	; 2
    2c9c:	31 05       	cpc	r19, r1
    2c9e:	71 f0       	breq	.+28     	; 0x2cbc <vSet_Port_Direction+0xea>
    2ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ca4:	83 30       	cpi	r24, 0x03	; 3
    2ca6:	91 05       	cpc	r25, r1
    2ca8:	69 f0       	breq	.+26     	; 0x2cc4 <vSet_Port_Direction+0xf2>
    2caa:	0f c0       	rjmp	.+30     	; 0x2cca <vSet_Port_Direction+0xf8>
            {
                case PORT_A: DDRA = 0x00; break;
    2cac:	ea e3       	ldi	r30, 0x3A	; 58
    2cae:	f0 e0       	ldi	r31, 0x00	; 0
    2cb0:	10 82       	st	Z, r1
    2cb2:	0b c0       	rjmp	.+22     	; 0x2cca <vSet_Port_Direction+0xf8>
                case PORT_B: DDRB = 0x00; break;
    2cb4:	e7 e3       	ldi	r30, 0x37	; 55
    2cb6:	f0 e0       	ldi	r31, 0x00	; 0
    2cb8:	10 82       	st	Z, r1
    2cba:	07 c0       	rjmp	.+14     	; 0x2cca <vSet_Port_Direction+0xf8>
                case PORT_C: DDRC = 0x00; break;
    2cbc:	e4 e3       	ldi	r30, 0x34	; 52
    2cbe:	f0 e0       	ldi	r31, 0x00	; 0
    2cc0:	10 82       	st	Z, r1
    2cc2:	03 c0       	rjmp	.+6      	; 0x2cca <vSet_Port_Direction+0xf8>
                case PORT_D: DDRD = 0x00; break;
    2cc4:	e1 e3       	ldi	r30, 0x31	; 49
    2cc6:	f0 e0       	ldi	r31, 0x00	; 0
    2cc8:	10 82       	st	Z, r1
            }
            break;
    }
}
    2cca:	28 96       	adiw	r28, 0x08	; 8
    2ccc:	0f b6       	in	r0, 0x3f	; 63
    2cce:	f8 94       	cli
    2cd0:	de bf       	out	0x3e, r29	; 62
    2cd2:	0f be       	out	0x3f, r0	; 63
    2cd4:	cd bf       	out	0x3d, r28	; 61
    2cd6:	cf 91       	pop	r28
    2cd8:	df 91       	pop	r29
    2cda:	08 95       	ret

00002cdc <vSet_Port_OUTPUTvalue>:
 *   - Value: The value to set for the port (0-255).
 * @param parameters_out None.
 * @return None.
 */
void vSet_Port_OUTPUTvalue(u8 PORT_ID, u8 Value)
{
    2cdc:	df 93       	push	r29
    2cde:	cf 93       	push	r28
    2ce0:	00 d0       	rcall	.+0      	; 0x2ce2 <vSet_Port_OUTPUTvalue+0x6>
    2ce2:	00 d0       	rcall	.+0      	; 0x2ce4 <vSet_Port_OUTPUTvalue+0x8>
    2ce4:	cd b7       	in	r28, 0x3d	; 61
    2ce6:	de b7       	in	r29, 0x3e	; 62
    2ce8:	89 83       	std	Y+1, r24	; 0x01
    2cea:	6a 83       	std	Y+2, r22	; 0x02
    switch(PORT_ID)
    2cec:	89 81       	ldd	r24, Y+1	; 0x01
    2cee:	28 2f       	mov	r18, r24
    2cf0:	30 e0       	ldi	r19, 0x00	; 0
    2cf2:	3c 83       	std	Y+4, r19	; 0x04
    2cf4:	2b 83       	std	Y+3, r18	; 0x03
    2cf6:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf8:	9c 81       	ldd	r25, Y+4	; 0x04
    2cfa:	81 30       	cpi	r24, 0x01	; 1
    2cfc:	91 05       	cpc	r25, r1
    2cfe:	d1 f0       	breq	.+52     	; 0x2d34 <vSet_Port_OUTPUTvalue+0x58>
    2d00:	2b 81       	ldd	r18, Y+3	; 0x03
    2d02:	3c 81       	ldd	r19, Y+4	; 0x04
    2d04:	22 30       	cpi	r18, 0x02	; 2
    2d06:	31 05       	cpc	r19, r1
    2d08:	2c f4       	brge	.+10     	; 0x2d14 <vSet_Port_OUTPUTvalue+0x38>
    2d0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d0c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d0e:	00 97       	sbiw	r24, 0x00	; 0
    2d10:	61 f0       	breq	.+24     	; 0x2d2a <vSet_Port_OUTPUTvalue+0x4e>
    2d12:	1e c0       	rjmp	.+60     	; 0x2d50 <vSet_Port_OUTPUTvalue+0x74>
    2d14:	2b 81       	ldd	r18, Y+3	; 0x03
    2d16:	3c 81       	ldd	r19, Y+4	; 0x04
    2d18:	22 30       	cpi	r18, 0x02	; 2
    2d1a:	31 05       	cpc	r19, r1
    2d1c:	81 f0       	breq	.+32     	; 0x2d3e <vSet_Port_OUTPUTvalue+0x62>
    2d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d20:	9c 81       	ldd	r25, Y+4	; 0x04
    2d22:	83 30       	cpi	r24, 0x03	; 3
    2d24:	91 05       	cpc	r25, r1
    2d26:	81 f0       	breq	.+32     	; 0x2d48 <vSet_Port_OUTPUTvalue+0x6c>
    2d28:	13 c0       	rjmp	.+38     	; 0x2d50 <vSet_Port_OUTPUTvalue+0x74>
    {
        case PORT_A: PORTA = Value; break;
    2d2a:	eb e3       	ldi	r30, 0x3B	; 59
    2d2c:	f0 e0       	ldi	r31, 0x00	; 0
    2d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d30:	80 83       	st	Z, r24
    2d32:	0e c0       	rjmp	.+28     	; 0x2d50 <vSet_Port_OUTPUTvalue+0x74>
        case PORT_B: PORTB = Value; break;
    2d34:	e8 e3       	ldi	r30, 0x38	; 56
    2d36:	f0 e0       	ldi	r31, 0x00	; 0
    2d38:	8a 81       	ldd	r24, Y+2	; 0x02
    2d3a:	80 83       	st	Z, r24
    2d3c:	09 c0       	rjmp	.+18     	; 0x2d50 <vSet_Port_OUTPUTvalue+0x74>
        case PORT_C: PORTC = Value; break;
    2d3e:	e5 e3       	ldi	r30, 0x35	; 53
    2d40:	f0 e0       	ldi	r31, 0x00	; 0
    2d42:	8a 81       	ldd	r24, Y+2	; 0x02
    2d44:	80 83       	st	Z, r24
    2d46:	04 c0       	rjmp	.+8      	; 0x2d50 <vSet_Port_OUTPUTvalue+0x74>
        case PORT_D: PORTD = Value; break;
    2d48:	e2 e3       	ldi	r30, 0x32	; 50
    2d4a:	f0 e0       	ldi	r31, 0x00	; 0
    2d4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d4e:	80 83       	st	Z, r24
    }
}
    2d50:	0f 90       	pop	r0
    2d52:	0f 90       	pop	r0
    2d54:	0f 90       	pop	r0
    2d56:	0f 90       	pop	r0
    2d58:	cf 91       	pop	r28
    2d5a:	df 91       	pop	r29
    2d5c:	08 95       	ret

00002d5e <vGIT_PIN>:
 *   - PIN_ID: The pin number to read (0-7).
 * @param parameters_out The value of the pin (HIGH or LOW).
 * @return The value of the pin (0 or 1).
 */
u8 vGIT_PIN(u8 PORT_ID, u8 PIN_ID)
{
    2d5e:	df 93       	push	r29
    2d60:	cf 93       	push	r28
    2d62:	00 d0       	rcall	.+0      	; 0x2d64 <vGIT_PIN+0x6>
    2d64:	00 d0       	rcall	.+0      	; 0x2d66 <vGIT_PIN+0x8>
    2d66:	0f 92       	push	r0
    2d68:	cd b7       	in	r28, 0x3d	; 61
    2d6a:	de b7       	in	r29, 0x3e	; 62
    2d6c:	8a 83       	std	Y+2, r24	; 0x02
    2d6e:	6b 83       	std	Y+3, r22	; 0x03
    u8 BIT = 0;
    2d70:	19 82       	std	Y+1, r1	; 0x01
    switch(PORT_ID)
    2d72:	8a 81       	ldd	r24, Y+2	; 0x02
    2d74:	28 2f       	mov	r18, r24
    2d76:	30 e0       	ldi	r19, 0x00	; 0
    2d78:	3d 83       	std	Y+5, r19	; 0x05
    2d7a:	2c 83       	std	Y+4, r18	; 0x04
    2d7c:	4c 81       	ldd	r20, Y+4	; 0x04
    2d7e:	5d 81       	ldd	r21, Y+5	; 0x05
    2d80:	41 30       	cpi	r20, 0x01	; 1
    2d82:	51 05       	cpc	r21, r1
    2d84:	41 f1       	breq	.+80     	; 0x2dd6 <vGIT_PIN+0x78>
    2d86:	8c 81       	ldd	r24, Y+4	; 0x04
    2d88:	9d 81       	ldd	r25, Y+5	; 0x05
    2d8a:	82 30       	cpi	r24, 0x02	; 2
    2d8c:	91 05       	cpc	r25, r1
    2d8e:	34 f4       	brge	.+12     	; 0x2d9c <vGIT_PIN+0x3e>
    2d90:	2c 81       	ldd	r18, Y+4	; 0x04
    2d92:	3d 81       	ldd	r19, Y+5	; 0x05
    2d94:	21 15       	cp	r18, r1
    2d96:	31 05       	cpc	r19, r1
    2d98:	61 f0       	breq	.+24     	; 0x2db2 <vGIT_PIN+0x54>
    2d9a:	52 c0       	rjmp	.+164    	; 0x2e40 <vGIT_PIN+0xe2>
    2d9c:	4c 81       	ldd	r20, Y+4	; 0x04
    2d9e:	5d 81       	ldd	r21, Y+5	; 0x05
    2da0:	42 30       	cpi	r20, 0x02	; 2
    2da2:	51 05       	cpc	r21, r1
    2da4:	51 f1       	breq	.+84     	; 0x2dfa <vGIT_PIN+0x9c>
    2da6:	8c 81       	ldd	r24, Y+4	; 0x04
    2da8:	9d 81       	ldd	r25, Y+5	; 0x05
    2daa:	83 30       	cpi	r24, 0x03	; 3
    2dac:	91 05       	cpc	r25, r1
    2dae:	b9 f1       	breq	.+110    	; 0x2e1e <vGIT_PIN+0xc0>
    2db0:	47 c0       	rjmp	.+142    	; 0x2e40 <vGIT_PIN+0xe2>
    {
        case PORT_A: BIT = GET_BIT(PINA, PIN_ID); break;
    2db2:	e9 e3       	ldi	r30, 0x39	; 57
    2db4:	f0 e0       	ldi	r31, 0x00	; 0
    2db6:	80 81       	ld	r24, Z
    2db8:	28 2f       	mov	r18, r24
    2dba:	30 e0       	ldi	r19, 0x00	; 0
    2dbc:	8b 81       	ldd	r24, Y+3	; 0x03
    2dbe:	88 2f       	mov	r24, r24
    2dc0:	90 e0       	ldi	r25, 0x00	; 0
    2dc2:	a9 01       	movw	r20, r18
    2dc4:	02 c0       	rjmp	.+4      	; 0x2dca <vGIT_PIN+0x6c>
    2dc6:	55 95       	asr	r21
    2dc8:	47 95       	ror	r20
    2dca:	8a 95       	dec	r24
    2dcc:	e2 f7       	brpl	.-8      	; 0x2dc6 <vGIT_PIN+0x68>
    2dce:	ca 01       	movw	r24, r20
    2dd0:	81 70       	andi	r24, 0x01	; 1
    2dd2:	89 83       	std	Y+1, r24	; 0x01
    2dd4:	35 c0       	rjmp	.+106    	; 0x2e40 <vGIT_PIN+0xe2>
        case PORT_B: BIT = GET_BIT(PINB, PIN_ID); break;
    2dd6:	e6 e3       	ldi	r30, 0x36	; 54
    2dd8:	f0 e0       	ldi	r31, 0x00	; 0
    2dda:	80 81       	ld	r24, Z
    2ddc:	28 2f       	mov	r18, r24
    2dde:	30 e0       	ldi	r19, 0x00	; 0
    2de0:	8b 81       	ldd	r24, Y+3	; 0x03
    2de2:	88 2f       	mov	r24, r24
    2de4:	90 e0       	ldi	r25, 0x00	; 0
    2de6:	a9 01       	movw	r20, r18
    2de8:	02 c0       	rjmp	.+4      	; 0x2dee <vGIT_PIN+0x90>
    2dea:	55 95       	asr	r21
    2dec:	47 95       	ror	r20
    2dee:	8a 95       	dec	r24
    2df0:	e2 f7       	brpl	.-8      	; 0x2dea <vGIT_PIN+0x8c>
    2df2:	ca 01       	movw	r24, r20
    2df4:	81 70       	andi	r24, 0x01	; 1
    2df6:	89 83       	std	Y+1, r24	; 0x01
    2df8:	23 c0       	rjmp	.+70     	; 0x2e40 <vGIT_PIN+0xe2>
        case PORT_C: BIT = GET_BIT(PINC, PIN_ID); break;
    2dfa:	e3 e3       	ldi	r30, 0x33	; 51
    2dfc:	f0 e0       	ldi	r31, 0x00	; 0
    2dfe:	80 81       	ld	r24, Z
    2e00:	28 2f       	mov	r18, r24
    2e02:	30 e0       	ldi	r19, 0x00	; 0
    2e04:	8b 81       	ldd	r24, Y+3	; 0x03
    2e06:	88 2f       	mov	r24, r24
    2e08:	90 e0       	ldi	r25, 0x00	; 0
    2e0a:	a9 01       	movw	r20, r18
    2e0c:	02 c0       	rjmp	.+4      	; 0x2e12 <vGIT_PIN+0xb4>
    2e0e:	55 95       	asr	r21
    2e10:	47 95       	ror	r20
    2e12:	8a 95       	dec	r24
    2e14:	e2 f7       	brpl	.-8      	; 0x2e0e <vGIT_PIN+0xb0>
    2e16:	ca 01       	movw	r24, r20
    2e18:	81 70       	andi	r24, 0x01	; 1
    2e1a:	89 83       	std	Y+1, r24	; 0x01
    2e1c:	11 c0       	rjmp	.+34     	; 0x2e40 <vGIT_PIN+0xe2>
        case PORT_D: BIT = GET_BIT(PIND, PIN_ID); break;
    2e1e:	e0 e3       	ldi	r30, 0x30	; 48
    2e20:	f0 e0       	ldi	r31, 0x00	; 0
    2e22:	80 81       	ld	r24, Z
    2e24:	28 2f       	mov	r18, r24
    2e26:	30 e0       	ldi	r19, 0x00	; 0
    2e28:	8b 81       	ldd	r24, Y+3	; 0x03
    2e2a:	88 2f       	mov	r24, r24
    2e2c:	90 e0       	ldi	r25, 0x00	; 0
    2e2e:	a9 01       	movw	r20, r18
    2e30:	02 c0       	rjmp	.+4      	; 0x2e36 <vGIT_PIN+0xd8>
    2e32:	55 95       	asr	r21
    2e34:	47 95       	ror	r20
    2e36:	8a 95       	dec	r24
    2e38:	e2 f7       	brpl	.-8      	; 0x2e32 <vGIT_PIN+0xd4>
    2e3a:	ca 01       	movw	r24, r20
    2e3c:	81 70       	andi	r24, 0x01	; 1
    2e3e:	89 83       	std	Y+1, r24	; 0x01
    }
    return BIT;
    2e40:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e42:	0f 90       	pop	r0
    2e44:	0f 90       	pop	r0
    2e46:	0f 90       	pop	r0
    2e48:	0f 90       	pop	r0
    2e4a:	0f 90       	pop	r0
    2e4c:	cf 91       	pop	r28
    2e4e:	df 91       	pop	r29
    2e50:	08 95       	ret

00002e52 <vSetInernalPullUp>:
 *   - PIN_ID: The pin number to enable the pull-up resistor (0-7).
 * @param parameters_out None.
 * @return None.
 */
void vSetInernalPullUp(u8 PORT_ID, u8 PIN_ID)
{
    2e52:	df 93       	push	r29
    2e54:	cf 93       	push	r28
    2e56:	00 d0       	rcall	.+0      	; 0x2e58 <vSetInernalPullUp+0x6>
    2e58:	cd b7       	in	r28, 0x3d	; 61
    2e5a:	de b7       	in	r29, 0x3e	; 62
    2e5c:	89 83       	std	Y+1, r24	; 0x01
    2e5e:	6a 83       	std	Y+2, r22	; 0x02
    vSet_Pin_OUTPUTvalue(PORT_ID, PIN_ID, HIGH);
    2e60:	89 81       	ldd	r24, Y+1	; 0x01
    2e62:	6a 81       	ldd	r22, Y+2	; 0x02
    2e64:	41 e0       	ldi	r20, 0x01	; 1
    2e66:	0e 94 64 14 	call	0x28c8	; 0x28c8 <vSet_Pin_OUTPUTvalue>
}
    2e6a:	0f 90       	pop	r0
    2e6c:	0f 90       	pop	r0
    2e6e:	cf 91       	pop	r28
    2e70:	df 91       	pop	r29
    2e72:	08 95       	ret

00002e74 <MADC_VoidInit>:
#include "ADC_Config.h"
#include "ADC_Interface.h"


void MADC_VoidInit(void)
{
    2e74:	df 93       	push	r29
    2e76:	cf 93       	push	r28
    2e78:	cd b7       	in	r28, 0x3d	; 61
    2e7a:	de b7       	in	r29, 0x3e	; 62
	//SET_BIT(ADCSRA,ADCSRA_ADATE);

	// slect ref

	//#if ADC_REFRENCE_SELECTION == AREF
		ADMUX &= REF_SEL_BIT_MASK;
    2e7c:	a7 e2       	ldi	r26, 0x27	; 39
    2e7e:	b0 e0       	ldi	r27, 0x00	; 0
    2e80:	e7 e2       	ldi	r30, 0x27	; 39
    2e82:	f0 e0       	ldi	r31, 0x00	; 0
    2e84:	80 81       	ld	r24, Z
    2e86:	8f 73       	andi	r24, 0x3F	; 63
    2e88:	8c 93       	st	X, r24
		ADMUX |= 0b11000000;//ADC_REFRENCE_SELECTION
    2e8a:	a7 e2       	ldi	r26, 0x27	; 39
    2e8c:	b0 e0       	ldi	r27, 0x00	; 0
    2e8e:	e7 e2       	ldi	r30, 0x27	; 39
    2e90:	f0 e0       	ldi	r31, 0x00	; 0
    2e92:	80 81       	ld	r24, Z
    2e94:	80 6c       	ori	r24, 0xC0	; 192
    2e96:	8c 93       	st	X, r24

	// prescaller
	/*check prescaler */

	//#if ADC_PRESCALER_VALUE == PRE_DIV_BY_128
		ADCSRA &= PRES_SEL_BIT_MASK;
    2e98:	a6 e2       	ldi	r26, 0x26	; 38
    2e9a:	b0 e0       	ldi	r27, 0x00	; 0
    2e9c:	e6 e2       	ldi	r30, 0x26	; 38
    2e9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ea0:	80 81       	ld	r24, Z
    2ea2:	88 7f       	andi	r24, 0xF8	; 248
    2ea4:	8c 93       	st	X, r24
		ADCSRA |= ADC_PRESCALER_VALUE;
    2ea6:	a6 e2       	ldi	r26, 0x26	; 38
    2ea8:	b0 e0       	ldi	r27, 0x00	; 0
    2eaa:	e6 e2       	ldi	r30, 0x26	; 38
    2eac:	f0 e0       	ldi	r31, 0x00	; 0
    2eae:	80 81       	ld	r24, Z
    2eb0:	87 60       	ori	r24, 0x07	; 7
    2eb2:	8c 93       	st	X, r24
	//#endif

	//ADC_ADJUST
	// RIGHT ADJUST
	CLEAR_BIT(ADMUX,ADMUX_ADLAR);
    2eb4:	a7 e2       	ldi	r26, 0x27	; 39
    2eb6:	b0 e0       	ldi	r27, 0x00	; 0
    2eb8:	e7 e2       	ldi	r30, 0x27	; 39
    2eba:	f0 e0       	ldi	r31, 0x00	; 0
    2ebc:	80 81       	ld	r24, Z
    2ebe:	8f 7d       	andi	r24, 0xDF	; 223
    2ec0:	8c 93       	st	X, r24


	//#if ADC_ENABLE == ENABLE
		SET_BIT(ADCSRA,ADCSRA_ADEN);
    2ec2:	a6 e2       	ldi	r26, 0x26	; 38
    2ec4:	b0 e0       	ldi	r27, 0x00	; 0
    2ec6:	e6 e2       	ldi	r30, 0x26	; 38
    2ec8:	f0 e0       	ldi	r31, 0x00	; 0
    2eca:	80 81       	ld	r24, Z
    2ecc:	80 68       	ori	r24, 0x80	; 128
    2ece:	8c 93       	st	X, r24
	//#elif   ADC_ENABLE == DISABLE
		//CLEAR_BIT(ADCSRA,ADCSRA_ADEN);
	//#endif


}
    2ed0:	cf 91       	pop	r28
    2ed2:	df 91       	pop	r29
    2ed4:	08 95       	ret

00002ed6 <MADC_u8StartConversion>:

u16 MADC_u8StartConversion(u8 Copy_u8ChannelNum)
{
    2ed6:	df 93       	push	r29
    2ed8:	cf 93       	push	r28
    2eda:	00 d0       	rcall	.+0      	; 0x2edc <MADC_u8StartConversion+0x6>
    2edc:	0f 92       	push	r0
    2ede:	cd b7       	in	r28, 0x3d	; 61
    2ee0:	de b7       	in	r29, 0x3e	; 62
    2ee2:	8b 83       	std	Y+3, r24	; 0x03

		u16 Local_u8DigitalValue;
	    /*Set The Channel Of ADC*/
	    ADMUX &= CHANNEL_SEL_BIT_MASK;
    2ee4:	a7 e2       	ldi	r26, 0x27	; 39
    2ee6:	b0 e0       	ldi	r27, 0x00	; 0
    2ee8:	e7 e2       	ldi	r30, 0x27	; 39
    2eea:	f0 e0       	ldi	r31, 0x00	; 0
    2eec:	80 81       	ld	r24, Z
    2eee:	80 7e       	andi	r24, 0xE0	; 224
    2ef0:	8c 93       	st	X, r24
	    ADMUX |= Copy_u8ChannelNum;
    2ef2:	a7 e2       	ldi	r26, 0x27	; 39
    2ef4:	b0 e0       	ldi	r27, 0x00	; 0
    2ef6:	e7 e2       	ldi	r30, 0x27	; 39
    2ef8:	f0 e0       	ldi	r31, 0x00	; 0
    2efa:	90 81       	ld	r25, Z
    2efc:	8b 81       	ldd	r24, Y+3	; 0x03
    2efe:	89 2b       	or	r24, r25
    2f00:	8c 93       	st	X, r24

	    /*Start The ADC To Convert The Input Analog Signal*/
	    SET_BIT(ADCSRA, ADCSRA_ADSC);
    2f02:	a6 e2       	ldi	r26, 0x26	; 38
    2f04:	b0 e0       	ldi	r27, 0x00	; 0
    2f06:	e6 e2       	ldi	r30, 0x26	; 38
    2f08:	f0 e0       	ldi	r31, 0x00	; 0
    2f0a:	80 81       	ld	r24, Z
    2f0c:	80 64       	ori	r24, 0x40	; 64
    2f0e:	8c 93       	st	X, r24
	    /*Polling (busy wait) till the flag is raised*/
	    /*NOT RECOMMENDED AT ALL*/
	    while(!GET_BIT(ADCSRA, ADCSRA_ADIF));
    2f10:	e6 e2       	ldi	r30, 0x26	; 38
    2f12:	f0 e0       	ldi	r31, 0x00	; 0
    2f14:	80 81       	ld	r24, Z
    2f16:	82 95       	swap	r24
    2f18:	8f 70       	andi	r24, 0x0F	; 15
    2f1a:	88 2f       	mov	r24, r24
    2f1c:	90 e0       	ldi	r25, 0x00	; 0
    2f1e:	81 70       	andi	r24, 0x01	; 1
    2f20:	90 70       	andi	r25, 0x00	; 0
    2f22:	00 97       	sbiw	r24, 0x00	; 0
    2f24:	a9 f3       	breq	.-22     	; 0x2f10 <MADC_u8StartConversion+0x3a>
	    /*Clear The Flag*/
	    SET_BIT(ADCSRA, ADCSRA_ADIF);
    2f26:	a6 e2       	ldi	r26, 0x26	; 38
    2f28:	b0 e0       	ldi	r27, 0x00	; 0
    2f2a:	e6 e2       	ldi	r30, 0x26	; 38
    2f2c:	f0 e0       	ldi	r31, 0x00	; 0
    2f2e:	80 81       	ld	r24, Z
    2f30:	80 61       	ori	r24, 0x10	; 16
    2f32:	8c 93       	st	X, r24
//	    #elif ADC_ADJUST_RESULT == RIGHT_ADJUST
//	        Local_u8DigitalValue =  ADCL;
//	    #endif
//*/

	    Local_u8DigitalValue = ADCHL;
    2f34:	e4 e2       	ldi	r30, 0x24	; 36
    2f36:	f0 e0       	ldi	r31, 0x00	; 0
    2f38:	80 81       	ld	r24, Z
    2f3a:	91 81       	ldd	r25, Z+1	; 0x01
    2f3c:	9a 83       	std	Y+2, r25	; 0x02
    2f3e:	89 83       	std	Y+1, r24	; 0x01
	    /*Return The Digital Value*/
	    return Local_u8DigitalValue;
    2f40:	89 81       	ldd	r24, Y+1	; 0x01
    2f42:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2f44:	0f 90       	pop	r0
    2f46:	0f 90       	pop	r0
    2f48:	0f 90       	pop	r0
    2f4a:	cf 91       	pop	r28
    2f4c:	df 91       	pop	r29
    2f4e:	08 95       	ret

00002f50 <servo_angle>:
#include "SERVO.h"

#define F_CPU 8000000UL

void servo_angle(u8 angle)//0 ->180
{
    2f50:	df 93       	push	r29
    2f52:	cf 93       	push	r28
    2f54:	00 d0       	rcall	.+0      	; 0x2f56 <servo_angle+0x6>
    2f56:	0f 92       	push	r0
    2f58:	cd b7       	in	r28, 0x3d	; 61
    2f5a:	de b7       	in	r29, 0x3e	; 62
    2f5c:	8b 83       	std	Y+3, r24	; 0x03
	u16 val =  (((u32)1000*angle)/180)+1000; // 1000 ->2000
    2f5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f60:	88 2f       	mov	r24, r24
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	a0 e0       	ldi	r26, 0x00	; 0
    2f66:	b0 e0       	ldi	r27, 0x00	; 0
    2f68:	28 ee       	ldi	r18, 0xE8	; 232
    2f6a:	33 e0       	ldi	r19, 0x03	; 3
    2f6c:	40 e0       	ldi	r20, 0x00	; 0
    2f6e:	50 e0       	ldi	r21, 0x00	; 0
    2f70:	bc 01       	movw	r22, r24
    2f72:	cd 01       	movw	r24, r26
    2f74:	0e 94 84 2e 	call	0x5d08	; 0x5d08 <__mulsi3>
    2f78:	dc 01       	movw	r26, r24
    2f7a:	cb 01       	movw	r24, r22
    2f7c:	24 eb       	ldi	r18, 0xB4	; 180
    2f7e:	30 e0       	ldi	r19, 0x00	; 0
    2f80:	40 e0       	ldi	r20, 0x00	; 0
    2f82:	50 e0       	ldi	r21, 0x00	; 0
    2f84:	bc 01       	movw	r22, r24
    2f86:	cd 01       	movw	r24, r26
    2f88:	0e 94 b7 2e 	call	0x5d6e	; 0x5d6e <__udivmodsi4>
    2f8c:	da 01       	movw	r26, r20
    2f8e:	c9 01       	movw	r24, r18
    2f90:	88 51       	subi	r24, 0x18	; 24
    2f92:	9c 4f       	sbci	r25, 0xFC	; 252
    2f94:	9a 83       	std	Y+2, r25	; 0x02
    2f96:	89 83       	std	Y+1, r24	; 0x01
	vTIMER1_Compare_OCR1A(val);
    2f98:	89 81       	ldd	r24, Y+1	; 0x01
    2f9a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f9c:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <vTIMER1_Compare_OCR1A>
}
    2fa0:	0f 90       	pop	r0
    2fa2:	0f 90       	pop	r0
    2fa4:	0f 90       	pop	r0
    2fa6:	cf 91       	pop	r28
    2fa8:	df 91       	pop	r29
    2faa:	08 95       	ret

00002fac <SERVO_app>:
void SERVO_app(){
    2fac:	df 93       	push	r29
    2fae:	cf 93       	push	r28
    2fb0:	cd b7       	in	r28, 0x3d	; 61
    2fb2:	de b7       	in	r29, 0x3e	; 62

	/*DIO INIT */
	vSet_Pin_Direction(PORT_D,PIN_5,OUTPUT);
    2fb4:	83 e0       	ldi	r24, 0x03	; 3
    2fb6:	65 e0       	ldi	r22, 0x05	; 5
    2fb8:	41 e0       	ldi	r20, 0x01	; 1
    2fba:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <vSet_Pin_Direction>

	vTIMER1_INIT();
    2fbe:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <vTIMER1_INIT>
	vTIMER1_ICR1(20000);
    2fc2:	80 e2       	ldi	r24, 0x20	; 32
    2fc4:	9e e4       	ldi	r25, 0x4E	; 78
    2fc6:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <vTIMER1_ICR1>
	Timer1_OCRA1Mode(ORA1_NON_INVERTING);
    2fca:	82 e0       	ldi	r24, 0x02	; 2
    2fcc:	0e 94 81 0c 	call	0x1902	; 0x1902 <Timer1_OCRA1Mode>
	//vTIMER1_Compare_OCR1A(2000);//90
	//vTIMER1_START();
}
    2fd0:	cf 91       	pop	r28
    2fd2:	df 91       	pop	r29
    2fd4:	08 95       	ret

00002fd6 <vLCD_init>:
#include "LCD_Private.h"
#include "LCD_Config.h"


void vLCD_init(void)
{
    2fd6:	df 93       	push	r29
    2fd8:	cf 93       	push	r28
    2fda:	cd b7       	in	r28, 0x3d	; 61
    2fdc:	de b7       	in	r29, 0x3e	; 62
    2fde:	e8 97       	sbiw	r28, 0x38	; 56
    2fe0:	0f b6       	in	r0, 0x3f	; 63
    2fe2:	f8 94       	cli
    2fe4:	de bf       	out	0x3e, r29	; 62
    2fe6:	0f be       	out	0x3f, r0	; 63
    2fe8:	cd bf       	out	0x3d, r28	; 61
	/*1- initialize dio pins */
	vSet_Port_Direction(DATA_PORT,OUTPUT);
    2fea:	81 e0       	ldi	r24, 0x01	; 1
    2fec:	61 e0       	ldi	r22, 0x01	; 1
    2fee:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <vSet_Port_Direction>

	vSet_Pin_Direction(RS_PORT,RS_PIN,OUTPUT);
    2ff2:	83 e0       	ldi	r24, 0x03	; 3
    2ff4:	62 e0       	ldi	r22, 0x02	; 2
    2ff6:	41 e0       	ldi	r20, 0x01	; 1
    2ff8:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <vSet_Pin_Direction>
	vSet_Pin_Direction(R_W_PORT,R_W_PIN,OUTPUT);
    2ffc:	83 e0       	ldi	r24, 0x03	; 3
    2ffe:	63 e0       	ldi	r22, 0x03	; 3
    3000:	41 e0       	ldi	r20, 0x01	; 1
    3002:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <vSet_Pin_Direction>
	vSet_Pin_Direction(E_PORT,E_PIN,OUTPUT);
    3006:	83 e0       	ldi	r24, 0x03	; 3
    3008:	64 e0       	ldi	r22, 0x04	; 4
    300a:	41 e0       	ldi	r20, 0x01	; 1
    300c:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <vSet_Pin_Direction>
    3010:	80 e0       	ldi	r24, 0x00	; 0
    3012:	90 e0       	ldi	r25, 0x00	; 0
    3014:	a0 ef       	ldi	r26, 0xF0	; 240
    3016:	b1 e4       	ldi	r27, 0x41	; 65
    3018:	8d ab       	std	Y+53, r24	; 0x35
    301a:	9e ab       	std	Y+54, r25	; 0x36
    301c:	af ab       	std	Y+55, r26	; 0x37
    301e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3020:	6d a9       	ldd	r22, Y+53	; 0x35
    3022:	7e a9       	ldd	r23, Y+54	; 0x36
    3024:	8f a9       	ldd	r24, Y+55	; 0x37
    3026:	98 ad       	ldd	r25, Y+56	; 0x38
    3028:	20 e0       	ldi	r18, 0x00	; 0
    302a:	30 e0       	ldi	r19, 0x00	; 0
    302c:	4a ef       	ldi	r20, 0xFA	; 250
    302e:	54 e4       	ldi	r21, 0x44	; 68
    3030:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3034:	dc 01       	movw	r26, r24
    3036:	cb 01       	movw	r24, r22
    3038:	89 ab       	std	Y+49, r24	; 0x31
    303a:	9a ab       	std	Y+50, r25	; 0x32
    303c:	ab ab       	std	Y+51, r26	; 0x33
    303e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3040:	69 a9       	ldd	r22, Y+49	; 0x31
    3042:	7a a9       	ldd	r23, Y+50	; 0x32
    3044:	8b a9       	ldd	r24, Y+51	; 0x33
    3046:	9c a9       	ldd	r25, Y+52	; 0x34
    3048:	20 e0       	ldi	r18, 0x00	; 0
    304a:	30 e0       	ldi	r19, 0x00	; 0
    304c:	40 e8       	ldi	r20, 0x80	; 128
    304e:	5f e3       	ldi	r21, 0x3F	; 63
    3050:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3054:	88 23       	and	r24, r24
    3056:	2c f4       	brge	.+10     	; 0x3062 <vLCD_init+0x8c>
		__ticks = 1;
    3058:	81 e0       	ldi	r24, 0x01	; 1
    305a:	90 e0       	ldi	r25, 0x00	; 0
    305c:	98 ab       	std	Y+48, r25	; 0x30
    305e:	8f a7       	std	Y+47, r24	; 0x2f
    3060:	3f c0       	rjmp	.+126    	; 0x30e0 <vLCD_init+0x10a>
	else if (__tmp > 65535)
    3062:	69 a9       	ldd	r22, Y+49	; 0x31
    3064:	7a a9       	ldd	r23, Y+50	; 0x32
    3066:	8b a9       	ldd	r24, Y+51	; 0x33
    3068:	9c a9       	ldd	r25, Y+52	; 0x34
    306a:	20 e0       	ldi	r18, 0x00	; 0
    306c:	3f ef       	ldi	r19, 0xFF	; 255
    306e:	4f e7       	ldi	r20, 0x7F	; 127
    3070:	57 e4       	ldi	r21, 0x47	; 71
    3072:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3076:	18 16       	cp	r1, r24
    3078:	4c f5       	brge	.+82     	; 0x30cc <vLCD_init+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    307a:	6d a9       	ldd	r22, Y+53	; 0x35
    307c:	7e a9       	ldd	r23, Y+54	; 0x36
    307e:	8f a9       	ldd	r24, Y+55	; 0x37
    3080:	98 ad       	ldd	r25, Y+56	; 0x38
    3082:	20 e0       	ldi	r18, 0x00	; 0
    3084:	30 e0       	ldi	r19, 0x00	; 0
    3086:	40 e2       	ldi	r20, 0x20	; 32
    3088:	51 e4       	ldi	r21, 0x41	; 65
    308a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    308e:	dc 01       	movw	r26, r24
    3090:	cb 01       	movw	r24, r22
    3092:	bc 01       	movw	r22, r24
    3094:	cd 01       	movw	r24, r26
    3096:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    309a:	dc 01       	movw	r26, r24
    309c:	cb 01       	movw	r24, r22
    309e:	98 ab       	std	Y+48, r25	; 0x30
    30a0:	8f a7       	std	Y+47, r24	; 0x2f
    30a2:	0f c0       	rjmp	.+30     	; 0x30c2 <vLCD_init+0xec>
    30a4:	88 ec       	ldi	r24, 0xC8	; 200
    30a6:	90 e0       	ldi	r25, 0x00	; 0
    30a8:	9e a7       	std	Y+46, r25	; 0x2e
    30aa:	8d a7       	std	Y+45, r24	; 0x2d
    30ac:	8d a5       	ldd	r24, Y+45	; 0x2d
    30ae:	9e a5       	ldd	r25, Y+46	; 0x2e
    30b0:	01 97       	sbiw	r24, 0x01	; 1
    30b2:	f1 f7       	brne	.-4      	; 0x30b0 <vLCD_init+0xda>
    30b4:	9e a7       	std	Y+46, r25	; 0x2e
    30b6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    30ba:	98 a9       	ldd	r25, Y+48	; 0x30
    30bc:	01 97       	sbiw	r24, 0x01	; 1
    30be:	98 ab       	std	Y+48, r25	; 0x30
    30c0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    30c4:	98 a9       	ldd	r25, Y+48	; 0x30
    30c6:	00 97       	sbiw	r24, 0x00	; 0
    30c8:	69 f7       	brne	.-38     	; 0x30a4 <vLCD_init+0xce>
    30ca:	14 c0       	rjmp	.+40     	; 0x30f4 <vLCD_init+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30cc:	69 a9       	ldd	r22, Y+49	; 0x31
    30ce:	7a a9       	ldd	r23, Y+50	; 0x32
    30d0:	8b a9       	ldd	r24, Y+51	; 0x33
    30d2:	9c a9       	ldd	r25, Y+52	; 0x34
    30d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30d8:	dc 01       	movw	r26, r24
    30da:	cb 01       	movw	r24, r22
    30dc:	98 ab       	std	Y+48, r25	; 0x30
    30de:	8f a7       	std	Y+47, r24	; 0x2f
    30e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    30e2:	98 a9       	ldd	r25, Y+48	; 0x30
    30e4:	9c a7       	std	Y+44, r25	; 0x2c
    30e6:	8b a7       	std	Y+43, r24	; 0x2b
    30e8:	8b a5       	ldd	r24, Y+43	; 0x2b
    30ea:	9c a5       	ldd	r25, Y+44	; 0x2c
    30ec:	01 97       	sbiw	r24, 0x01	; 1
    30ee:	f1 f7       	brne	.-4      	; 0x30ec <vLCD_init+0x116>
    30f0:	9c a7       	std	Y+44, r25	; 0x2c
    30f2:	8b a7       	std	Y+43, r24	; 0x2b
	/*3- send command of function set*/
	/*
	 *
	 *
	 * N = 1, F = 0*/
	vLCD_sendCOMMAND(0b00111000);
    30f4:	88 e3       	ldi	r24, 0x38	; 56
    30f6:	0e 94 e5 19 	call	0x33ca	; 0x33ca <vLCD_sendCOMMAND>
    30fa:	80 e0       	ldi	r24, 0x00	; 0
    30fc:	90 e0       	ldi	r25, 0x00	; 0
    30fe:	a0 e8       	ldi	r26, 0x80	; 128
    3100:	bf e3       	ldi	r27, 0x3F	; 63
    3102:	8f a3       	std	Y+39, r24	; 0x27
    3104:	98 a7       	std	Y+40, r25	; 0x28
    3106:	a9 a7       	std	Y+41, r26	; 0x29
    3108:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    310a:	6f a1       	ldd	r22, Y+39	; 0x27
    310c:	78 a5       	ldd	r23, Y+40	; 0x28
    310e:	89 a5       	ldd	r24, Y+41	; 0x29
    3110:	9a a5       	ldd	r25, Y+42	; 0x2a
    3112:	20 e0       	ldi	r18, 0x00	; 0
    3114:	30 e0       	ldi	r19, 0x00	; 0
    3116:	4a ef       	ldi	r20, 0xFA	; 250
    3118:	54 e4       	ldi	r21, 0x44	; 68
    311a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    311e:	dc 01       	movw	r26, r24
    3120:	cb 01       	movw	r24, r22
    3122:	8b a3       	std	Y+35, r24	; 0x23
    3124:	9c a3       	std	Y+36, r25	; 0x24
    3126:	ad a3       	std	Y+37, r26	; 0x25
    3128:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    312a:	6b a1       	ldd	r22, Y+35	; 0x23
    312c:	7c a1       	ldd	r23, Y+36	; 0x24
    312e:	8d a1       	ldd	r24, Y+37	; 0x25
    3130:	9e a1       	ldd	r25, Y+38	; 0x26
    3132:	20 e0       	ldi	r18, 0x00	; 0
    3134:	30 e0       	ldi	r19, 0x00	; 0
    3136:	40 e8       	ldi	r20, 0x80	; 128
    3138:	5f e3       	ldi	r21, 0x3F	; 63
    313a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    313e:	88 23       	and	r24, r24
    3140:	2c f4       	brge	.+10     	; 0x314c <vLCD_init+0x176>
		__ticks = 1;
    3142:	81 e0       	ldi	r24, 0x01	; 1
    3144:	90 e0       	ldi	r25, 0x00	; 0
    3146:	9a a3       	std	Y+34, r25	; 0x22
    3148:	89 a3       	std	Y+33, r24	; 0x21
    314a:	3f c0       	rjmp	.+126    	; 0x31ca <vLCD_init+0x1f4>
	else if (__tmp > 65535)
    314c:	6b a1       	ldd	r22, Y+35	; 0x23
    314e:	7c a1       	ldd	r23, Y+36	; 0x24
    3150:	8d a1       	ldd	r24, Y+37	; 0x25
    3152:	9e a1       	ldd	r25, Y+38	; 0x26
    3154:	20 e0       	ldi	r18, 0x00	; 0
    3156:	3f ef       	ldi	r19, 0xFF	; 255
    3158:	4f e7       	ldi	r20, 0x7F	; 127
    315a:	57 e4       	ldi	r21, 0x47	; 71
    315c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3160:	18 16       	cp	r1, r24
    3162:	4c f5       	brge	.+82     	; 0x31b6 <vLCD_init+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3164:	6f a1       	ldd	r22, Y+39	; 0x27
    3166:	78 a5       	ldd	r23, Y+40	; 0x28
    3168:	89 a5       	ldd	r24, Y+41	; 0x29
    316a:	9a a5       	ldd	r25, Y+42	; 0x2a
    316c:	20 e0       	ldi	r18, 0x00	; 0
    316e:	30 e0       	ldi	r19, 0x00	; 0
    3170:	40 e2       	ldi	r20, 0x20	; 32
    3172:	51 e4       	ldi	r21, 0x41	; 65
    3174:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3178:	dc 01       	movw	r26, r24
    317a:	cb 01       	movw	r24, r22
    317c:	bc 01       	movw	r22, r24
    317e:	cd 01       	movw	r24, r26
    3180:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3184:	dc 01       	movw	r26, r24
    3186:	cb 01       	movw	r24, r22
    3188:	9a a3       	std	Y+34, r25	; 0x22
    318a:	89 a3       	std	Y+33, r24	; 0x21
    318c:	0f c0       	rjmp	.+30     	; 0x31ac <vLCD_init+0x1d6>
    318e:	88 ec       	ldi	r24, 0xC8	; 200
    3190:	90 e0       	ldi	r25, 0x00	; 0
    3192:	98 a3       	std	Y+32, r25	; 0x20
    3194:	8f 8f       	std	Y+31, r24	; 0x1f
    3196:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3198:	98 a1       	ldd	r25, Y+32	; 0x20
    319a:	01 97       	sbiw	r24, 0x01	; 1
    319c:	f1 f7       	brne	.-4      	; 0x319a <vLCD_init+0x1c4>
    319e:	98 a3       	std	Y+32, r25	; 0x20
    31a0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31a2:	89 a1       	ldd	r24, Y+33	; 0x21
    31a4:	9a a1       	ldd	r25, Y+34	; 0x22
    31a6:	01 97       	sbiw	r24, 0x01	; 1
    31a8:	9a a3       	std	Y+34, r25	; 0x22
    31aa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31ac:	89 a1       	ldd	r24, Y+33	; 0x21
    31ae:	9a a1       	ldd	r25, Y+34	; 0x22
    31b0:	00 97       	sbiw	r24, 0x00	; 0
    31b2:	69 f7       	brne	.-38     	; 0x318e <vLCD_init+0x1b8>
    31b4:	14 c0       	rjmp	.+40     	; 0x31de <vLCD_init+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31b6:	6b a1       	ldd	r22, Y+35	; 0x23
    31b8:	7c a1       	ldd	r23, Y+36	; 0x24
    31ba:	8d a1       	ldd	r24, Y+37	; 0x25
    31bc:	9e a1       	ldd	r25, Y+38	; 0x26
    31be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31c2:	dc 01       	movw	r26, r24
    31c4:	cb 01       	movw	r24, r22
    31c6:	9a a3       	std	Y+34, r25	; 0x22
    31c8:	89 a3       	std	Y+33, r24	; 0x21
    31ca:	89 a1       	ldd	r24, Y+33	; 0x21
    31cc:	9a a1       	ldd	r25, Y+34	; 0x22
    31ce:	9e 8f       	std	Y+30, r25	; 0x1e
    31d0:	8d 8f       	std	Y+29, r24	; 0x1d
    31d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31d4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    31d6:	01 97       	sbiw	r24, 0x01	; 1
    31d8:	f1 f7       	brne	.-4      	; 0x31d6 <vLCD_init+0x200>
    31da:	9e 8f       	std	Y+30, r25	; 0x1e
    31dc:	8d 8f       	std	Y+29, r24	; 0x1d

	/*4- delay 40us*/
	_delay_ms(1);

	/*5- send command of Display ON/OFF control*/
	vLCD_sendCOMMAND(0b00001111);
    31de:	8f e0       	ldi	r24, 0x0F	; 15
    31e0:	0e 94 e5 19 	call	0x33ca	; 0x33ca <vLCD_sendCOMMAND>
    31e4:	80 e0       	ldi	r24, 0x00	; 0
    31e6:	90 e0       	ldi	r25, 0x00	; 0
    31e8:	a0 e8       	ldi	r26, 0x80	; 128
    31ea:	bf e3       	ldi	r27, 0x3F	; 63
    31ec:	89 8f       	std	Y+25, r24	; 0x19
    31ee:	9a 8f       	std	Y+26, r25	; 0x1a
    31f0:	ab 8f       	std	Y+27, r26	; 0x1b
    31f2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31f4:	69 8d       	ldd	r22, Y+25	; 0x19
    31f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31fc:	20 e0       	ldi	r18, 0x00	; 0
    31fe:	30 e0       	ldi	r19, 0x00	; 0
    3200:	4a ef       	ldi	r20, 0xFA	; 250
    3202:	54 e4       	ldi	r21, 0x44	; 68
    3204:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3208:	dc 01       	movw	r26, r24
    320a:	cb 01       	movw	r24, r22
    320c:	8d 8b       	std	Y+21, r24	; 0x15
    320e:	9e 8b       	std	Y+22, r25	; 0x16
    3210:	af 8b       	std	Y+23, r26	; 0x17
    3212:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3214:	6d 89       	ldd	r22, Y+21	; 0x15
    3216:	7e 89       	ldd	r23, Y+22	; 0x16
    3218:	8f 89       	ldd	r24, Y+23	; 0x17
    321a:	98 8d       	ldd	r25, Y+24	; 0x18
    321c:	20 e0       	ldi	r18, 0x00	; 0
    321e:	30 e0       	ldi	r19, 0x00	; 0
    3220:	40 e8       	ldi	r20, 0x80	; 128
    3222:	5f e3       	ldi	r21, 0x3F	; 63
    3224:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3228:	88 23       	and	r24, r24
    322a:	2c f4       	brge	.+10     	; 0x3236 <vLCD_init+0x260>
		__ticks = 1;
    322c:	81 e0       	ldi	r24, 0x01	; 1
    322e:	90 e0       	ldi	r25, 0x00	; 0
    3230:	9c 8b       	std	Y+20, r25	; 0x14
    3232:	8b 8b       	std	Y+19, r24	; 0x13
    3234:	3f c0       	rjmp	.+126    	; 0x32b4 <vLCD_init+0x2de>
	else if (__tmp > 65535)
    3236:	6d 89       	ldd	r22, Y+21	; 0x15
    3238:	7e 89       	ldd	r23, Y+22	; 0x16
    323a:	8f 89       	ldd	r24, Y+23	; 0x17
    323c:	98 8d       	ldd	r25, Y+24	; 0x18
    323e:	20 e0       	ldi	r18, 0x00	; 0
    3240:	3f ef       	ldi	r19, 0xFF	; 255
    3242:	4f e7       	ldi	r20, 0x7F	; 127
    3244:	57 e4       	ldi	r21, 0x47	; 71
    3246:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    324a:	18 16       	cp	r1, r24
    324c:	4c f5       	brge	.+82     	; 0x32a0 <vLCD_init+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    324e:	69 8d       	ldd	r22, Y+25	; 0x19
    3250:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3252:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3254:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3256:	20 e0       	ldi	r18, 0x00	; 0
    3258:	30 e0       	ldi	r19, 0x00	; 0
    325a:	40 e2       	ldi	r20, 0x20	; 32
    325c:	51 e4       	ldi	r21, 0x41	; 65
    325e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3262:	dc 01       	movw	r26, r24
    3264:	cb 01       	movw	r24, r22
    3266:	bc 01       	movw	r22, r24
    3268:	cd 01       	movw	r24, r26
    326a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    326e:	dc 01       	movw	r26, r24
    3270:	cb 01       	movw	r24, r22
    3272:	9c 8b       	std	Y+20, r25	; 0x14
    3274:	8b 8b       	std	Y+19, r24	; 0x13
    3276:	0f c0       	rjmp	.+30     	; 0x3296 <vLCD_init+0x2c0>
    3278:	88 ec       	ldi	r24, 0xC8	; 200
    327a:	90 e0       	ldi	r25, 0x00	; 0
    327c:	9a 8b       	std	Y+18, r25	; 0x12
    327e:	89 8b       	std	Y+17, r24	; 0x11
    3280:	89 89       	ldd	r24, Y+17	; 0x11
    3282:	9a 89       	ldd	r25, Y+18	; 0x12
    3284:	01 97       	sbiw	r24, 0x01	; 1
    3286:	f1 f7       	brne	.-4      	; 0x3284 <vLCD_init+0x2ae>
    3288:	9a 8b       	std	Y+18, r25	; 0x12
    328a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    328c:	8b 89       	ldd	r24, Y+19	; 0x13
    328e:	9c 89       	ldd	r25, Y+20	; 0x14
    3290:	01 97       	sbiw	r24, 0x01	; 1
    3292:	9c 8b       	std	Y+20, r25	; 0x14
    3294:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3296:	8b 89       	ldd	r24, Y+19	; 0x13
    3298:	9c 89       	ldd	r25, Y+20	; 0x14
    329a:	00 97       	sbiw	r24, 0x00	; 0
    329c:	69 f7       	brne	.-38     	; 0x3278 <vLCD_init+0x2a2>
    329e:	14 c0       	rjmp	.+40     	; 0x32c8 <vLCD_init+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32a0:	6d 89       	ldd	r22, Y+21	; 0x15
    32a2:	7e 89       	ldd	r23, Y+22	; 0x16
    32a4:	8f 89       	ldd	r24, Y+23	; 0x17
    32a6:	98 8d       	ldd	r25, Y+24	; 0x18
    32a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ac:	dc 01       	movw	r26, r24
    32ae:	cb 01       	movw	r24, r22
    32b0:	9c 8b       	std	Y+20, r25	; 0x14
    32b2:	8b 8b       	std	Y+19, r24	; 0x13
    32b4:	8b 89       	ldd	r24, Y+19	; 0x13
    32b6:	9c 89       	ldd	r25, Y+20	; 0x14
    32b8:	98 8b       	std	Y+16, r25	; 0x10
    32ba:	8f 87       	std	Y+15, r24	; 0x0f
    32bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    32be:	98 89       	ldd	r25, Y+16	; 0x10
    32c0:	01 97       	sbiw	r24, 0x01	; 1
    32c2:	f1 f7       	brne	.-4      	; 0x32c0 <vLCD_init+0x2ea>
    32c4:	98 8b       	std	Y+16, r25	; 0x10
    32c6:	8f 87       	std	Y+15, r24	; 0x0f
	/*6- delay 40us*/
	_delay_ms(1);


	/*7- send command od Display CLear*/
	vLCD_sendCOMMAND(0b00000001);
    32c8:	81 e0       	ldi	r24, 0x01	; 1
    32ca:	0e 94 e5 19 	call	0x33ca	; 0x33ca <vLCD_sendCOMMAND>
    32ce:	80 e0       	ldi	r24, 0x00	; 0
    32d0:	90 e0       	ldi	r25, 0x00	; 0
    32d2:	a0 e4       	ldi	r26, 0x40	; 64
    32d4:	b0 e4       	ldi	r27, 0x40	; 64
    32d6:	8b 87       	std	Y+11, r24	; 0x0b
    32d8:	9c 87       	std	Y+12, r25	; 0x0c
    32da:	ad 87       	std	Y+13, r26	; 0x0d
    32dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32de:	6b 85       	ldd	r22, Y+11	; 0x0b
    32e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    32e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    32e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    32e6:	20 e0       	ldi	r18, 0x00	; 0
    32e8:	30 e0       	ldi	r19, 0x00	; 0
    32ea:	4a ef       	ldi	r20, 0xFA	; 250
    32ec:	54 e4       	ldi	r21, 0x44	; 68
    32ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32f2:	dc 01       	movw	r26, r24
    32f4:	cb 01       	movw	r24, r22
    32f6:	8f 83       	std	Y+7, r24	; 0x07
    32f8:	98 87       	std	Y+8, r25	; 0x08
    32fa:	a9 87       	std	Y+9, r26	; 0x09
    32fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32fe:	6f 81       	ldd	r22, Y+7	; 0x07
    3300:	78 85       	ldd	r23, Y+8	; 0x08
    3302:	89 85       	ldd	r24, Y+9	; 0x09
    3304:	9a 85       	ldd	r25, Y+10	; 0x0a
    3306:	20 e0       	ldi	r18, 0x00	; 0
    3308:	30 e0       	ldi	r19, 0x00	; 0
    330a:	40 e8       	ldi	r20, 0x80	; 128
    330c:	5f e3       	ldi	r21, 0x3F	; 63
    330e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3312:	88 23       	and	r24, r24
    3314:	2c f4       	brge	.+10     	; 0x3320 <vLCD_init+0x34a>
		__ticks = 1;
    3316:	81 e0       	ldi	r24, 0x01	; 1
    3318:	90 e0       	ldi	r25, 0x00	; 0
    331a:	9e 83       	std	Y+6, r25	; 0x06
    331c:	8d 83       	std	Y+5, r24	; 0x05
    331e:	3f c0       	rjmp	.+126    	; 0x339e <vLCD_init+0x3c8>
	else if (__tmp > 65535)
    3320:	6f 81       	ldd	r22, Y+7	; 0x07
    3322:	78 85       	ldd	r23, Y+8	; 0x08
    3324:	89 85       	ldd	r24, Y+9	; 0x09
    3326:	9a 85       	ldd	r25, Y+10	; 0x0a
    3328:	20 e0       	ldi	r18, 0x00	; 0
    332a:	3f ef       	ldi	r19, 0xFF	; 255
    332c:	4f e7       	ldi	r20, 0x7F	; 127
    332e:	57 e4       	ldi	r21, 0x47	; 71
    3330:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3334:	18 16       	cp	r1, r24
    3336:	4c f5       	brge	.+82     	; 0x338a <vLCD_init+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3338:	6b 85       	ldd	r22, Y+11	; 0x0b
    333a:	7c 85       	ldd	r23, Y+12	; 0x0c
    333c:	8d 85       	ldd	r24, Y+13	; 0x0d
    333e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3340:	20 e0       	ldi	r18, 0x00	; 0
    3342:	30 e0       	ldi	r19, 0x00	; 0
    3344:	40 e2       	ldi	r20, 0x20	; 32
    3346:	51 e4       	ldi	r21, 0x41	; 65
    3348:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    334c:	dc 01       	movw	r26, r24
    334e:	cb 01       	movw	r24, r22
    3350:	bc 01       	movw	r22, r24
    3352:	cd 01       	movw	r24, r26
    3354:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3358:	dc 01       	movw	r26, r24
    335a:	cb 01       	movw	r24, r22
    335c:	9e 83       	std	Y+6, r25	; 0x06
    335e:	8d 83       	std	Y+5, r24	; 0x05
    3360:	0f c0       	rjmp	.+30     	; 0x3380 <vLCD_init+0x3aa>
    3362:	88 ec       	ldi	r24, 0xC8	; 200
    3364:	90 e0       	ldi	r25, 0x00	; 0
    3366:	9c 83       	std	Y+4, r25	; 0x04
    3368:	8b 83       	std	Y+3, r24	; 0x03
    336a:	8b 81       	ldd	r24, Y+3	; 0x03
    336c:	9c 81       	ldd	r25, Y+4	; 0x04
    336e:	01 97       	sbiw	r24, 0x01	; 1
    3370:	f1 f7       	brne	.-4      	; 0x336e <vLCD_init+0x398>
    3372:	9c 83       	std	Y+4, r25	; 0x04
    3374:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3376:	8d 81       	ldd	r24, Y+5	; 0x05
    3378:	9e 81       	ldd	r25, Y+6	; 0x06
    337a:	01 97       	sbiw	r24, 0x01	; 1
    337c:	9e 83       	std	Y+6, r25	; 0x06
    337e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3380:	8d 81       	ldd	r24, Y+5	; 0x05
    3382:	9e 81       	ldd	r25, Y+6	; 0x06
    3384:	00 97       	sbiw	r24, 0x00	; 0
    3386:	69 f7       	brne	.-38     	; 0x3362 <vLCD_init+0x38c>
    3388:	14 c0       	rjmp	.+40     	; 0x33b2 <vLCD_init+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    338a:	6f 81       	ldd	r22, Y+7	; 0x07
    338c:	78 85       	ldd	r23, Y+8	; 0x08
    338e:	89 85       	ldd	r24, Y+9	; 0x09
    3390:	9a 85       	ldd	r25, Y+10	; 0x0a
    3392:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3396:	dc 01       	movw	r26, r24
    3398:	cb 01       	movw	r24, r22
    339a:	9e 83       	std	Y+6, r25	; 0x06
    339c:	8d 83       	std	Y+5, r24	; 0x05
    339e:	8d 81       	ldd	r24, Y+5	; 0x05
    33a0:	9e 81       	ldd	r25, Y+6	; 0x06
    33a2:	9a 83       	std	Y+2, r25	; 0x02
    33a4:	89 83       	std	Y+1, r24	; 0x01
    33a6:	89 81       	ldd	r24, Y+1	; 0x01
    33a8:	9a 81       	ldd	r25, Y+2	; 0x02
    33aa:	01 97       	sbiw	r24, 0x01	; 1
    33ac:	f1 f7       	brne	.-4      	; 0x33aa <vLCD_init+0x3d4>
    33ae:	9a 83       	std	Y+2, r25	; 0x02
    33b0:	89 83       	std	Y+1, r24	; 0x01
	/*8- delay 2ms*/
	_delay_ms(3);


	/*9- send command entry mode settings*/
	vLCD_sendCOMMAND(0b00000110);
    33b2:	86 e0       	ldi	r24, 0x06	; 6
    33b4:	0e 94 e5 19 	call	0x33ca	; 0x33ca <vLCD_sendCOMMAND>

}
    33b8:	e8 96       	adiw	r28, 0x38	; 56
    33ba:	0f b6       	in	r0, 0x3f	; 63
    33bc:	f8 94       	cli
    33be:	de bf       	out	0x3e, r29	; 62
    33c0:	0f be       	out	0x3f, r0	; 63
    33c2:	cd bf       	out	0x3d, r28	; 61
    33c4:	cf 91       	pop	r28
    33c6:	df 91       	pop	r29
    33c8:	08 95       	ret

000033ca <vLCD_sendCOMMAND>:

void vLCD_sendCOMMAND(u8 command)
{
    33ca:	df 93       	push	r29
    33cc:	cf 93       	push	r28
    33ce:	cd b7       	in	r28, 0x3d	; 61
    33d0:	de b7       	in	r29, 0x3e	; 62
    33d2:	6d 97       	sbiw	r28, 0x1d	; 29
    33d4:	0f b6       	in	r0, 0x3f	; 63
    33d6:	f8 94       	cli
    33d8:	de bf       	out	0x3e, r29	; 62
    33da:	0f be       	out	0x3f, r0	; 63
    33dc:	cd bf       	out	0x3d, r28	; 61
    33de:	8d 8f       	std	Y+29, r24	; 0x1d
	/*1- set RS pin to 0*/
	vSet_Pin_OUTPUTvalue(RS_PORT,RS_PIN,LOW);
    33e0:	83 e0       	ldi	r24, 0x03	; 3
    33e2:	62 e0       	ldi	r22, 0x02	; 2
    33e4:	40 e0       	ldi	r20, 0x00	; 0
    33e6:	0e 94 64 14 	call	0x28c8	; 0x28c8 <vSet_Pin_OUTPUTvalue>

	/*2- set R/W pin to 0*/
	vSet_Pin_OUTPUTvalue(R_W_PORT,R_W_PIN,LOW);
    33ea:	83 e0       	ldi	r24, 0x03	; 3
    33ec:	63 e0       	ldi	r22, 0x03	; 3
    33ee:	40 e0       	ldi	r20, 0x00	; 0
    33f0:	0e 94 64 14 	call	0x28c8	; 0x28c8 <vSet_Pin_OUTPUTvalue>


	/*3- add command to data port to be sent*/
	vSet_Port_OUTPUTvalue(DATA_PORT,command);
    33f4:	81 e0       	ldi	r24, 0x01	; 1
    33f6:	6d 8d       	ldd	r22, Y+29	; 0x1d
    33f8:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <vSet_Port_OUTPUTvalue>


	/*4- trigger enable pin*/

	vSet_Pin_OUTPUTvalue(E_PORT,E_PIN,HIGH);
    33fc:	83 e0       	ldi	r24, 0x03	; 3
    33fe:	64 e0       	ldi	r22, 0x04	; 4
    3400:	41 e0       	ldi	r20, 0x01	; 1
    3402:	0e 94 64 14 	call	0x28c8	; 0x28c8 <vSet_Pin_OUTPUTvalue>
    3406:	80 e0       	ldi	r24, 0x00	; 0
    3408:	90 e0       	ldi	r25, 0x00	; 0
    340a:	a0 e8       	ldi	r26, 0x80	; 128
    340c:	bf e3       	ldi	r27, 0x3F	; 63
    340e:	89 8f       	std	Y+25, r24	; 0x19
    3410:	9a 8f       	std	Y+26, r25	; 0x1a
    3412:	ab 8f       	std	Y+27, r26	; 0x1b
    3414:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3416:	69 8d       	ldd	r22, Y+25	; 0x19
    3418:	7a 8d       	ldd	r23, Y+26	; 0x1a
    341a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    341c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    341e:	20 e0       	ldi	r18, 0x00	; 0
    3420:	30 e0       	ldi	r19, 0x00	; 0
    3422:	4a ef       	ldi	r20, 0xFA	; 250
    3424:	54 e4       	ldi	r21, 0x44	; 68
    3426:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    342a:	dc 01       	movw	r26, r24
    342c:	cb 01       	movw	r24, r22
    342e:	8d 8b       	std	Y+21, r24	; 0x15
    3430:	9e 8b       	std	Y+22, r25	; 0x16
    3432:	af 8b       	std	Y+23, r26	; 0x17
    3434:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3436:	6d 89       	ldd	r22, Y+21	; 0x15
    3438:	7e 89       	ldd	r23, Y+22	; 0x16
    343a:	8f 89       	ldd	r24, Y+23	; 0x17
    343c:	98 8d       	ldd	r25, Y+24	; 0x18
    343e:	20 e0       	ldi	r18, 0x00	; 0
    3440:	30 e0       	ldi	r19, 0x00	; 0
    3442:	40 e8       	ldi	r20, 0x80	; 128
    3444:	5f e3       	ldi	r21, 0x3F	; 63
    3446:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    344a:	88 23       	and	r24, r24
    344c:	2c f4       	brge	.+10     	; 0x3458 <vLCD_sendCOMMAND+0x8e>
		__ticks = 1;
    344e:	81 e0       	ldi	r24, 0x01	; 1
    3450:	90 e0       	ldi	r25, 0x00	; 0
    3452:	9c 8b       	std	Y+20, r25	; 0x14
    3454:	8b 8b       	std	Y+19, r24	; 0x13
    3456:	3f c0       	rjmp	.+126    	; 0x34d6 <vLCD_sendCOMMAND+0x10c>
	else if (__tmp > 65535)
    3458:	6d 89       	ldd	r22, Y+21	; 0x15
    345a:	7e 89       	ldd	r23, Y+22	; 0x16
    345c:	8f 89       	ldd	r24, Y+23	; 0x17
    345e:	98 8d       	ldd	r25, Y+24	; 0x18
    3460:	20 e0       	ldi	r18, 0x00	; 0
    3462:	3f ef       	ldi	r19, 0xFF	; 255
    3464:	4f e7       	ldi	r20, 0x7F	; 127
    3466:	57 e4       	ldi	r21, 0x47	; 71
    3468:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    346c:	18 16       	cp	r1, r24
    346e:	4c f5       	brge	.+82     	; 0x34c2 <vLCD_sendCOMMAND+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3470:	69 8d       	ldd	r22, Y+25	; 0x19
    3472:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3474:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3476:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3478:	20 e0       	ldi	r18, 0x00	; 0
    347a:	30 e0       	ldi	r19, 0x00	; 0
    347c:	40 e2       	ldi	r20, 0x20	; 32
    347e:	51 e4       	ldi	r21, 0x41	; 65
    3480:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3484:	dc 01       	movw	r26, r24
    3486:	cb 01       	movw	r24, r22
    3488:	bc 01       	movw	r22, r24
    348a:	cd 01       	movw	r24, r26
    348c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3490:	dc 01       	movw	r26, r24
    3492:	cb 01       	movw	r24, r22
    3494:	9c 8b       	std	Y+20, r25	; 0x14
    3496:	8b 8b       	std	Y+19, r24	; 0x13
    3498:	0f c0       	rjmp	.+30     	; 0x34b8 <vLCD_sendCOMMAND+0xee>
    349a:	88 ec       	ldi	r24, 0xC8	; 200
    349c:	90 e0       	ldi	r25, 0x00	; 0
    349e:	9a 8b       	std	Y+18, r25	; 0x12
    34a0:	89 8b       	std	Y+17, r24	; 0x11
    34a2:	89 89       	ldd	r24, Y+17	; 0x11
    34a4:	9a 89       	ldd	r25, Y+18	; 0x12
    34a6:	01 97       	sbiw	r24, 0x01	; 1
    34a8:	f1 f7       	brne	.-4      	; 0x34a6 <vLCD_sendCOMMAND+0xdc>
    34aa:	9a 8b       	std	Y+18, r25	; 0x12
    34ac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34ae:	8b 89       	ldd	r24, Y+19	; 0x13
    34b0:	9c 89       	ldd	r25, Y+20	; 0x14
    34b2:	01 97       	sbiw	r24, 0x01	; 1
    34b4:	9c 8b       	std	Y+20, r25	; 0x14
    34b6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34b8:	8b 89       	ldd	r24, Y+19	; 0x13
    34ba:	9c 89       	ldd	r25, Y+20	; 0x14
    34bc:	00 97       	sbiw	r24, 0x00	; 0
    34be:	69 f7       	brne	.-38     	; 0x349a <vLCD_sendCOMMAND+0xd0>
    34c0:	14 c0       	rjmp	.+40     	; 0x34ea <vLCD_sendCOMMAND+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34c2:	6d 89       	ldd	r22, Y+21	; 0x15
    34c4:	7e 89       	ldd	r23, Y+22	; 0x16
    34c6:	8f 89       	ldd	r24, Y+23	; 0x17
    34c8:	98 8d       	ldd	r25, Y+24	; 0x18
    34ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34ce:	dc 01       	movw	r26, r24
    34d0:	cb 01       	movw	r24, r22
    34d2:	9c 8b       	std	Y+20, r25	; 0x14
    34d4:	8b 8b       	std	Y+19, r24	; 0x13
    34d6:	8b 89       	ldd	r24, Y+19	; 0x13
    34d8:	9c 89       	ldd	r25, Y+20	; 0x14
    34da:	98 8b       	std	Y+16, r25	; 0x10
    34dc:	8f 87       	std	Y+15, r24	; 0x0f
    34de:	8f 85       	ldd	r24, Y+15	; 0x0f
    34e0:	98 89       	ldd	r25, Y+16	; 0x10
    34e2:	01 97       	sbiw	r24, 0x01	; 1
    34e4:	f1 f7       	brne	.-4      	; 0x34e2 <vLCD_sendCOMMAND+0x118>
    34e6:	98 8b       	std	Y+16, r25	; 0x10
    34e8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	vSet_Pin_OUTPUTvalue(E_PORT,E_PIN,LOW);
    34ea:	83 e0       	ldi	r24, 0x03	; 3
    34ec:	64 e0       	ldi	r22, 0x04	; 4
    34ee:	40 e0       	ldi	r20, 0x00	; 0
    34f0:	0e 94 64 14 	call	0x28c8	; 0x28c8 <vSet_Pin_OUTPUTvalue>
    34f4:	80 e0       	ldi	r24, 0x00	; 0
    34f6:	90 e0       	ldi	r25, 0x00	; 0
    34f8:	a0 e8       	ldi	r26, 0x80	; 128
    34fa:	bf e3       	ldi	r27, 0x3F	; 63
    34fc:	8b 87       	std	Y+11, r24	; 0x0b
    34fe:	9c 87       	std	Y+12, r25	; 0x0c
    3500:	ad 87       	std	Y+13, r26	; 0x0d
    3502:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3504:	6b 85       	ldd	r22, Y+11	; 0x0b
    3506:	7c 85       	ldd	r23, Y+12	; 0x0c
    3508:	8d 85       	ldd	r24, Y+13	; 0x0d
    350a:	9e 85       	ldd	r25, Y+14	; 0x0e
    350c:	20 e0       	ldi	r18, 0x00	; 0
    350e:	30 e0       	ldi	r19, 0x00	; 0
    3510:	4a ef       	ldi	r20, 0xFA	; 250
    3512:	54 e4       	ldi	r21, 0x44	; 68
    3514:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3518:	dc 01       	movw	r26, r24
    351a:	cb 01       	movw	r24, r22
    351c:	8f 83       	std	Y+7, r24	; 0x07
    351e:	98 87       	std	Y+8, r25	; 0x08
    3520:	a9 87       	std	Y+9, r26	; 0x09
    3522:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3524:	6f 81       	ldd	r22, Y+7	; 0x07
    3526:	78 85       	ldd	r23, Y+8	; 0x08
    3528:	89 85       	ldd	r24, Y+9	; 0x09
    352a:	9a 85       	ldd	r25, Y+10	; 0x0a
    352c:	20 e0       	ldi	r18, 0x00	; 0
    352e:	30 e0       	ldi	r19, 0x00	; 0
    3530:	40 e8       	ldi	r20, 0x80	; 128
    3532:	5f e3       	ldi	r21, 0x3F	; 63
    3534:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3538:	88 23       	and	r24, r24
    353a:	2c f4       	brge	.+10     	; 0x3546 <vLCD_sendCOMMAND+0x17c>
		__ticks = 1;
    353c:	81 e0       	ldi	r24, 0x01	; 1
    353e:	90 e0       	ldi	r25, 0x00	; 0
    3540:	9e 83       	std	Y+6, r25	; 0x06
    3542:	8d 83       	std	Y+5, r24	; 0x05
    3544:	3f c0       	rjmp	.+126    	; 0x35c4 <vLCD_sendCOMMAND+0x1fa>
	else if (__tmp > 65535)
    3546:	6f 81       	ldd	r22, Y+7	; 0x07
    3548:	78 85       	ldd	r23, Y+8	; 0x08
    354a:	89 85       	ldd	r24, Y+9	; 0x09
    354c:	9a 85       	ldd	r25, Y+10	; 0x0a
    354e:	20 e0       	ldi	r18, 0x00	; 0
    3550:	3f ef       	ldi	r19, 0xFF	; 255
    3552:	4f e7       	ldi	r20, 0x7F	; 127
    3554:	57 e4       	ldi	r21, 0x47	; 71
    3556:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    355a:	18 16       	cp	r1, r24
    355c:	4c f5       	brge	.+82     	; 0x35b0 <vLCD_sendCOMMAND+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    355e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3560:	7c 85       	ldd	r23, Y+12	; 0x0c
    3562:	8d 85       	ldd	r24, Y+13	; 0x0d
    3564:	9e 85       	ldd	r25, Y+14	; 0x0e
    3566:	20 e0       	ldi	r18, 0x00	; 0
    3568:	30 e0       	ldi	r19, 0x00	; 0
    356a:	40 e2       	ldi	r20, 0x20	; 32
    356c:	51 e4       	ldi	r21, 0x41	; 65
    356e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3572:	dc 01       	movw	r26, r24
    3574:	cb 01       	movw	r24, r22
    3576:	bc 01       	movw	r22, r24
    3578:	cd 01       	movw	r24, r26
    357a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    357e:	dc 01       	movw	r26, r24
    3580:	cb 01       	movw	r24, r22
    3582:	9e 83       	std	Y+6, r25	; 0x06
    3584:	8d 83       	std	Y+5, r24	; 0x05
    3586:	0f c0       	rjmp	.+30     	; 0x35a6 <vLCD_sendCOMMAND+0x1dc>
    3588:	88 ec       	ldi	r24, 0xC8	; 200
    358a:	90 e0       	ldi	r25, 0x00	; 0
    358c:	9c 83       	std	Y+4, r25	; 0x04
    358e:	8b 83       	std	Y+3, r24	; 0x03
    3590:	8b 81       	ldd	r24, Y+3	; 0x03
    3592:	9c 81       	ldd	r25, Y+4	; 0x04
    3594:	01 97       	sbiw	r24, 0x01	; 1
    3596:	f1 f7       	brne	.-4      	; 0x3594 <vLCD_sendCOMMAND+0x1ca>
    3598:	9c 83       	std	Y+4, r25	; 0x04
    359a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    359c:	8d 81       	ldd	r24, Y+5	; 0x05
    359e:	9e 81       	ldd	r25, Y+6	; 0x06
    35a0:	01 97       	sbiw	r24, 0x01	; 1
    35a2:	9e 83       	std	Y+6, r25	; 0x06
    35a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35a6:	8d 81       	ldd	r24, Y+5	; 0x05
    35a8:	9e 81       	ldd	r25, Y+6	; 0x06
    35aa:	00 97       	sbiw	r24, 0x00	; 0
    35ac:	69 f7       	brne	.-38     	; 0x3588 <vLCD_sendCOMMAND+0x1be>
    35ae:	14 c0       	rjmp	.+40     	; 0x35d8 <vLCD_sendCOMMAND+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35b0:	6f 81       	ldd	r22, Y+7	; 0x07
    35b2:	78 85       	ldd	r23, Y+8	; 0x08
    35b4:	89 85       	ldd	r24, Y+9	; 0x09
    35b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    35b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35bc:	dc 01       	movw	r26, r24
    35be:	cb 01       	movw	r24, r22
    35c0:	9e 83       	std	Y+6, r25	; 0x06
    35c2:	8d 83       	std	Y+5, r24	; 0x05
    35c4:	8d 81       	ldd	r24, Y+5	; 0x05
    35c6:	9e 81       	ldd	r25, Y+6	; 0x06
    35c8:	9a 83       	std	Y+2, r25	; 0x02
    35ca:	89 83       	std	Y+1, r24	; 0x01
    35cc:	89 81       	ldd	r24, Y+1	; 0x01
    35ce:	9a 81       	ldd	r25, Y+2	; 0x02
    35d0:	01 97       	sbiw	r24, 0x01	; 1
    35d2:	f1 f7       	brne	.-4      	; 0x35d0 <vLCD_sendCOMMAND+0x206>
    35d4:	9a 83       	std	Y+2, r25	; 0x02
    35d6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    35d8:	6d 96       	adiw	r28, 0x1d	; 29
    35da:	0f b6       	in	r0, 0x3f	; 63
    35dc:	f8 94       	cli
    35de:	de bf       	out	0x3e, r29	; 62
    35e0:	0f be       	out	0x3f, r0	; 63
    35e2:	cd bf       	out	0x3d, r28	; 61
    35e4:	cf 91       	pop	r28
    35e6:	df 91       	pop	r29
    35e8:	08 95       	ret

000035ea <vLCD_sendDATA>:

void vLCD_sendDATA(u8 data)
{
    35ea:	df 93       	push	r29
    35ec:	cf 93       	push	r28
    35ee:	cd b7       	in	r28, 0x3d	; 61
    35f0:	de b7       	in	r29, 0x3e	; 62
    35f2:	6d 97       	sbiw	r28, 0x1d	; 29
    35f4:	0f b6       	in	r0, 0x3f	; 63
    35f6:	f8 94       	cli
    35f8:	de bf       	out	0x3e, r29	; 62
    35fa:	0f be       	out	0x3f, r0	; 63
    35fc:	cd bf       	out	0x3d, r28	; 61
    35fe:	8d 8f       	std	Y+29, r24	; 0x1d
	/*1- set RS pin to 1*/
	vSet_Pin_OUTPUTvalue(RS_PORT,RS_PIN,HIGH);
    3600:	83 e0       	ldi	r24, 0x03	; 3
    3602:	62 e0       	ldi	r22, 0x02	; 2
    3604:	41 e0       	ldi	r20, 0x01	; 1
    3606:	0e 94 64 14 	call	0x28c8	; 0x28c8 <vSet_Pin_OUTPUTvalue>

	/*2- set R/W pin to 0*/
	vSet_Pin_OUTPUTvalue(R_W_PORT,R_W_PIN,LOW);
    360a:	83 e0       	ldi	r24, 0x03	; 3
    360c:	63 e0       	ldi	r22, 0x03	; 3
    360e:	40 e0       	ldi	r20, 0x00	; 0
    3610:	0e 94 64 14 	call	0x28c8	; 0x28c8 <vSet_Pin_OUTPUTvalue>


	/*3- add command to data port to be sent*/
	vSet_Port_OUTPUTvalue(DATA_PORT,data);
    3614:	81 e0       	ldi	r24, 0x01	; 1
    3616:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3618:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <vSet_Port_OUTPUTvalue>


	/*4- trigger enable pin*/

	vSet_Pin_OUTPUTvalue(E_PORT,E_PIN,HIGH);
    361c:	83 e0       	ldi	r24, 0x03	; 3
    361e:	64 e0       	ldi	r22, 0x04	; 4
    3620:	41 e0       	ldi	r20, 0x01	; 1
    3622:	0e 94 64 14 	call	0x28c8	; 0x28c8 <vSet_Pin_OUTPUTvalue>
    3626:	80 e0       	ldi	r24, 0x00	; 0
    3628:	90 e0       	ldi	r25, 0x00	; 0
    362a:	a0 e8       	ldi	r26, 0x80	; 128
    362c:	bf e3       	ldi	r27, 0x3F	; 63
    362e:	89 8f       	std	Y+25, r24	; 0x19
    3630:	9a 8f       	std	Y+26, r25	; 0x1a
    3632:	ab 8f       	std	Y+27, r26	; 0x1b
    3634:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3636:	69 8d       	ldd	r22, Y+25	; 0x19
    3638:	7a 8d       	ldd	r23, Y+26	; 0x1a
    363a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    363c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    363e:	20 e0       	ldi	r18, 0x00	; 0
    3640:	30 e0       	ldi	r19, 0x00	; 0
    3642:	4a ef       	ldi	r20, 0xFA	; 250
    3644:	54 e4       	ldi	r21, 0x44	; 68
    3646:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    364a:	dc 01       	movw	r26, r24
    364c:	cb 01       	movw	r24, r22
    364e:	8d 8b       	std	Y+21, r24	; 0x15
    3650:	9e 8b       	std	Y+22, r25	; 0x16
    3652:	af 8b       	std	Y+23, r26	; 0x17
    3654:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3656:	6d 89       	ldd	r22, Y+21	; 0x15
    3658:	7e 89       	ldd	r23, Y+22	; 0x16
    365a:	8f 89       	ldd	r24, Y+23	; 0x17
    365c:	98 8d       	ldd	r25, Y+24	; 0x18
    365e:	20 e0       	ldi	r18, 0x00	; 0
    3660:	30 e0       	ldi	r19, 0x00	; 0
    3662:	40 e8       	ldi	r20, 0x80	; 128
    3664:	5f e3       	ldi	r21, 0x3F	; 63
    3666:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    366a:	88 23       	and	r24, r24
    366c:	2c f4       	brge	.+10     	; 0x3678 <vLCD_sendDATA+0x8e>
		__ticks = 1;
    366e:	81 e0       	ldi	r24, 0x01	; 1
    3670:	90 e0       	ldi	r25, 0x00	; 0
    3672:	9c 8b       	std	Y+20, r25	; 0x14
    3674:	8b 8b       	std	Y+19, r24	; 0x13
    3676:	3f c0       	rjmp	.+126    	; 0x36f6 <vLCD_sendDATA+0x10c>
	else if (__tmp > 65535)
    3678:	6d 89       	ldd	r22, Y+21	; 0x15
    367a:	7e 89       	ldd	r23, Y+22	; 0x16
    367c:	8f 89       	ldd	r24, Y+23	; 0x17
    367e:	98 8d       	ldd	r25, Y+24	; 0x18
    3680:	20 e0       	ldi	r18, 0x00	; 0
    3682:	3f ef       	ldi	r19, 0xFF	; 255
    3684:	4f e7       	ldi	r20, 0x7F	; 127
    3686:	57 e4       	ldi	r21, 0x47	; 71
    3688:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    368c:	18 16       	cp	r1, r24
    368e:	4c f5       	brge	.+82     	; 0x36e2 <vLCD_sendDATA+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3690:	69 8d       	ldd	r22, Y+25	; 0x19
    3692:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3694:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3696:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3698:	20 e0       	ldi	r18, 0x00	; 0
    369a:	30 e0       	ldi	r19, 0x00	; 0
    369c:	40 e2       	ldi	r20, 0x20	; 32
    369e:	51 e4       	ldi	r21, 0x41	; 65
    36a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36a4:	dc 01       	movw	r26, r24
    36a6:	cb 01       	movw	r24, r22
    36a8:	bc 01       	movw	r22, r24
    36aa:	cd 01       	movw	r24, r26
    36ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36b0:	dc 01       	movw	r26, r24
    36b2:	cb 01       	movw	r24, r22
    36b4:	9c 8b       	std	Y+20, r25	; 0x14
    36b6:	8b 8b       	std	Y+19, r24	; 0x13
    36b8:	0f c0       	rjmp	.+30     	; 0x36d8 <vLCD_sendDATA+0xee>
    36ba:	88 ec       	ldi	r24, 0xC8	; 200
    36bc:	90 e0       	ldi	r25, 0x00	; 0
    36be:	9a 8b       	std	Y+18, r25	; 0x12
    36c0:	89 8b       	std	Y+17, r24	; 0x11
    36c2:	89 89       	ldd	r24, Y+17	; 0x11
    36c4:	9a 89       	ldd	r25, Y+18	; 0x12
    36c6:	01 97       	sbiw	r24, 0x01	; 1
    36c8:	f1 f7       	brne	.-4      	; 0x36c6 <vLCD_sendDATA+0xdc>
    36ca:	9a 8b       	std	Y+18, r25	; 0x12
    36cc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36ce:	8b 89       	ldd	r24, Y+19	; 0x13
    36d0:	9c 89       	ldd	r25, Y+20	; 0x14
    36d2:	01 97       	sbiw	r24, 0x01	; 1
    36d4:	9c 8b       	std	Y+20, r25	; 0x14
    36d6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36d8:	8b 89       	ldd	r24, Y+19	; 0x13
    36da:	9c 89       	ldd	r25, Y+20	; 0x14
    36dc:	00 97       	sbiw	r24, 0x00	; 0
    36de:	69 f7       	brne	.-38     	; 0x36ba <vLCD_sendDATA+0xd0>
    36e0:	14 c0       	rjmp	.+40     	; 0x370a <vLCD_sendDATA+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36e2:	6d 89       	ldd	r22, Y+21	; 0x15
    36e4:	7e 89       	ldd	r23, Y+22	; 0x16
    36e6:	8f 89       	ldd	r24, Y+23	; 0x17
    36e8:	98 8d       	ldd	r25, Y+24	; 0x18
    36ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36ee:	dc 01       	movw	r26, r24
    36f0:	cb 01       	movw	r24, r22
    36f2:	9c 8b       	std	Y+20, r25	; 0x14
    36f4:	8b 8b       	std	Y+19, r24	; 0x13
    36f6:	8b 89       	ldd	r24, Y+19	; 0x13
    36f8:	9c 89       	ldd	r25, Y+20	; 0x14
    36fa:	98 8b       	std	Y+16, r25	; 0x10
    36fc:	8f 87       	std	Y+15, r24	; 0x0f
    36fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    3700:	98 89       	ldd	r25, Y+16	; 0x10
    3702:	01 97       	sbiw	r24, 0x01	; 1
    3704:	f1 f7       	brne	.-4      	; 0x3702 <vLCD_sendDATA+0x118>
    3706:	98 8b       	std	Y+16, r25	; 0x10
    3708:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	vSet_Pin_OUTPUTvalue(E_PORT,E_PIN,LOW);
    370a:	83 e0       	ldi	r24, 0x03	; 3
    370c:	64 e0       	ldi	r22, 0x04	; 4
    370e:	40 e0       	ldi	r20, 0x00	; 0
    3710:	0e 94 64 14 	call	0x28c8	; 0x28c8 <vSet_Pin_OUTPUTvalue>
    3714:	80 e0       	ldi	r24, 0x00	; 0
    3716:	90 e0       	ldi	r25, 0x00	; 0
    3718:	a0 e8       	ldi	r26, 0x80	; 128
    371a:	bf e3       	ldi	r27, 0x3F	; 63
    371c:	8b 87       	std	Y+11, r24	; 0x0b
    371e:	9c 87       	std	Y+12, r25	; 0x0c
    3720:	ad 87       	std	Y+13, r26	; 0x0d
    3722:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3724:	6b 85       	ldd	r22, Y+11	; 0x0b
    3726:	7c 85       	ldd	r23, Y+12	; 0x0c
    3728:	8d 85       	ldd	r24, Y+13	; 0x0d
    372a:	9e 85       	ldd	r25, Y+14	; 0x0e
    372c:	20 e0       	ldi	r18, 0x00	; 0
    372e:	30 e0       	ldi	r19, 0x00	; 0
    3730:	4a ef       	ldi	r20, 0xFA	; 250
    3732:	54 e4       	ldi	r21, 0x44	; 68
    3734:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3738:	dc 01       	movw	r26, r24
    373a:	cb 01       	movw	r24, r22
    373c:	8f 83       	std	Y+7, r24	; 0x07
    373e:	98 87       	std	Y+8, r25	; 0x08
    3740:	a9 87       	std	Y+9, r26	; 0x09
    3742:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3744:	6f 81       	ldd	r22, Y+7	; 0x07
    3746:	78 85       	ldd	r23, Y+8	; 0x08
    3748:	89 85       	ldd	r24, Y+9	; 0x09
    374a:	9a 85       	ldd	r25, Y+10	; 0x0a
    374c:	20 e0       	ldi	r18, 0x00	; 0
    374e:	30 e0       	ldi	r19, 0x00	; 0
    3750:	40 e8       	ldi	r20, 0x80	; 128
    3752:	5f e3       	ldi	r21, 0x3F	; 63
    3754:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3758:	88 23       	and	r24, r24
    375a:	2c f4       	brge	.+10     	; 0x3766 <vLCD_sendDATA+0x17c>
		__ticks = 1;
    375c:	81 e0       	ldi	r24, 0x01	; 1
    375e:	90 e0       	ldi	r25, 0x00	; 0
    3760:	9e 83       	std	Y+6, r25	; 0x06
    3762:	8d 83       	std	Y+5, r24	; 0x05
    3764:	3f c0       	rjmp	.+126    	; 0x37e4 <vLCD_sendDATA+0x1fa>
	else if (__tmp > 65535)
    3766:	6f 81       	ldd	r22, Y+7	; 0x07
    3768:	78 85       	ldd	r23, Y+8	; 0x08
    376a:	89 85       	ldd	r24, Y+9	; 0x09
    376c:	9a 85       	ldd	r25, Y+10	; 0x0a
    376e:	20 e0       	ldi	r18, 0x00	; 0
    3770:	3f ef       	ldi	r19, 0xFF	; 255
    3772:	4f e7       	ldi	r20, 0x7F	; 127
    3774:	57 e4       	ldi	r21, 0x47	; 71
    3776:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    377a:	18 16       	cp	r1, r24
    377c:	4c f5       	brge	.+82     	; 0x37d0 <vLCD_sendDATA+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    377e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3780:	7c 85       	ldd	r23, Y+12	; 0x0c
    3782:	8d 85       	ldd	r24, Y+13	; 0x0d
    3784:	9e 85       	ldd	r25, Y+14	; 0x0e
    3786:	20 e0       	ldi	r18, 0x00	; 0
    3788:	30 e0       	ldi	r19, 0x00	; 0
    378a:	40 e2       	ldi	r20, 0x20	; 32
    378c:	51 e4       	ldi	r21, 0x41	; 65
    378e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3792:	dc 01       	movw	r26, r24
    3794:	cb 01       	movw	r24, r22
    3796:	bc 01       	movw	r22, r24
    3798:	cd 01       	movw	r24, r26
    379a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    379e:	dc 01       	movw	r26, r24
    37a0:	cb 01       	movw	r24, r22
    37a2:	9e 83       	std	Y+6, r25	; 0x06
    37a4:	8d 83       	std	Y+5, r24	; 0x05
    37a6:	0f c0       	rjmp	.+30     	; 0x37c6 <vLCD_sendDATA+0x1dc>
    37a8:	88 ec       	ldi	r24, 0xC8	; 200
    37aa:	90 e0       	ldi	r25, 0x00	; 0
    37ac:	9c 83       	std	Y+4, r25	; 0x04
    37ae:	8b 83       	std	Y+3, r24	; 0x03
    37b0:	8b 81       	ldd	r24, Y+3	; 0x03
    37b2:	9c 81       	ldd	r25, Y+4	; 0x04
    37b4:	01 97       	sbiw	r24, 0x01	; 1
    37b6:	f1 f7       	brne	.-4      	; 0x37b4 <vLCD_sendDATA+0x1ca>
    37b8:	9c 83       	std	Y+4, r25	; 0x04
    37ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37bc:	8d 81       	ldd	r24, Y+5	; 0x05
    37be:	9e 81       	ldd	r25, Y+6	; 0x06
    37c0:	01 97       	sbiw	r24, 0x01	; 1
    37c2:	9e 83       	std	Y+6, r25	; 0x06
    37c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37c6:	8d 81       	ldd	r24, Y+5	; 0x05
    37c8:	9e 81       	ldd	r25, Y+6	; 0x06
    37ca:	00 97       	sbiw	r24, 0x00	; 0
    37cc:	69 f7       	brne	.-38     	; 0x37a8 <vLCD_sendDATA+0x1be>
    37ce:	14 c0       	rjmp	.+40     	; 0x37f8 <vLCD_sendDATA+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37d0:	6f 81       	ldd	r22, Y+7	; 0x07
    37d2:	78 85       	ldd	r23, Y+8	; 0x08
    37d4:	89 85       	ldd	r24, Y+9	; 0x09
    37d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    37d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37dc:	dc 01       	movw	r26, r24
    37de:	cb 01       	movw	r24, r22
    37e0:	9e 83       	std	Y+6, r25	; 0x06
    37e2:	8d 83       	std	Y+5, r24	; 0x05
    37e4:	8d 81       	ldd	r24, Y+5	; 0x05
    37e6:	9e 81       	ldd	r25, Y+6	; 0x06
    37e8:	9a 83       	std	Y+2, r25	; 0x02
    37ea:	89 83       	std	Y+1, r24	; 0x01
    37ec:	89 81       	ldd	r24, Y+1	; 0x01
    37ee:	9a 81       	ldd	r25, Y+2	; 0x02
    37f0:	01 97       	sbiw	r24, 0x01	; 1
    37f2:	f1 f7       	brne	.-4      	; 0x37f0 <vLCD_sendDATA+0x206>
    37f4:	9a 83       	std	Y+2, r25	; 0x02
    37f6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    37f8:	6d 96       	adiw	r28, 0x1d	; 29
    37fa:	0f b6       	in	r0, 0x3f	; 63
    37fc:	f8 94       	cli
    37fe:	de bf       	out	0x3e, r29	; 62
    3800:	0f be       	out	0x3f, r0	; 63
    3802:	cd bf       	out	0x3d, r28	; 61
    3804:	cf 91       	pop	r28
    3806:	df 91       	pop	r29
    3808:	08 95       	ret

0000380a <vLCD_Send_String>:

void vLCD_Send_String(u8 * str)
{
    380a:	df 93       	push	r29
    380c:	cf 93       	push	r28
    380e:	00 d0       	rcall	.+0      	; 0x3810 <vLCD_Send_String+0x6>
    3810:	00 d0       	rcall	.+0      	; 0x3812 <vLCD_Send_String+0x8>
    3812:	00 d0       	rcall	.+0      	; 0x3814 <vLCD_Send_String+0xa>
    3814:	cd b7       	in	r28, 0x3d	; 61
    3816:	de b7       	in	r29, 0x3e	; 62
    3818:	9e 83       	std	Y+6, r25	; 0x06
    381a:	8d 83       	std	Y+5, r24	; 0x05
	u32 i=0;
    381c:	19 82       	std	Y+1, r1	; 0x01
    381e:	1a 82       	std	Y+2, r1	; 0x02
    3820:	1b 82       	std	Y+3, r1	; 0x03
    3822:	1c 82       	std	Y+4, r1	; 0x04
    3824:	15 c0       	rjmp	.+42     	; 0x3850 <vLCD_Send_String+0x46>

	while(str[i] != '\0')
	{
		vLCD_sendDATA(str[i]);
    3826:	29 81       	ldd	r18, Y+1	; 0x01
    3828:	3a 81       	ldd	r19, Y+2	; 0x02
    382a:	8d 81       	ldd	r24, Y+5	; 0x05
    382c:	9e 81       	ldd	r25, Y+6	; 0x06
    382e:	fc 01       	movw	r30, r24
    3830:	e2 0f       	add	r30, r18
    3832:	f3 1f       	adc	r31, r19
    3834:	80 81       	ld	r24, Z
    3836:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <vLCD_sendDATA>
		i++;
    383a:	89 81       	ldd	r24, Y+1	; 0x01
    383c:	9a 81       	ldd	r25, Y+2	; 0x02
    383e:	ab 81       	ldd	r26, Y+3	; 0x03
    3840:	bc 81       	ldd	r27, Y+4	; 0x04
    3842:	01 96       	adiw	r24, 0x01	; 1
    3844:	a1 1d       	adc	r26, r1
    3846:	b1 1d       	adc	r27, r1
    3848:	89 83       	std	Y+1, r24	; 0x01
    384a:	9a 83       	std	Y+2, r25	; 0x02
    384c:	ab 83       	std	Y+3, r26	; 0x03
    384e:	bc 83       	std	Y+4, r27	; 0x04

void vLCD_Send_String(u8 * str)
{
	u32 i=0;

	while(str[i] != '\0')
    3850:	29 81       	ldd	r18, Y+1	; 0x01
    3852:	3a 81       	ldd	r19, Y+2	; 0x02
    3854:	8d 81       	ldd	r24, Y+5	; 0x05
    3856:	9e 81       	ldd	r25, Y+6	; 0x06
    3858:	fc 01       	movw	r30, r24
    385a:	e2 0f       	add	r30, r18
    385c:	f3 1f       	adc	r31, r19
    385e:	80 81       	ld	r24, Z
    3860:	88 23       	and	r24, r24
    3862:	09 f7       	brne	.-62     	; 0x3826 <vLCD_Send_String+0x1c>
	{
		vLCD_sendDATA(str[i]);
		i++;
	}

}
    3864:	26 96       	adiw	r28, 0x06	; 6
    3866:	0f b6       	in	r0, 0x3f	; 63
    3868:	f8 94       	cli
    386a:	de bf       	out	0x3e, r29	; 62
    386c:	0f be       	out	0x3f, r0	; 63
    386e:	cd bf       	out	0x3d, r28	; 61
    3870:	cf 91       	pop	r28
    3872:	df 91       	pop	r29
    3874:	08 95       	ret

00003876 <CLCD_voidSendNumber>:

void CLCD_voidSendNumber(s32 cpy_u32Number)
{
    3876:	df 93       	push	r29
    3878:	cf 93       	push	r28
    387a:	00 d0       	rcall	.+0      	; 0x387c <CLCD_voidSendNumber+0x6>
    387c:	00 d0       	rcall	.+0      	; 0x387e <CLCD_voidSendNumber+0x8>
    387e:	cd b7       	in	r28, 0x3d	; 61
    3880:	de b7       	in	r29, 0x3e	; 62
    3882:	69 83       	std	Y+1, r22	; 0x01
    3884:	7a 83       	std	Y+2, r23	; 0x02
    3886:	8b 83       	std	Y+3, r24	; 0x03
    3888:	9c 83       	std	Y+4, r25	; 0x04

}
    388a:	0f 90       	pop	r0
    388c:	0f 90       	pop	r0
    388e:	0f 90       	pop	r0
    3890:	0f 90       	pop	r0
    3892:	cf 91       	pop	r28
    3894:	df 91       	pop	r29
    3896:	08 95       	ret

00003898 <vLCD_Clear>:

void vLCD_Clear()
{
    3898:	df 93       	push	r29
    389a:	cf 93       	push	r28
    389c:	cd b7       	in	r28, 0x3d	; 61
    389e:	de b7       	in	r29, 0x3e	; 62
    38a0:	2e 97       	sbiw	r28, 0x0e	; 14
    38a2:	0f b6       	in	r0, 0x3f	; 63
    38a4:	f8 94       	cli
    38a6:	de bf       	out	0x3e, r29	; 62
    38a8:	0f be       	out	0x3f, r0	; 63
    38aa:	cd bf       	out	0x3d, r28	; 61
	vLCD_sendCOMMAND(0b00000001);
    38ac:	81 e0       	ldi	r24, 0x01	; 1
    38ae:	0e 94 e5 19 	call	0x33ca	; 0x33ca <vLCD_sendCOMMAND>
    38b2:	80 e0       	ldi	r24, 0x00	; 0
    38b4:	90 e0       	ldi	r25, 0x00	; 0
    38b6:	a0 e4       	ldi	r26, 0x40	; 64
    38b8:	b0 e4       	ldi	r27, 0x40	; 64
    38ba:	8b 87       	std	Y+11, r24	; 0x0b
    38bc:	9c 87       	std	Y+12, r25	; 0x0c
    38be:	ad 87       	std	Y+13, r26	; 0x0d
    38c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    38c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    38c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    38c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    38ca:	20 e0       	ldi	r18, 0x00	; 0
    38cc:	30 e0       	ldi	r19, 0x00	; 0
    38ce:	4a ef       	ldi	r20, 0xFA	; 250
    38d0:	54 e4       	ldi	r21, 0x44	; 68
    38d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38d6:	dc 01       	movw	r26, r24
    38d8:	cb 01       	movw	r24, r22
    38da:	8f 83       	std	Y+7, r24	; 0x07
    38dc:	98 87       	std	Y+8, r25	; 0x08
    38de:	a9 87       	std	Y+9, r26	; 0x09
    38e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    38e2:	6f 81       	ldd	r22, Y+7	; 0x07
    38e4:	78 85       	ldd	r23, Y+8	; 0x08
    38e6:	89 85       	ldd	r24, Y+9	; 0x09
    38e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    38ea:	20 e0       	ldi	r18, 0x00	; 0
    38ec:	30 e0       	ldi	r19, 0x00	; 0
    38ee:	40 e8       	ldi	r20, 0x80	; 128
    38f0:	5f e3       	ldi	r21, 0x3F	; 63
    38f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    38f6:	88 23       	and	r24, r24
    38f8:	2c f4       	brge	.+10     	; 0x3904 <vLCD_Clear+0x6c>
		__ticks = 1;
    38fa:	81 e0       	ldi	r24, 0x01	; 1
    38fc:	90 e0       	ldi	r25, 0x00	; 0
    38fe:	9e 83       	std	Y+6, r25	; 0x06
    3900:	8d 83       	std	Y+5, r24	; 0x05
    3902:	3f c0       	rjmp	.+126    	; 0x3982 <vLCD_Clear+0xea>
	else if (__tmp > 65535)
    3904:	6f 81       	ldd	r22, Y+7	; 0x07
    3906:	78 85       	ldd	r23, Y+8	; 0x08
    3908:	89 85       	ldd	r24, Y+9	; 0x09
    390a:	9a 85       	ldd	r25, Y+10	; 0x0a
    390c:	20 e0       	ldi	r18, 0x00	; 0
    390e:	3f ef       	ldi	r19, 0xFF	; 255
    3910:	4f e7       	ldi	r20, 0x7F	; 127
    3912:	57 e4       	ldi	r21, 0x47	; 71
    3914:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3918:	18 16       	cp	r1, r24
    391a:	4c f5       	brge	.+82     	; 0x396e <vLCD_Clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    391c:	6b 85       	ldd	r22, Y+11	; 0x0b
    391e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3920:	8d 85       	ldd	r24, Y+13	; 0x0d
    3922:	9e 85       	ldd	r25, Y+14	; 0x0e
    3924:	20 e0       	ldi	r18, 0x00	; 0
    3926:	30 e0       	ldi	r19, 0x00	; 0
    3928:	40 e2       	ldi	r20, 0x20	; 32
    392a:	51 e4       	ldi	r21, 0x41	; 65
    392c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3930:	dc 01       	movw	r26, r24
    3932:	cb 01       	movw	r24, r22
    3934:	bc 01       	movw	r22, r24
    3936:	cd 01       	movw	r24, r26
    3938:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    393c:	dc 01       	movw	r26, r24
    393e:	cb 01       	movw	r24, r22
    3940:	9e 83       	std	Y+6, r25	; 0x06
    3942:	8d 83       	std	Y+5, r24	; 0x05
    3944:	0f c0       	rjmp	.+30     	; 0x3964 <vLCD_Clear+0xcc>
    3946:	88 ec       	ldi	r24, 0xC8	; 200
    3948:	90 e0       	ldi	r25, 0x00	; 0
    394a:	9c 83       	std	Y+4, r25	; 0x04
    394c:	8b 83       	std	Y+3, r24	; 0x03
    394e:	8b 81       	ldd	r24, Y+3	; 0x03
    3950:	9c 81       	ldd	r25, Y+4	; 0x04
    3952:	01 97       	sbiw	r24, 0x01	; 1
    3954:	f1 f7       	brne	.-4      	; 0x3952 <vLCD_Clear+0xba>
    3956:	9c 83       	std	Y+4, r25	; 0x04
    3958:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    395a:	8d 81       	ldd	r24, Y+5	; 0x05
    395c:	9e 81       	ldd	r25, Y+6	; 0x06
    395e:	01 97       	sbiw	r24, 0x01	; 1
    3960:	9e 83       	std	Y+6, r25	; 0x06
    3962:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3964:	8d 81       	ldd	r24, Y+5	; 0x05
    3966:	9e 81       	ldd	r25, Y+6	; 0x06
    3968:	00 97       	sbiw	r24, 0x00	; 0
    396a:	69 f7       	brne	.-38     	; 0x3946 <vLCD_Clear+0xae>
    396c:	14 c0       	rjmp	.+40     	; 0x3996 <vLCD_Clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    396e:	6f 81       	ldd	r22, Y+7	; 0x07
    3970:	78 85       	ldd	r23, Y+8	; 0x08
    3972:	89 85       	ldd	r24, Y+9	; 0x09
    3974:	9a 85       	ldd	r25, Y+10	; 0x0a
    3976:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    397a:	dc 01       	movw	r26, r24
    397c:	cb 01       	movw	r24, r22
    397e:	9e 83       	std	Y+6, r25	; 0x06
    3980:	8d 83       	std	Y+5, r24	; 0x05
    3982:	8d 81       	ldd	r24, Y+5	; 0x05
    3984:	9e 81       	ldd	r25, Y+6	; 0x06
    3986:	9a 83       	std	Y+2, r25	; 0x02
    3988:	89 83       	std	Y+1, r24	; 0x01
    398a:	89 81       	ldd	r24, Y+1	; 0x01
    398c:	9a 81       	ldd	r25, Y+2	; 0x02
    398e:	01 97       	sbiw	r24, 0x01	; 1
    3990:	f1 f7       	brne	.-4      	; 0x398e <vLCD_Clear+0xf6>
    3992:	9a 83       	std	Y+2, r25	; 0x02
    3994:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3);
}
    3996:	2e 96       	adiw	r28, 0x0e	; 14
    3998:	0f b6       	in	r0, 0x3f	; 63
    399a:	f8 94       	cli
    399c:	de bf       	out	0x3e, r29	; 62
    399e:	0f be       	out	0x3f, r0	; 63
    39a0:	cd bf       	out	0x3d, r28	; 61
    39a2:	cf 91       	pop	r28
    39a4:	df 91       	pop	r29
    39a6:	08 95       	ret

000039a8 <vLCD_GO_TO>:

void vLCD_GO_TO(u8 line ,u8 position )
{
    39a8:	df 93       	push	r29
    39aa:	cf 93       	push	r28
    39ac:	00 d0       	rcall	.+0      	; 0x39ae <vLCD_GO_TO+0x6>
    39ae:	cd b7       	in	r28, 0x3d	; 61
    39b0:	de b7       	in	r29, 0x3e	; 62
    39b2:	89 83       	std	Y+1, r24	; 0x01
    39b4:	6a 83       	std	Y+2, r22	; 0x02
	if(line==1)
    39b6:	89 81       	ldd	r24, Y+1	; 0x01
    39b8:	81 30       	cpi	r24, 0x01	; 1
    39ba:	21 f4       	brne	.+8      	; 0x39c4 <vLCD_GO_TO+0x1c>
	{
		vLCD_sendCOMMAND(0x80+position);
    39bc:	8a 81       	ldd	r24, Y+2	; 0x02
    39be:	80 58       	subi	r24, 0x80	; 128
    39c0:	0e 94 e5 19 	call	0x33ca	; 0x33ca <vLCD_sendCOMMAND>
	}
	if(line==2)
    39c4:	89 81       	ldd	r24, Y+1	; 0x01
    39c6:	82 30       	cpi	r24, 0x02	; 2
    39c8:	21 f4       	brne	.+8      	; 0x39d2 <vLCD_GO_TO+0x2a>
	{
		vLCD_sendCOMMAND(0x80+0x40+position);
    39ca:	8a 81       	ldd	r24, Y+2	; 0x02
    39cc:	80 54       	subi	r24, 0x40	; 64
    39ce:	0e 94 e5 19 	call	0x33ca	; 0x33ca <vLCD_sendCOMMAND>
	}
}
    39d2:	0f 90       	pop	r0
    39d4:	0f 90       	pop	r0
    39d6:	cf 91       	pop	r28
    39d8:	df 91       	pop	r29
    39da:	08 95       	ret

000039dc <vLCD_Convert_numTOchar>:

void vLCD_Convert_numTOchar(u16 num)//-520
{
    39dc:	df 93       	push	r29
    39de:	cf 93       	push	r28
    39e0:	cd b7       	in	r28, 0x3d	; 61
    39e2:	de b7       	in	r29, 0x3e	; 62
    39e4:	2f 97       	sbiw	r28, 0x0f	; 15
    39e6:	0f b6       	in	r0, 0x3f	; 63
    39e8:	f8 94       	cli
    39ea:	de bf       	out	0x3e, r29	; 62
    39ec:	0f be       	out	0x3f, r0	; 63
    39ee:	cd bf       	out	0x3d, r28	; 61
    39f0:	9f 87       	std	Y+15, r25	; 0x0f
    39f2:	8e 87       	std	Y+14, r24	; 0x0e
	u8 str[10];
	u8 res=0,i=0;
    39f4:	1b 82       	std	Y+3, r1	; 0x03
    39f6:	1a 82       	std	Y+2, r1	; 0x02
    39f8:	21 c0       	rjmp	.+66     	; 0x3a3c <vLCD_Convert_numTOchar+0x60>

	}

	while(num)//520
	{
		res=num%10;//0 2 5
    39fa:	8e 85       	ldd	r24, Y+14	; 0x0e
    39fc:	9f 85       	ldd	r25, Y+15	; 0x0f
    39fe:	2a e0       	ldi	r18, 0x0A	; 10
    3a00:	30 e0       	ldi	r19, 0x00	; 0
    3a02:	b9 01       	movw	r22, r18
    3a04:	0e 94 a3 2e 	call	0x5d46	; 0x5d46 <__udivmodhi4>
    3a08:	8b 83       	std	Y+3, r24	; 0x03
		str[i]=res+'0';//'0' '2' '5'
    3a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a0c:	28 2f       	mov	r18, r24
    3a0e:	30 e0       	ldi	r19, 0x00	; 0
    3a10:	8b 81       	ldd	r24, Y+3	; 0x03
    3a12:	48 2f       	mov	r20, r24
    3a14:	40 5d       	subi	r20, 0xD0	; 208
    3a16:	ce 01       	movw	r24, r28
    3a18:	04 96       	adiw	r24, 0x04	; 4
    3a1a:	fc 01       	movw	r30, r24
    3a1c:	e2 0f       	add	r30, r18
    3a1e:	f3 1f       	adc	r31, r19
    3a20:	40 83       	st	Z, r20
		num=num/10;//52  5  0
    3a22:	8e 85       	ldd	r24, Y+14	; 0x0e
    3a24:	9f 85       	ldd	r25, Y+15	; 0x0f
    3a26:	2a e0       	ldi	r18, 0x0A	; 10
    3a28:	30 e0       	ldi	r19, 0x00	; 0
    3a2a:	b9 01       	movw	r22, r18
    3a2c:	0e 94 a3 2e 	call	0x5d46	; 0x5d46 <__udivmodhi4>
    3a30:	cb 01       	movw	r24, r22
    3a32:	9f 87       	std	Y+15, r25	; 0x0f
    3a34:	8e 87       	std	Y+14, r24	; 0x0e
		i++;//1 2 3 4
    3a36:	8a 81       	ldd	r24, Y+2	; 0x02
    3a38:	8f 5f       	subi	r24, 0xFF	; 255
    3a3a:	8a 83       	std	Y+2, r24	; 0x02
		num=num*(-1);
		vLCD_sendDATA('-');

	}

	while(num)//520
    3a3c:	8e 85       	ldd	r24, Y+14	; 0x0e
    3a3e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3a40:	00 97       	sbiw	r24, 0x00	; 0
    3a42:	d9 f6       	brne	.-74     	; 0x39fa <vLCD_Convert_numTOchar+0x1e>
		str[i]=res+'0';//'0' '2' '5'
		num=num/10;//52  5  0
		i++;//1 2 3 4

	}
	for(s8 j=i-1;j>=0;j--)
    3a44:	8a 81       	ldd	r24, Y+2	; 0x02
    3a46:	81 50       	subi	r24, 0x01	; 1
    3a48:	89 83       	std	Y+1, r24	; 0x01
    3a4a:	10 c0       	rjmp	.+32     	; 0x3a6c <vLCD_Convert_numTOchar+0x90>
	{
		vLCD_sendDATA(str[j]);
    3a4c:	89 81       	ldd	r24, Y+1	; 0x01
    3a4e:	28 2f       	mov	r18, r24
    3a50:	33 27       	eor	r19, r19
    3a52:	27 fd       	sbrc	r18, 7
    3a54:	30 95       	com	r19
    3a56:	ce 01       	movw	r24, r28
    3a58:	04 96       	adiw	r24, 0x04	; 4
    3a5a:	fc 01       	movw	r30, r24
    3a5c:	e2 0f       	add	r30, r18
    3a5e:	f3 1f       	adc	r31, r19
    3a60:	80 81       	ld	r24, Z
    3a62:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <vLCD_sendDATA>
		str[i]=res+'0';//'0' '2' '5'
		num=num/10;//52  5  0
		i++;//1 2 3 4

	}
	for(s8 j=i-1;j>=0;j--)
    3a66:	89 81       	ldd	r24, Y+1	; 0x01
    3a68:	81 50       	subi	r24, 0x01	; 1
    3a6a:	89 83       	std	Y+1, r24	; 0x01
    3a6c:	89 81       	ldd	r24, Y+1	; 0x01
    3a6e:	88 23       	and	r24, r24
    3a70:	6c f7       	brge	.-38     	; 0x3a4c <vLCD_Convert_numTOchar+0x70>
	{
		vLCD_sendDATA(str[j]);
	}

}
    3a72:	2f 96       	adiw	r28, 0x0f	; 15
    3a74:	0f b6       	in	r0, 0x3f	; 63
    3a76:	f8 94       	cli
    3a78:	de bf       	out	0x3e, r29	; 62
    3a7a:	0f be       	out	0x3f, r0	; 63
    3a7c:	cd bf       	out	0x3d, r28	; 61
    3a7e:	cf 91       	pop	r28
    3a80:	df 91       	pop	r29
    3a82:	08 95       	ret

00003a84 <vKEYPAD_init>:
		{'c','0','=','+'},

};

void vKEYPAD_init()
{
    3a84:	df 93       	push	r29
    3a86:	cf 93       	push	r28
    3a88:	cd b7       	in	r28, 0x3d	; 61
    3a8a:	de b7       	in	r29, 0x3e	; 62
	{
		vSet_Pin_OUTPUTvalue(ROW_PORT[i],ROW_PIN[i],HIGH);
	}
*/
	/*Columns are Output*/
	vSet_Pin_Direction(COL1_PORT,COL1_PIN,OUTPUT);
    3a8c:	82 e0       	ldi	r24, 0x02	; 2
    3a8e:	66 e0       	ldi	r22, 0x06	; 6
    3a90:	41 e0       	ldi	r20, 0x01	; 1
    3a92:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <vSet_Pin_Direction>
	vSet_Pin_Direction(COL2_PORT,COL2_PIN,OUTPUT);
    3a96:	82 e0       	ldi	r24, 0x02	; 2
    3a98:	67 e0       	ldi	r22, 0x07	; 7
    3a9a:	41 e0       	ldi	r20, 0x01	; 1
    3a9c:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <vSet_Pin_Direction>
	vSet_Pin_Direction(COL3_PORT,COL3_PIN,OUTPUT);
    3aa0:	83 e0       	ldi	r24, 0x03	; 3
    3aa2:	60 e0       	ldi	r22, 0x00	; 0
    3aa4:	41 e0       	ldi	r20, 0x01	; 1
    3aa6:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <vSet_Pin_Direction>
	vSet_Pin_Direction(COL4_PORT,COL4_PIN,OUTPUT);
    3aaa:	83 e0       	ldi	r24, 0x03	; 3
    3aac:	61 e0       	ldi	r22, 0x01	; 1
    3aae:	41 e0       	ldi	r20, 0x01	; 1
    3ab0:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <vSet_Pin_Direction>

	/*Rows are input*/
	vSet_Pin_Direction(ROW1_PORT,ROW1_PIN,INPUT);
    3ab4:	80 e0       	ldi	r24, 0x00	; 0
    3ab6:	65 e0       	ldi	r22, 0x05	; 5
    3ab8:	40 e0       	ldi	r20, 0x00	; 0
    3aba:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <vSet_Pin_Direction>
	vSet_Pin_Direction(ROW2_PORT,ROW2_PIN,INPUT);
    3abe:	80 e0       	ldi	r24, 0x00	; 0
    3ac0:	66 e0       	ldi	r22, 0x06	; 6
    3ac2:	40 e0       	ldi	r20, 0x00	; 0
    3ac4:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <vSet_Pin_Direction>
	vSet_Pin_Direction(ROW3_PORT,ROW3_PIN,INPUT);
    3ac8:	80 e0       	ldi	r24, 0x00	; 0
    3aca:	62 e0       	ldi	r22, 0x02	; 2
    3acc:	40 e0       	ldi	r20, 0x00	; 0
    3ace:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <vSet_Pin_Direction>
	vSet_Pin_Direction(ROW4_PORT,ROW4_PIN,INPUT);
    3ad2:	80 e0       	ldi	r24, 0x00	; 0
    3ad4:	61 e0       	ldi	r22, 0x01	; 1
    3ad6:	40 e0       	ldi	r20, 0x00	; 0
    3ad8:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <vSet_Pin_Direction>

	/*ALL Columns written to 1*/
	vSet_Pin_OUTPUTvalue(COL1_PORT,COL1_PIN,HIGH);
    3adc:	82 e0       	ldi	r24, 0x02	; 2
    3ade:	66 e0       	ldi	r22, 0x06	; 6
    3ae0:	41 e0       	ldi	r20, 0x01	; 1
    3ae2:	0e 94 64 14 	call	0x28c8	; 0x28c8 <vSet_Pin_OUTPUTvalue>
	vSet_Pin_OUTPUTvalue(COL2_PORT,COL2_PIN,HIGH);
    3ae6:	82 e0       	ldi	r24, 0x02	; 2
    3ae8:	67 e0       	ldi	r22, 0x07	; 7
    3aea:	41 e0       	ldi	r20, 0x01	; 1
    3aec:	0e 94 64 14 	call	0x28c8	; 0x28c8 <vSet_Pin_OUTPUTvalue>
	vSet_Pin_OUTPUTvalue(COL3_PORT,COL3_PIN,HIGH);
    3af0:	83 e0       	ldi	r24, 0x03	; 3
    3af2:	60 e0       	ldi	r22, 0x00	; 0
    3af4:	41 e0       	ldi	r20, 0x01	; 1
    3af6:	0e 94 64 14 	call	0x28c8	; 0x28c8 <vSet_Pin_OUTPUTvalue>
	vSet_Pin_OUTPUTvalue(COL4_PORT,COL4_PIN,HIGH);
    3afa:	83 e0       	ldi	r24, 0x03	; 3
    3afc:	61 e0       	ldi	r22, 0x01	; 1
    3afe:	41 e0       	ldi	r20, 0x01	; 1
    3b00:	0e 94 64 14 	call	0x28c8	; 0x28c8 <vSet_Pin_OUTPUTvalue>

	/*Enable internal Pull up resistor*/
	vSet_Pin_OUTPUTvalue(ROW1_PORT,ROW1_PIN,HIGH);
    3b04:	80 e0       	ldi	r24, 0x00	; 0
    3b06:	65 e0       	ldi	r22, 0x05	; 5
    3b08:	41 e0       	ldi	r20, 0x01	; 1
    3b0a:	0e 94 64 14 	call	0x28c8	; 0x28c8 <vSet_Pin_OUTPUTvalue>
	vSet_Pin_OUTPUTvalue(ROW2_PORT,ROW2_PIN,HIGH);
    3b0e:	80 e0       	ldi	r24, 0x00	; 0
    3b10:	66 e0       	ldi	r22, 0x06	; 6
    3b12:	41 e0       	ldi	r20, 0x01	; 1
    3b14:	0e 94 64 14 	call	0x28c8	; 0x28c8 <vSet_Pin_OUTPUTvalue>
	vSet_Pin_OUTPUTvalue(ROW3_PORT,ROW3_PIN,HIGH);
    3b18:	80 e0       	ldi	r24, 0x00	; 0
    3b1a:	62 e0       	ldi	r22, 0x02	; 2
    3b1c:	41 e0       	ldi	r20, 0x01	; 1
    3b1e:	0e 94 64 14 	call	0x28c8	; 0x28c8 <vSet_Pin_OUTPUTvalue>
	vSet_Pin_OUTPUTvalue(ROW4_PORT,ROW4_PIN,HIGH);
    3b22:	80 e0       	ldi	r24, 0x00	; 0
    3b24:	61 e0       	ldi	r22, 0x01	; 1
    3b26:	41 e0       	ldi	r20, 0x01	; 1
    3b28:	0e 94 64 14 	call	0x28c8	; 0x28c8 <vSet_Pin_OUTPUTvalue>
}
    3b2c:	cf 91       	pop	r28
    3b2e:	df 91       	pop	r29
    3b30:	08 95       	ret

00003b32 <u8KEY_PRESSED>:

u8 u8KEY_PRESSED()
{
    3b32:	df 93       	push	r29
    3b34:	cf 93       	push	r28
    3b36:	00 d0       	rcall	.+0      	; 0x3b38 <u8KEY_PRESSED+0x6>
    3b38:	0f 92       	push	r0
    3b3a:	cd b7       	in	r28, 0x3d	; 61
    3b3c:	de b7       	in	r29, 0x3e	; 62
	u8 KEY= NO_KEY;
    3b3e:	8f ef       	ldi	r24, 0xFF	; 255
    3b40:	8b 83       	std	Y+3, r24	; 0x03

	/*u8 flag = 0;*/

	for(u8 col=0;col<4;col++)
    3b42:	1a 82       	std	Y+2, r1	; 0x02
    3b44:	6c c0       	rjmp	.+216    	; 0x3c1e <u8KEY_PRESSED+0xec>
	{
		vSet_Pin_OUTPUTvalue(COL_PORT[col],COL_PIN[col],LOW);
    3b46:	8a 81       	ldd	r24, Y+2	; 0x02
    3b48:	88 2f       	mov	r24, r24
    3b4a:	90 e0       	ldi	r25, 0x00	; 0
    3b4c:	fc 01       	movw	r30, r24
    3b4e:	e4 5b       	subi	r30, 0xB4	; 180
    3b50:	fd 4f       	sbci	r31, 0xFD	; 253
    3b52:	20 81       	ld	r18, Z
    3b54:	8a 81       	ldd	r24, Y+2	; 0x02
    3b56:	88 2f       	mov	r24, r24
    3b58:	90 e0       	ldi	r25, 0x00	; 0
    3b5a:	fc 01       	movw	r30, r24
    3b5c:	e0 5b       	subi	r30, 0xB0	; 176
    3b5e:	fd 4f       	sbci	r31, 0xFD	; 253
    3b60:	90 81       	ld	r25, Z
    3b62:	82 2f       	mov	r24, r18
    3b64:	69 2f       	mov	r22, r25
    3b66:	40 e0       	ldi	r20, 0x00	; 0
    3b68:	0e 94 64 14 	call	0x28c8	; 0x28c8 <vSet_Pin_OUTPUTvalue>
		for(u8 row=0;row<4;row++)
    3b6c:	19 82       	std	Y+1, r1	; 0x01
    3b6e:	3d c0       	rjmp	.+122    	; 0x3bea <u8KEY_PRESSED+0xb8>
		{
			if(vGIT_PIN(ROW_PORT[row],ROW_PIN[row])==0)
    3b70:	89 81       	ldd	r24, Y+1	; 0x01
    3b72:	88 2f       	mov	r24, r24
    3b74:	90 e0       	ldi	r25, 0x00	; 0
    3b76:	fc 01       	movw	r30, r24
    3b78:	e5 59       	subi	r30, 0x95	; 149
    3b7a:	fd 4f       	sbci	r31, 0xFD	; 253
    3b7c:	20 81       	ld	r18, Z
    3b7e:	89 81       	ldd	r24, Y+1	; 0x01
    3b80:	88 2f       	mov	r24, r24
    3b82:	90 e0       	ldi	r25, 0x00	; 0
    3b84:	fc 01       	movw	r30, r24
    3b86:	ec 5a       	subi	r30, 0xAC	; 172
    3b88:	fd 4f       	sbci	r31, 0xFD	; 253
    3b8a:	90 81       	ld	r25, Z
    3b8c:	82 2f       	mov	r24, r18
    3b8e:	69 2f       	mov	r22, r25
    3b90:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <vGIT_PIN>
    3b94:	88 23       	and	r24, r24
    3b96:	91 f4       	brne	.+36     	; 0x3bbc <u8KEY_PRESSED+0x8a>
			{
				KEY=key_p[row][col];
    3b98:	89 81       	ldd	r24, Y+1	; 0x01
    3b9a:	48 2f       	mov	r20, r24
    3b9c:	50 e0       	ldi	r21, 0x00	; 0
    3b9e:	8a 81       	ldd	r24, Y+2	; 0x02
    3ba0:	28 2f       	mov	r18, r24
    3ba2:	30 e0       	ldi	r19, 0x00	; 0
    3ba4:	ca 01       	movw	r24, r20
    3ba6:	88 0f       	add	r24, r24
    3ba8:	99 1f       	adc	r25, r25
    3baa:	88 0f       	add	r24, r24
    3bac:	99 1f       	adc	r25, r25
    3bae:	82 0f       	add	r24, r18
    3bb0:	93 1f       	adc	r25, r19
    3bb2:	fc 01       	movw	r30, r24
    3bb4:	e8 5a       	subi	r30, 0xA8	; 168
    3bb6:	fd 4f       	sbci	r31, 0xFD	; 253
    3bb8:	80 81       	ld	r24, Z
    3bba:	8b 83       	std	Y+3, r24	; 0x03
				/*flag = 1;*/
			}
			while(vGIT_PIN(ROW_PORT[row],ROW_PIN[row])==0);
    3bbc:	89 81       	ldd	r24, Y+1	; 0x01
    3bbe:	88 2f       	mov	r24, r24
    3bc0:	90 e0       	ldi	r25, 0x00	; 0
    3bc2:	fc 01       	movw	r30, r24
    3bc4:	e5 59       	subi	r30, 0x95	; 149
    3bc6:	fd 4f       	sbci	r31, 0xFD	; 253
    3bc8:	20 81       	ld	r18, Z
    3bca:	89 81       	ldd	r24, Y+1	; 0x01
    3bcc:	88 2f       	mov	r24, r24
    3bce:	90 e0       	ldi	r25, 0x00	; 0
    3bd0:	fc 01       	movw	r30, r24
    3bd2:	ec 5a       	subi	r30, 0xAC	; 172
    3bd4:	fd 4f       	sbci	r31, 0xFD	; 253
    3bd6:	90 81       	ld	r25, Z
    3bd8:	82 2f       	mov	r24, r18
    3bda:	69 2f       	mov	r22, r25
    3bdc:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <vGIT_PIN>
    3be0:	88 23       	and	r24, r24
    3be2:	61 f3       	breq	.-40     	; 0x3bbc <u8KEY_PRESSED+0x8a>
	/*u8 flag = 0;*/

	for(u8 col=0;col<4;col++)
	{
		vSet_Pin_OUTPUTvalue(COL_PORT[col],COL_PIN[col],LOW);
		for(u8 row=0;row<4;row++)
    3be4:	89 81       	ldd	r24, Y+1	; 0x01
    3be6:	8f 5f       	subi	r24, 0xFF	; 255
    3be8:	89 83       	std	Y+1, r24	; 0x01
    3bea:	89 81       	ldd	r24, Y+1	; 0x01
    3bec:	84 30       	cpi	r24, 0x04	; 4
    3bee:	08 f4       	brcc	.+2      	; 0x3bf2 <u8KEY_PRESSED+0xc0>
    3bf0:	bf cf       	rjmp	.-130    	; 0x3b70 <u8KEY_PRESSED+0x3e>
				/*flag = 1;*/
			}
			while(vGIT_PIN(ROW_PORT[row],ROW_PIN[row])==0);
		}

		vSet_Pin_OUTPUTvalue(COL_PORT[col],COL_PIN[col],HIGH);
    3bf2:	8a 81       	ldd	r24, Y+2	; 0x02
    3bf4:	88 2f       	mov	r24, r24
    3bf6:	90 e0       	ldi	r25, 0x00	; 0
    3bf8:	fc 01       	movw	r30, r24
    3bfa:	e4 5b       	subi	r30, 0xB4	; 180
    3bfc:	fd 4f       	sbci	r31, 0xFD	; 253
    3bfe:	20 81       	ld	r18, Z
    3c00:	8a 81       	ldd	r24, Y+2	; 0x02
    3c02:	88 2f       	mov	r24, r24
    3c04:	90 e0       	ldi	r25, 0x00	; 0
    3c06:	fc 01       	movw	r30, r24
    3c08:	e0 5b       	subi	r30, 0xB0	; 176
    3c0a:	fd 4f       	sbci	r31, 0xFD	; 253
    3c0c:	90 81       	ld	r25, Z
    3c0e:	82 2f       	mov	r24, r18
    3c10:	69 2f       	mov	r22, r25
    3c12:	41 e0       	ldi	r20, 0x01	; 1
    3c14:	0e 94 64 14 	call	0x28c8	; 0x28c8 <vSet_Pin_OUTPUTvalue>
{
	u8 KEY= NO_KEY;

	/*u8 flag = 0;*/

	for(u8 col=0;col<4;col++)
    3c18:	8a 81       	ldd	r24, Y+2	; 0x02
    3c1a:	8f 5f       	subi	r24, 0xFF	; 255
    3c1c:	8a 83       	std	Y+2, r24	; 0x02
    3c1e:	8a 81       	ldd	r24, Y+2	; 0x02
    3c20:	84 30       	cpi	r24, 0x04	; 4
    3c22:	08 f4       	brcc	.+2      	; 0x3c26 <u8KEY_PRESSED+0xf4>
    3c24:	90 cf       	rjmp	.-224    	; 0x3b46 <u8KEY_PRESSED+0x14>
/*
		if(flag == 1)
			break;
*/
	}
	return KEY;
    3c26:	8b 81       	ldd	r24, Y+3	; 0x03

}
    3c28:	0f 90       	pop	r0
    3c2a:	0f 90       	pop	r0
    3c2c:	0f 90       	pop	r0
    3c2e:	cf 91       	pop	r28
    3c30:	df 91       	pop	r29
    3c32:	08 95       	ret

00003c34 <EEPROM_voidSendDataByte>:
#include "EEPROM_Interface.h"


/* A function to write a byte on the EEPROM */
void EEPROM_voidSendDataByte(u16 Copy_u16LocationAddress, u8 Copy_u8DataByte)
{
    3c34:	df 93       	push	r29
    3c36:	cf 93       	push	r28
    3c38:	cd b7       	in	r28, 0x3d	; 61
    3c3a:	de b7       	in	r29, 0x3e	; 62
    3c3c:	62 97       	sbiw	r28, 0x12	; 18
    3c3e:	0f b6       	in	r0, 0x3f	; 63
    3c40:	f8 94       	cli
    3c42:	de bf       	out	0x3e, r29	; 62
    3c44:	0f be       	out	0x3f, r0	; 63
    3c46:	cd bf       	out	0x3d, r28	; 61
    3c48:	99 8b       	std	Y+17, r25	; 0x11
    3c4a:	88 8b       	std	Y+16, r24	; 0x10
    3c4c:	6a 8b       	std	Y+18, r22	; 0x12
	u8 Local_u8AddressPacket;

	Local_u8AddressPacket = EEPROM_FIXED_ADDRESS | (A2_CONNECTION <<2) | (u8)(Copy_u16LocationAddress >>8);
    3c4e:	88 89       	ldd	r24, Y+16	; 0x10
    3c50:	99 89       	ldd	r25, Y+17	; 0x11
    3c52:	89 2f       	mov	r24, r25
    3c54:	99 27       	eor	r25, r25
    3c56:	80 65       	ori	r24, 0x50	; 80
    3c58:	8f 87       	std	Y+15, r24	; 0x0f

	/*Send start condition*/
	TWI_SendStartCondition();
    3c5a:	0e 94 9a 10 	call	0x2134	; 0x2134 <TWI_SendStartCondition>

	/*Send the address packet*/
	TWI_SendSlaveAddressWithWrite(Local_u8AddressPacket);
    3c5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c60:	0e 94 ee 10 	call	0x21dc	; 0x21dc <TWI_SendSlaveAddressWithWrite>

	/*Send the rest 8bits of the location address*/
	TWI_MasterWriteDataByte((u8)Copy_u16LocationAddress);
    3c64:	88 89       	ldd	r24, Y+16	; 0x10
    3c66:	0e 94 5e 11 	call	0x22bc	; 0x22bc <TWI_MasterWriteDataByte>

	/*Send the data byte to the memory location*/
	TWI_MasterWriteDataByte(Copy_u8DataByte);
    3c6a:	8a 89       	ldd	r24, Y+18	; 0x12
    3c6c:	0e 94 5e 11 	call	0x22bc	; 0x22bc <TWI_MasterWriteDataByte>

	/*Send stop condition*/
	TWI_SendStopCondition();
    3c70:	0e 94 bd 11 	call	0x237a	; 0x237a <TWI_SendStopCondition>
    3c74:	80 e0       	ldi	r24, 0x00	; 0
    3c76:	90 e0       	ldi	r25, 0x00	; 0
    3c78:	a0 e2       	ldi	r26, 0x20	; 32
    3c7a:	b1 e4       	ldi	r27, 0x41	; 65
    3c7c:	8b 87       	std	Y+11, r24	; 0x0b
    3c7e:	9c 87       	std	Y+12, r25	; 0x0c
    3c80:	ad 87       	std	Y+13, r26	; 0x0d
    3c82:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c84:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c86:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c88:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c8c:	20 e0       	ldi	r18, 0x00	; 0
    3c8e:	30 e0       	ldi	r19, 0x00	; 0
    3c90:	4a ef       	ldi	r20, 0xFA	; 250
    3c92:	54 e4       	ldi	r21, 0x44	; 68
    3c94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c98:	dc 01       	movw	r26, r24
    3c9a:	cb 01       	movw	r24, r22
    3c9c:	8f 83       	std	Y+7, r24	; 0x07
    3c9e:	98 87       	std	Y+8, r25	; 0x08
    3ca0:	a9 87       	std	Y+9, r26	; 0x09
    3ca2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ca4:	6f 81       	ldd	r22, Y+7	; 0x07
    3ca6:	78 85       	ldd	r23, Y+8	; 0x08
    3ca8:	89 85       	ldd	r24, Y+9	; 0x09
    3caa:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cac:	20 e0       	ldi	r18, 0x00	; 0
    3cae:	30 e0       	ldi	r19, 0x00	; 0
    3cb0:	40 e8       	ldi	r20, 0x80	; 128
    3cb2:	5f e3       	ldi	r21, 0x3F	; 63
    3cb4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3cb8:	88 23       	and	r24, r24
    3cba:	2c f4       	brge	.+10     	; 0x3cc6 <EEPROM_voidSendDataByte+0x92>
		__ticks = 1;
    3cbc:	81 e0       	ldi	r24, 0x01	; 1
    3cbe:	90 e0       	ldi	r25, 0x00	; 0
    3cc0:	9e 83       	std	Y+6, r25	; 0x06
    3cc2:	8d 83       	std	Y+5, r24	; 0x05
    3cc4:	3f c0       	rjmp	.+126    	; 0x3d44 <EEPROM_voidSendDataByte+0x110>
	else if (__tmp > 65535)
    3cc6:	6f 81       	ldd	r22, Y+7	; 0x07
    3cc8:	78 85       	ldd	r23, Y+8	; 0x08
    3cca:	89 85       	ldd	r24, Y+9	; 0x09
    3ccc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cce:	20 e0       	ldi	r18, 0x00	; 0
    3cd0:	3f ef       	ldi	r19, 0xFF	; 255
    3cd2:	4f e7       	ldi	r20, 0x7F	; 127
    3cd4:	57 e4       	ldi	r21, 0x47	; 71
    3cd6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3cda:	18 16       	cp	r1, r24
    3cdc:	4c f5       	brge	.+82     	; 0x3d30 <EEPROM_voidSendDataByte+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cde:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ce0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ce2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ce4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ce6:	20 e0       	ldi	r18, 0x00	; 0
    3ce8:	30 e0       	ldi	r19, 0x00	; 0
    3cea:	40 e2       	ldi	r20, 0x20	; 32
    3cec:	51 e4       	ldi	r21, 0x41	; 65
    3cee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cf2:	dc 01       	movw	r26, r24
    3cf4:	cb 01       	movw	r24, r22
    3cf6:	bc 01       	movw	r22, r24
    3cf8:	cd 01       	movw	r24, r26
    3cfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cfe:	dc 01       	movw	r26, r24
    3d00:	cb 01       	movw	r24, r22
    3d02:	9e 83       	std	Y+6, r25	; 0x06
    3d04:	8d 83       	std	Y+5, r24	; 0x05
    3d06:	0f c0       	rjmp	.+30     	; 0x3d26 <EEPROM_voidSendDataByte+0xf2>
    3d08:	88 ec       	ldi	r24, 0xC8	; 200
    3d0a:	90 e0       	ldi	r25, 0x00	; 0
    3d0c:	9c 83       	std	Y+4, r25	; 0x04
    3d0e:	8b 83       	std	Y+3, r24	; 0x03
    3d10:	8b 81       	ldd	r24, Y+3	; 0x03
    3d12:	9c 81       	ldd	r25, Y+4	; 0x04
    3d14:	01 97       	sbiw	r24, 0x01	; 1
    3d16:	f1 f7       	brne	.-4      	; 0x3d14 <EEPROM_voidSendDataByte+0xe0>
    3d18:	9c 83       	std	Y+4, r25	; 0x04
    3d1a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d1c:	8d 81       	ldd	r24, Y+5	; 0x05
    3d1e:	9e 81       	ldd	r25, Y+6	; 0x06
    3d20:	01 97       	sbiw	r24, 0x01	; 1
    3d22:	9e 83       	std	Y+6, r25	; 0x06
    3d24:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d26:	8d 81       	ldd	r24, Y+5	; 0x05
    3d28:	9e 81       	ldd	r25, Y+6	; 0x06
    3d2a:	00 97       	sbiw	r24, 0x00	; 0
    3d2c:	69 f7       	brne	.-38     	; 0x3d08 <EEPROM_voidSendDataByte+0xd4>
    3d2e:	14 c0       	rjmp	.+40     	; 0x3d58 <EEPROM_voidSendDataByte+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d30:	6f 81       	ldd	r22, Y+7	; 0x07
    3d32:	78 85       	ldd	r23, Y+8	; 0x08
    3d34:	89 85       	ldd	r24, Y+9	; 0x09
    3d36:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d3c:	dc 01       	movw	r26, r24
    3d3e:	cb 01       	movw	r24, r22
    3d40:	9e 83       	std	Y+6, r25	; 0x06
    3d42:	8d 83       	std	Y+5, r24	; 0x05
    3d44:	8d 81       	ldd	r24, Y+5	; 0x05
    3d46:	9e 81       	ldd	r25, Y+6	; 0x06
    3d48:	9a 83       	std	Y+2, r25	; 0x02
    3d4a:	89 83       	std	Y+1, r24	; 0x01
    3d4c:	89 81       	ldd	r24, Y+1	; 0x01
    3d4e:	9a 81       	ldd	r25, Y+2	; 0x02
    3d50:	01 97       	sbiw	r24, 0x01	; 1
    3d52:	f1 f7       	brne	.-4      	; 0x3d50 <EEPROM_voidSendDataByte+0x11c>
    3d54:	9a 83       	std	Y+2, r25	; 0x02
    3d56:	89 83       	std	Y+1, r24	; 0x01

	/*Delay until the write cycle is finished*/
	_delay_ms(10);
}
    3d58:	62 96       	adiw	r28, 0x12	; 18
    3d5a:	0f b6       	in	r0, 0x3f	; 63
    3d5c:	f8 94       	cli
    3d5e:	de bf       	out	0x3e, r29	; 62
    3d60:	0f be       	out	0x3f, r0	; 63
    3d62:	cd bf       	out	0x3d, r28	; 61
    3d64:	cf 91       	pop	r28
    3d66:	df 91       	pop	r29
    3d68:	08 95       	ret

00003d6a <EEPROM_u8ReadDataByte>:

/* A function to read a byte on the EEPROM */
u8 EEPROM_u8ReadDataByte(u16 Copy_u16LocationAddress)
{
    3d6a:	df 93       	push	r29
    3d6c:	cf 93       	push	r28
    3d6e:	cd b7       	in	r28, 0x3d	; 61
    3d70:	de b7       	in	r29, 0x3e	; 62
    3d72:	62 97       	sbiw	r28, 0x12	; 18
    3d74:	0f b6       	in	r0, 0x3f	; 63
    3d76:	f8 94       	cli
    3d78:	de bf       	out	0x3e, r29	; 62
    3d7a:	0f be       	out	0x3f, r0	; 63
    3d7c:	cd bf       	out	0x3d, r28	; 61
    3d7e:	9a 8b       	std	Y+18, r25	; 0x12
    3d80:	89 8b       	std	Y+17, r24	; 0x11
	u8 Local_u8AddressPacket;
	u8 Local_u8Data = 0;
    3d82:	18 8a       	std	Y+16, r1	; 0x10

	Local_u8AddressPacket = EEPROM_FIXED_ADDRESS | (A2_CONNECTION <<2) | (u8)(Copy_u16LocationAddress >>8);
    3d84:	89 89       	ldd	r24, Y+17	; 0x11
    3d86:	9a 89       	ldd	r25, Y+18	; 0x12
    3d88:	89 2f       	mov	r24, r25
    3d8a:	99 27       	eor	r25, r25
    3d8c:	80 65       	ori	r24, 0x50	; 80
    3d8e:	8f 87       	std	Y+15, r24	; 0x0f

	/*Send start condition*/
	TWI_SendStartCondition();
    3d90:	0e 94 9a 10 	call	0x2134	; 0x2134 <TWI_SendStartCondition>

	/*Send the address packet with write request*/
	TWI_SendSlaveAddressWithWrite(Local_u8AddressPacket);
    3d94:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d96:	0e 94 ee 10 	call	0x21dc	; 0x21dc <TWI_SendSlaveAddressWithWrite>

	/*Send the rest 8bits of the location address*/
	TWI_MasterWriteDataByte((u8)Copy_u16LocationAddress);
    3d9a:	89 89       	ldd	r24, Y+17	; 0x11
    3d9c:	0e 94 5e 11 	call	0x22bc	; 0x22bc <TWI_MasterWriteDataByte>

	/*Send repeated start to change write request into read request*/
	TWI_SendRepeatedStart();
    3da0:	0e 94 c4 10 	call	0x2188	; 0x2188 <TWI_SendRepeatedStart>

	/*Send the address packet with read request*/
	TWI_SendSlaveAddressWithRead(Local_u8AddressPacket);
    3da4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3da6:	0e 94 26 11 	call	0x224c	; 0x224c <TWI_SendSlaveAddressWithRead>

	/*Get the data from memory*/
	TWI_MasterReadDataByte(&Local_u8Data);
    3daa:	ce 01       	movw	r24, r28
    3dac:	40 96       	adiw	r24, 0x10	; 16
    3dae:	0e 94 87 11 	call	0x230e	; 0x230e <TWI_MasterReadDataByte>

	/*send the stop condition*/
	TWI_SendStopCondition();
    3db2:	0e 94 bd 11 	call	0x237a	; 0x237a <TWI_SendStopCondition>
    3db6:	80 e0       	ldi	r24, 0x00	; 0
    3db8:	90 e0       	ldi	r25, 0x00	; 0
    3dba:	a0 e2       	ldi	r26, 0x20	; 32
    3dbc:	b1 e4       	ldi	r27, 0x41	; 65
    3dbe:	8b 87       	std	Y+11, r24	; 0x0b
    3dc0:	9c 87       	std	Y+12, r25	; 0x0c
    3dc2:	ad 87       	std	Y+13, r26	; 0x0d
    3dc4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dc6:	6b 85       	ldd	r22, Y+11	; 0x0b
    3dc8:	7c 85       	ldd	r23, Y+12	; 0x0c
    3dca:	8d 85       	ldd	r24, Y+13	; 0x0d
    3dcc:	9e 85       	ldd	r25, Y+14	; 0x0e
    3dce:	20 e0       	ldi	r18, 0x00	; 0
    3dd0:	30 e0       	ldi	r19, 0x00	; 0
    3dd2:	4a ef       	ldi	r20, 0xFA	; 250
    3dd4:	54 e4       	ldi	r21, 0x44	; 68
    3dd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dda:	dc 01       	movw	r26, r24
    3ddc:	cb 01       	movw	r24, r22
    3dde:	8f 83       	std	Y+7, r24	; 0x07
    3de0:	98 87       	std	Y+8, r25	; 0x08
    3de2:	a9 87       	std	Y+9, r26	; 0x09
    3de4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3de6:	6f 81       	ldd	r22, Y+7	; 0x07
    3de8:	78 85       	ldd	r23, Y+8	; 0x08
    3dea:	89 85       	ldd	r24, Y+9	; 0x09
    3dec:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dee:	20 e0       	ldi	r18, 0x00	; 0
    3df0:	30 e0       	ldi	r19, 0x00	; 0
    3df2:	40 e8       	ldi	r20, 0x80	; 128
    3df4:	5f e3       	ldi	r21, 0x3F	; 63
    3df6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3dfa:	88 23       	and	r24, r24
    3dfc:	2c f4       	brge	.+10     	; 0x3e08 <EEPROM_u8ReadDataByte+0x9e>
		__ticks = 1;
    3dfe:	81 e0       	ldi	r24, 0x01	; 1
    3e00:	90 e0       	ldi	r25, 0x00	; 0
    3e02:	9e 83       	std	Y+6, r25	; 0x06
    3e04:	8d 83       	std	Y+5, r24	; 0x05
    3e06:	3f c0       	rjmp	.+126    	; 0x3e86 <EEPROM_u8ReadDataByte+0x11c>
	else if (__tmp > 65535)
    3e08:	6f 81       	ldd	r22, Y+7	; 0x07
    3e0a:	78 85       	ldd	r23, Y+8	; 0x08
    3e0c:	89 85       	ldd	r24, Y+9	; 0x09
    3e0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e10:	20 e0       	ldi	r18, 0x00	; 0
    3e12:	3f ef       	ldi	r19, 0xFF	; 255
    3e14:	4f e7       	ldi	r20, 0x7F	; 127
    3e16:	57 e4       	ldi	r21, 0x47	; 71
    3e18:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3e1c:	18 16       	cp	r1, r24
    3e1e:	4c f5       	brge	.+82     	; 0x3e72 <EEPROM_u8ReadDataByte+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e20:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e22:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e24:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e26:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e28:	20 e0       	ldi	r18, 0x00	; 0
    3e2a:	30 e0       	ldi	r19, 0x00	; 0
    3e2c:	40 e2       	ldi	r20, 0x20	; 32
    3e2e:	51 e4       	ldi	r21, 0x41	; 65
    3e30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e34:	dc 01       	movw	r26, r24
    3e36:	cb 01       	movw	r24, r22
    3e38:	bc 01       	movw	r22, r24
    3e3a:	cd 01       	movw	r24, r26
    3e3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e40:	dc 01       	movw	r26, r24
    3e42:	cb 01       	movw	r24, r22
    3e44:	9e 83       	std	Y+6, r25	; 0x06
    3e46:	8d 83       	std	Y+5, r24	; 0x05
    3e48:	0f c0       	rjmp	.+30     	; 0x3e68 <EEPROM_u8ReadDataByte+0xfe>
    3e4a:	88 ec       	ldi	r24, 0xC8	; 200
    3e4c:	90 e0       	ldi	r25, 0x00	; 0
    3e4e:	9c 83       	std	Y+4, r25	; 0x04
    3e50:	8b 83       	std	Y+3, r24	; 0x03
    3e52:	8b 81       	ldd	r24, Y+3	; 0x03
    3e54:	9c 81       	ldd	r25, Y+4	; 0x04
    3e56:	01 97       	sbiw	r24, 0x01	; 1
    3e58:	f1 f7       	brne	.-4      	; 0x3e56 <EEPROM_u8ReadDataByte+0xec>
    3e5a:	9c 83       	std	Y+4, r25	; 0x04
    3e5c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e5e:	8d 81       	ldd	r24, Y+5	; 0x05
    3e60:	9e 81       	ldd	r25, Y+6	; 0x06
    3e62:	01 97       	sbiw	r24, 0x01	; 1
    3e64:	9e 83       	std	Y+6, r25	; 0x06
    3e66:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e68:	8d 81       	ldd	r24, Y+5	; 0x05
    3e6a:	9e 81       	ldd	r25, Y+6	; 0x06
    3e6c:	00 97       	sbiw	r24, 0x00	; 0
    3e6e:	69 f7       	brne	.-38     	; 0x3e4a <EEPROM_u8ReadDataByte+0xe0>
    3e70:	14 c0       	rjmp	.+40     	; 0x3e9a <EEPROM_u8ReadDataByte+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e72:	6f 81       	ldd	r22, Y+7	; 0x07
    3e74:	78 85       	ldd	r23, Y+8	; 0x08
    3e76:	89 85       	ldd	r24, Y+9	; 0x09
    3e78:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e7e:	dc 01       	movw	r26, r24
    3e80:	cb 01       	movw	r24, r22
    3e82:	9e 83       	std	Y+6, r25	; 0x06
    3e84:	8d 83       	std	Y+5, r24	; 0x05
    3e86:	8d 81       	ldd	r24, Y+5	; 0x05
    3e88:	9e 81       	ldd	r25, Y+6	; 0x06
    3e8a:	9a 83       	std	Y+2, r25	; 0x02
    3e8c:	89 83       	std	Y+1, r24	; 0x01
    3e8e:	89 81       	ldd	r24, Y+1	; 0x01
    3e90:	9a 81       	ldd	r25, Y+2	; 0x02
    3e92:	01 97       	sbiw	r24, 0x01	; 1
    3e94:	f1 f7       	brne	.-4      	; 0x3e92 <EEPROM_u8ReadDataByte+0x128>
    3e96:	9a 83       	std	Y+2, r25	; 0x02
    3e98:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(10);

	return Local_u8Data;
    3e9a:	88 89       	ldd	r24, Y+16	; 0x10
}
    3e9c:	62 96       	adiw	r28, 0x12	; 18
    3e9e:	0f b6       	in	r0, 0x3f	; 63
    3ea0:	f8 94       	cli
    3ea2:	de bf       	out	0x3e, r29	; 62
    3ea4:	0f be       	out	0x3f, r0	; 63
    3ea6:	cd bf       	out	0x3d, r28	; 61
    3ea8:	cf 91       	pop	r28
    3eaa:	df 91       	pop	r29
    3eac:	08 95       	ret

00003eae <main>:
		{"user6", "pass6"}, {"user7", "pass7"}, {"user8", "pass8"}, {"user9", "pass9"}, {"user10", "pass10"}
};
 */


int main() {
    3eae:	0f 93       	push	r16
    3eb0:	1f 93       	push	r17
    3eb2:	df 93       	push	r29
    3eb4:	cf 93       	push	r28
    3eb6:	cd b7       	in	r28, 0x3d	; 61
    3eb8:	de b7       	in	r29, 0x3e	; 62
    3eba:	c8 51       	subi	r28, 0x18	; 24
    3ebc:	d1 40       	sbci	r29, 0x01	; 1
    3ebe:	0f b6       	in	r0, 0x3f	; 63
    3ec0:	f8 94       	cli
    3ec2:	de bf       	out	0x3e, r29	; 62
    3ec4:	0f be       	out	0x3f, r0	; 63
    3ec6:	cd bf       	out	0x3d, r28	; 61

	TWI_voidMasterInit(0);
    3ec8:	80 e0       	ldi	r24, 0x00	; 0
    3eca:	0e 94 59 10 	call	0x20b2	; 0x20b2 <TWI_voidMasterInit>
	app_init();
    3ece:	0e 94 a3 05 	call	0xb46	; 0xb46 <app_init>
	// Display initial messages on the LCD
	welcome_message(); // Send "HELLO" to LCD
    3ed2:	0e 94 e6 05 	call	0xbcc	; 0xbcc <welcome_message>
    3ed6:	fe 01       	movw	r30, r28
    3ed8:	e5 51       	subi	r30, 0x15	; 21
    3eda:	ff 4f       	sbci	r31, 0xFF	; 255
    3edc:	80 e0       	ldi	r24, 0x00	; 0
    3ede:	90 e0       	ldi	r25, 0x00	; 0
    3ee0:	aa ef       	ldi	r26, 0xFA	; 250
    3ee2:	b4 e4       	ldi	r27, 0x44	; 68
    3ee4:	80 83       	st	Z, r24
    3ee6:	91 83       	std	Z+1, r25	; 0x01
    3ee8:	a2 83       	std	Z+2, r26	; 0x02
    3eea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3eec:	8e 01       	movw	r16, r28
    3eee:	09 51       	subi	r16, 0x19	; 25
    3ef0:	1f 4f       	sbci	r17, 0xFF	; 255
    3ef2:	fe 01       	movw	r30, r28
    3ef4:	e5 51       	subi	r30, 0x15	; 21
    3ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ef8:	60 81       	ld	r22, Z
    3efa:	71 81       	ldd	r23, Z+1	; 0x01
    3efc:	82 81       	ldd	r24, Z+2	; 0x02
    3efe:	93 81       	ldd	r25, Z+3	; 0x03
    3f00:	20 e0       	ldi	r18, 0x00	; 0
    3f02:	30 e0       	ldi	r19, 0x00	; 0
    3f04:	4a ef       	ldi	r20, 0xFA	; 250
    3f06:	54 e4       	ldi	r21, 0x44	; 68
    3f08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f0c:	dc 01       	movw	r26, r24
    3f0e:	cb 01       	movw	r24, r22
    3f10:	f8 01       	movw	r30, r16
    3f12:	80 83       	st	Z, r24
    3f14:	91 83       	std	Z+1, r25	; 0x01
    3f16:	a2 83       	std	Z+2, r26	; 0x02
    3f18:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f1a:	fe 01       	movw	r30, r28
    3f1c:	e9 51       	subi	r30, 0x19	; 25
    3f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f20:	60 81       	ld	r22, Z
    3f22:	71 81       	ldd	r23, Z+1	; 0x01
    3f24:	82 81       	ldd	r24, Z+2	; 0x02
    3f26:	93 81       	ldd	r25, Z+3	; 0x03
    3f28:	20 e0       	ldi	r18, 0x00	; 0
    3f2a:	30 e0       	ldi	r19, 0x00	; 0
    3f2c:	40 e8       	ldi	r20, 0x80	; 128
    3f2e:	5f e3       	ldi	r21, 0x3F	; 63
    3f30:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f34:	88 23       	and	r24, r24
    3f36:	44 f4       	brge	.+16     	; 0x3f48 <main+0x9a>
		__ticks = 1;
    3f38:	fe 01       	movw	r30, r28
    3f3a:	eb 51       	subi	r30, 0x1B	; 27
    3f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f3e:	81 e0       	ldi	r24, 0x01	; 1
    3f40:	90 e0       	ldi	r25, 0x00	; 0
    3f42:	91 83       	std	Z+1, r25	; 0x01
    3f44:	80 83       	st	Z, r24
    3f46:	64 c0       	rjmp	.+200    	; 0x4010 <main+0x162>
	else if (__tmp > 65535)
    3f48:	fe 01       	movw	r30, r28
    3f4a:	e9 51       	subi	r30, 0x19	; 25
    3f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f4e:	60 81       	ld	r22, Z
    3f50:	71 81       	ldd	r23, Z+1	; 0x01
    3f52:	82 81       	ldd	r24, Z+2	; 0x02
    3f54:	93 81       	ldd	r25, Z+3	; 0x03
    3f56:	20 e0       	ldi	r18, 0x00	; 0
    3f58:	3f ef       	ldi	r19, 0xFF	; 255
    3f5a:	4f e7       	ldi	r20, 0x7F	; 127
    3f5c:	57 e4       	ldi	r21, 0x47	; 71
    3f5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3f62:	18 16       	cp	r1, r24
    3f64:	0c f0       	brlt	.+2      	; 0x3f68 <main+0xba>
    3f66:	43 c0       	rjmp	.+134    	; 0x3fee <main+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f68:	fe 01       	movw	r30, r28
    3f6a:	e5 51       	subi	r30, 0x15	; 21
    3f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f6e:	60 81       	ld	r22, Z
    3f70:	71 81       	ldd	r23, Z+1	; 0x01
    3f72:	82 81       	ldd	r24, Z+2	; 0x02
    3f74:	93 81       	ldd	r25, Z+3	; 0x03
    3f76:	20 e0       	ldi	r18, 0x00	; 0
    3f78:	30 e0       	ldi	r19, 0x00	; 0
    3f7a:	40 e2       	ldi	r20, 0x20	; 32
    3f7c:	51 e4       	ldi	r21, 0x41	; 65
    3f7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f82:	dc 01       	movw	r26, r24
    3f84:	cb 01       	movw	r24, r22
    3f86:	8e 01       	movw	r16, r28
    3f88:	0b 51       	subi	r16, 0x1B	; 27
    3f8a:	1f 4f       	sbci	r17, 0xFF	; 255
    3f8c:	bc 01       	movw	r22, r24
    3f8e:	cd 01       	movw	r24, r26
    3f90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f94:	dc 01       	movw	r26, r24
    3f96:	cb 01       	movw	r24, r22
    3f98:	f8 01       	movw	r30, r16
    3f9a:	91 83       	std	Z+1, r25	; 0x01
    3f9c:	80 83       	st	Z, r24
    3f9e:	1f c0       	rjmp	.+62     	; 0x3fde <main+0x130>
    3fa0:	fe 01       	movw	r30, r28
    3fa2:	ed 51       	subi	r30, 0x1D	; 29
    3fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa6:	88 ec       	ldi	r24, 0xC8	; 200
    3fa8:	90 e0       	ldi	r25, 0x00	; 0
    3faa:	91 83       	std	Z+1, r25	; 0x01
    3fac:	80 83       	st	Z, r24
    3fae:	fe 01       	movw	r30, r28
    3fb0:	ed 51       	subi	r30, 0x1D	; 29
    3fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb4:	80 81       	ld	r24, Z
    3fb6:	91 81       	ldd	r25, Z+1	; 0x01
    3fb8:	01 97       	sbiw	r24, 0x01	; 1
    3fba:	f1 f7       	brne	.-4      	; 0x3fb8 <main+0x10a>
    3fbc:	fe 01       	movw	r30, r28
    3fbe:	ed 51       	subi	r30, 0x1D	; 29
    3fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc2:	91 83       	std	Z+1, r25	; 0x01
    3fc4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fc6:	de 01       	movw	r26, r28
    3fc8:	ab 51       	subi	r26, 0x1B	; 27
    3fca:	bf 4f       	sbci	r27, 0xFF	; 255
    3fcc:	fe 01       	movw	r30, r28
    3fce:	eb 51       	subi	r30, 0x1B	; 27
    3fd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd2:	80 81       	ld	r24, Z
    3fd4:	91 81       	ldd	r25, Z+1	; 0x01
    3fd6:	01 97       	sbiw	r24, 0x01	; 1
    3fd8:	11 96       	adiw	r26, 0x01	; 1
    3fda:	9c 93       	st	X, r25
    3fdc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fde:	fe 01       	movw	r30, r28
    3fe0:	eb 51       	subi	r30, 0x1B	; 27
    3fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fe4:	80 81       	ld	r24, Z
    3fe6:	91 81       	ldd	r25, Z+1	; 0x01
    3fe8:	00 97       	sbiw	r24, 0x00	; 0
    3fea:	d1 f6       	brne	.-76     	; 0x3fa0 <main+0xf2>
    3fec:	27 c0       	rjmp	.+78     	; 0x403c <main+0x18e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fee:	8e 01       	movw	r16, r28
    3ff0:	0b 51       	subi	r16, 0x1B	; 27
    3ff2:	1f 4f       	sbci	r17, 0xFF	; 255
    3ff4:	fe 01       	movw	r30, r28
    3ff6:	e9 51       	subi	r30, 0x19	; 25
    3ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    3ffa:	60 81       	ld	r22, Z
    3ffc:	71 81       	ldd	r23, Z+1	; 0x01
    3ffe:	82 81       	ldd	r24, Z+2	; 0x02
    4000:	93 81       	ldd	r25, Z+3	; 0x03
    4002:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4006:	dc 01       	movw	r26, r24
    4008:	cb 01       	movw	r24, r22
    400a:	f8 01       	movw	r30, r16
    400c:	91 83       	std	Z+1, r25	; 0x01
    400e:	80 83       	st	Z, r24
    4010:	de 01       	movw	r26, r28
    4012:	af 51       	subi	r26, 0x1F	; 31
    4014:	bf 4f       	sbci	r27, 0xFF	; 255
    4016:	fe 01       	movw	r30, r28
    4018:	eb 51       	subi	r30, 0x1B	; 27
    401a:	ff 4f       	sbci	r31, 0xFF	; 255
    401c:	80 81       	ld	r24, Z
    401e:	91 81       	ldd	r25, Z+1	; 0x01
    4020:	8d 93       	st	X+, r24
    4022:	9c 93       	st	X, r25
    4024:	fe 01       	movw	r30, r28
    4026:	ef 51       	subi	r30, 0x1F	; 31
    4028:	ff 4f       	sbci	r31, 0xFF	; 255
    402a:	80 81       	ld	r24, Z
    402c:	91 81       	ldd	r25, Z+1	; 0x01
    402e:	01 97       	sbiw	r24, 0x01	; 1
    4030:	f1 f7       	brne	.-4      	; 0x402e <main+0x180>
    4032:	fe 01       	movw	r30, r28
    4034:	ef 51       	subi	r30, 0x1F	; 31
    4036:	ff 4f       	sbci	r31, 0xFF	; 255
    4038:	91 83       	std	Z+1, r25	; 0x01
    403a:	80 83       	st	Z, r24




	u8 choice;
	u16 readdigit=0;
    403c:	fe 01       	movw	r30, r28
    403e:	ee 5e       	subi	r30, 0xEE	; 238
    4040:	fe 4f       	sbci	r31, 0xFE	; 254
    4042:	11 82       	std	Z+1, r1	; 0x01
    4044:	10 82       	st	Z, r1
	u16 readdigit2=0;
    4046:	fe 01       	movw	r30, r28
    4048:	e0 5f       	subi	r30, 0xF0	; 240
    404a:	fe 4f       	sbci	r31, 0xFE	; 254
    404c:	11 82       	std	Z+1, r1	; 0x01
    404e:	10 82       	st	Z, r1
	u32 Temp=0,VOIL = 0;
    4050:	fe 01       	movw	r30, r28
    4052:	e4 5f       	subi	r30, 0xF4	; 244
    4054:	fe 4f       	sbci	r31, 0xFE	; 254
    4056:	10 82       	st	Z, r1
    4058:	11 82       	std	Z+1, r1	; 0x01
    405a:	12 82       	std	Z+2, r1	; 0x02
    405c:	13 82       	std	Z+3, r1	; 0x03
    405e:	fe 01       	movw	r30, r28
    4060:	e8 5f       	subi	r30, 0xF8	; 248
    4062:	fe 4f       	sbci	r31, 0xFE	; 254
    4064:	10 82       	st	Z, r1
    4066:	11 82       	std	Z+1, r1	; 0x01
    4068:	12 82       	std	Z+2, r1	; 0x02
    406a:	13 82       	std	Z+3, r1	; 0x03
	u32 prevReading = 0xFFFFFFFF;
    406c:	fe 01       	movw	r30, r28
    406e:	ec 5f       	subi	r30, 0xFC	; 252
    4070:	fe 4f       	sbci	r31, 0xFE	; 254
    4072:	8f ef       	ldi	r24, 0xFF	; 255
    4074:	9f ef       	ldi	r25, 0xFF	; 255
    4076:	af ef       	ldi	r26, 0xFF	; 255
    4078:	bf ef       	ldi	r27, 0xFF	; 255
    407a:	80 83       	st	Z, r24
    407c:	91 83       	std	Z+1, r25	; 0x01
    407e:	a2 83       	std	Z+2, r26	; 0x02
    4080:	b3 83       	std	Z+3, r27	; 0x03
	u32 LDRprevReading = 0xFFFFFFFF;
    4082:	fe 01       	movw	r30, r28
    4084:	e0 50       	subi	r30, 0x00	; 0
    4086:	ff 4f       	sbci	r31, 0xFF	; 255
    4088:	8f ef       	ldi	r24, 0xFF	; 255
    408a:	9f ef       	ldi	r25, 0xFF	; 255
    408c:	af ef       	ldi	r26, 0xFF	; 255
    408e:	bf ef       	ldi	r27, 0xFF	; 255
    4090:	80 83       	st	Z, r24
    4092:	91 83       	std	Z+1, r25	; 0x01
    4094:	a2 83       	std	Z+2, r26	; 0x02
    4096:	b3 83       	std	Z+3, r27	; 0x03

	u32 LDR_room=0;
    4098:	fe 01       	movw	r30, r28
    409a:	e4 50       	subi	r30, 0x04	; 4
    409c:	ff 4f       	sbci	r31, 0xFF	; 255
    409e:	10 82       	st	Z, r1
    40a0:	11 82       	std	Z+1, r1	; 0x01
    40a2:	12 82       	std	Z+2, r1	; 0x02
    40a4:	13 82       	std	Z+3, r1	; 0x03
	u8 start =1;
    40a6:	fe 01       	movw	r30, r28
    40a8:	e5 50       	subi	r30, 0x05	; 5
    40aa:	ff 4f       	sbci	r31, 0xFF	; 255
    40ac:	81 e0       	ldi	r24, 0x01	; 1
    40ae:	80 83       	st	Z, r24
	u8 start2 =1;
    40b0:	fe 01       	movw	r30, r28
    40b2:	e6 50       	subi	r30, 0x06	; 6
    40b4:	ff 4f       	sbci	r31, 0xFF	; 255
    40b6:	81 e0       	ldi	r24, 0x01	; 1
    40b8:	80 83       	st	Z, r24



	// Outer menu to choose between login and signup
	while (1) {
		if (start) {
    40ba:	fe 01       	movw	r30, r28
    40bc:	e5 50       	subi	r30, 0x05	; 5
    40be:	ff 4f       	sbci	r31, 0xFF	; 255
    40c0:	80 81       	ld	r24, Z
    40c2:	88 23       	and	r24, r24
    40c4:	59 f0       	breq	.+22     	; 0x40dc <main+0x22e>
			vLCD_Clear(); // Clear the LCD screen
    40c6:	0e 94 4c 1c 	call	0x3898	; 0x3898 <vLCD_Clear>
			vLCD_Send_String("1-Login 2-SignUp"); // Display options for login and signup
    40ca:	8b e1       	ldi	r24, 0x1B	; 27
    40cc:	91 e0       	ldi	r25, 0x01	; 1
    40ce:	0e 94 05 1c 	call	0x380a	; 0x380a <vLCD_Send_String>
			start=0;
    40d2:	fe 01       	movw	r30, r28
    40d4:	e5 50       	subi	r30, 0x05	; 5
    40d6:	ff 4f       	sbci	r31, 0xFF	; 255
    40d8:	10 82       	st	Z, r1
    40da:	ef cf       	rjmp	.-34     	; 0x40ba <main+0x20c>
		}
		else{
			choice = u8KEY_PRESSED();
    40dc:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <u8KEY_PRESSED>
    40e0:	fe 01       	movw	r30, r28
    40e2:	ec 5e       	subi	r30, 0xEC	; 236
    40e4:	fe 4f       	sbci	r31, 0xFE	; 254
    40e6:	80 83       	st	Z, r24
			if(choice != 0xff) {
    40e8:	fe 01       	movw	r30, r28
    40ea:	ec 5e       	subi	r30, 0xEC	; 236
    40ec:	fe 4f       	sbci	r31, 0xFE	; 254
    40ee:	80 81       	ld	r24, Z
    40f0:	8f 3f       	cpi	r24, 0xFF	; 255
    40f2:	19 f3       	breq	.-58     	; 0x40ba <main+0x20c>
				if (choice-'0' == 1) {
    40f4:	fe 01       	movw	r30, r28
    40f6:	ec 5e       	subi	r30, 0xEC	; 236
    40f8:	fe 4f       	sbci	r31, 0xFE	; 254
    40fa:	80 81       	ld	r24, Z
    40fc:	81 33       	cpi	r24, 0x31	; 49
    40fe:	09 f4       	brne	.+2      	; 0x4102 <main+0x254>
    4100:	cf c3       	rjmp	.+1950   	; 0x48a0 <main+0x9f2>
					//vLCD_Clear(); // Clear the LCD screen
					//vLCD_Send_String("ok"); // Display options for login and signup
					//_delay_ms(900); // Delay for 900 milliseconds
					// Proceed to login
					break; // Exit the loop and continue with login
				} else if (choice-'0' == 2) {
    4102:	fe 01       	movw	r30, r28
    4104:	ec 5e       	subi	r30, 0xEC	; 236
    4106:	fe 4f       	sbci	r31, 0xFE	; 254
    4108:	80 81       	ld	r24, Z
    410a:	82 33       	cpi	r24, 0x32	; 50
    410c:	09 f0       	breq	.+2      	; 0x4110 <main+0x262>
    410e:	bc c0       	rjmp	.+376    	; 0x4288 <main+0x3da>
					// Proceed to sign up
					sign_up();  // Call sign-up function
    4110:	0e 94 7a 07 	call	0xef4	; 0xef4 <sign_up>
    4114:	fe 01       	movw	r30, r28
    4116:	e3 52       	subi	r30, 0x23	; 35
    4118:	ff 4f       	sbci	r31, 0xFF	; 255
    411a:	80 e0       	ldi	r24, 0x00	; 0
    411c:	90 e0       	ldi	r25, 0x00	; 0
    411e:	a1 e6       	ldi	r26, 0x61	; 97
    4120:	b4 e4       	ldi	r27, 0x44	; 68
    4122:	80 83       	st	Z, r24
    4124:	91 83       	std	Z+1, r25	; 0x01
    4126:	a2 83       	std	Z+2, r26	; 0x02
    4128:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    412a:	8e 01       	movw	r16, r28
    412c:	07 52       	subi	r16, 0x27	; 39
    412e:	1f 4f       	sbci	r17, 0xFF	; 255
    4130:	fe 01       	movw	r30, r28
    4132:	e3 52       	subi	r30, 0x23	; 35
    4134:	ff 4f       	sbci	r31, 0xFF	; 255
    4136:	60 81       	ld	r22, Z
    4138:	71 81       	ldd	r23, Z+1	; 0x01
    413a:	82 81       	ldd	r24, Z+2	; 0x02
    413c:	93 81       	ldd	r25, Z+3	; 0x03
    413e:	20 e0       	ldi	r18, 0x00	; 0
    4140:	30 e0       	ldi	r19, 0x00	; 0
    4142:	4a ef       	ldi	r20, 0xFA	; 250
    4144:	54 e4       	ldi	r21, 0x44	; 68
    4146:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    414a:	dc 01       	movw	r26, r24
    414c:	cb 01       	movw	r24, r22
    414e:	f8 01       	movw	r30, r16
    4150:	80 83       	st	Z, r24
    4152:	91 83       	std	Z+1, r25	; 0x01
    4154:	a2 83       	std	Z+2, r26	; 0x02
    4156:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4158:	fe 01       	movw	r30, r28
    415a:	e7 52       	subi	r30, 0x27	; 39
    415c:	ff 4f       	sbci	r31, 0xFF	; 255
    415e:	60 81       	ld	r22, Z
    4160:	71 81       	ldd	r23, Z+1	; 0x01
    4162:	82 81       	ldd	r24, Z+2	; 0x02
    4164:	93 81       	ldd	r25, Z+3	; 0x03
    4166:	20 e0       	ldi	r18, 0x00	; 0
    4168:	30 e0       	ldi	r19, 0x00	; 0
    416a:	40 e8       	ldi	r20, 0x80	; 128
    416c:	5f e3       	ldi	r21, 0x3F	; 63
    416e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4172:	88 23       	and	r24, r24
    4174:	44 f4       	brge	.+16     	; 0x4186 <main+0x2d8>
		__ticks = 1;
    4176:	fe 01       	movw	r30, r28
    4178:	e9 52       	subi	r30, 0x29	; 41
    417a:	ff 4f       	sbci	r31, 0xFF	; 255
    417c:	81 e0       	ldi	r24, 0x01	; 1
    417e:	90 e0       	ldi	r25, 0x00	; 0
    4180:	91 83       	std	Z+1, r25	; 0x01
    4182:	80 83       	st	Z, r24
    4184:	64 c0       	rjmp	.+200    	; 0x424e <main+0x3a0>
	else if (__tmp > 65535)
    4186:	fe 01       	movw	r30, r28
    4188:	e7 52       	subi	r30, 0x27	; 39
    418a:	ff 4f       	sbci	r31, 0xFF	; 255
    418c:	60 81       	ld	r22, Z
    418e:	71 81       	ldd	r23, Z+1	; 0x01
    4190:	82 81       	ldd	r24, Z+2	; 0x02
    4192:	93 81       	ldd	r25, Z+3	; 0x03
    4194:	20 e0       	ldi	r18, 0x00	; 0
    4196:	3f ef       	ldi	r19, 0xFF	; 255
    4198:	4f e7       	ldi	r20, 0x7F	; 127
    419a:	57 e4       	ldi	r21, 0x47	; 71
    419c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    41a0:	18 16       	cp	r1, r24
    41a2:	0c f0       	brlt	.+2      	; 0x41a6 <main+0x2f8>
    41a4:	43 c0       	rjmp	.+134    	; 0x422c <main+0x37e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41a6:	fe 01       	movw	r30, r28
    41a8:	e3 52       	subi	r30, 0x23	; 35
    41aa:	ff 4f       	sbci	r31, 0xFF	; 255
    41ac:	60 81       	ld	r22, Z
    41ae:	71 81       	ldd	r23, Z+1	; 0x01
    41b0:	82 81       	ldd	r24, Z+2	; 0x02
    41b2:	93 81       	ldd	r25, Z+3	; 0x03
    41b4:	20 e0       	ldi	r18, 0x00	; 0
    41b6:	30 e0       	ldi	r19, 0x00	; 0
    41b8:	40 e2       	ldi	r20, 0x20	; 32
    41ba:	51 e4       	ldi	r21, 0x41	; 65
    41bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41c0:	dc 01       	movw	r26, r24
    41c2:	cb 01       	movw	r24, r22
    41c4:	8e 01       	movw	r16, r28
    41c6:	09 52       	subi	r16, 0x29	; 41
    41c8:	1f 4f       	sbci	r17, 0xFF	; 255
    41ca:	bc 01       	movw	r22, r24
    41cc:	cd 01       	movw	r24, r26
    41ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41d2:	dc 01       	movw	r26, r24
    41d4:	cb 01       	movw	r24, r22
    41d6:	f8 01       	movw	r30, r16
    41d8:	91 83       	std	Z+1, r25	; 0x01
    41da:	80 83       	st	Z, r24
    41dc:	1f c0       	rjmp	.+62     	; 0x421c <main+0x36e>
    41de:	fe 01       	movw	r30, r28
    41e0:	eb 52       	subi	r30, 0x2B	; 43
    41e2:	ff 4f       	sbci	r31, 0xFF	; 255
    41e4:	88 ec       	ldi	r24, 0xC8	; 200
    41e6:	90 e0       	ldi	r25, 0x00	; 0
    41e8:	91 83       	std	Z+1, r25	; 0x01
    41ea:	80 83       	st	Z, r24
    41ec:	fe 01       	movw	r30, r28
    41ee:	eb 52       	subi	r30, 0x2B	; 43
    41f0:	ff 4f       	sbci	r31, 0xFF	; 255
    41f2:	80 81       	ld	r24, Z
    41f4:	91 81       	ldd	r25, Z+1	; 0x01
    41f6:	01 97       	sbiw	r24, 0x01	; 1
    41f8:	f1 f7       	brne	.-4      	; 0x41f6 <main+0x348>
    41fa:	fe 01       	movw	r30, r28
    41fc:	eb 52       	subi	r30, 0x2B	; 43
    41fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4200:	91 83       	std	Z+1, r25	; 0x01
    4202:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4204:	de 01       	movw	r26, r28
    4206:	a9 52       	subi	r26, 0x29	; 41
    4208:	bf 4f       	sbci	r27, 0xFF	; 255
    420a:	fe 01       	movw	r30, r28
    420c:	e9 52       	subi	r30, 0x29	; 41
    420e:	ff 4f       	sbci	r31, 0xFF	; 255
    4210:	80 81       	ld	r24, Z
    4212:	91 81       	ldd	r25, Z+1	; 0x01
    4214:	01 97       	sbiw	r24, 0x01	; 1
    4216:	11 96       	adiw	r26, 0x01	; 1
    4218:	9c 93       	st	X, r25
    421a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    421c:	fe 01       	movw	r30, r28
    421e:	e9 52       	subi	r30, 0x29	; 41
    4220:	ff 4f       	sbci	r31, 0xFF	; 255
    4222:	80 81       	ld	r24, Z
    4224:	91 81       	ldd	r25, Z+1	; 0x01
    4226:	00 97       	sbiw	r24, 0x00	; 0
    4228:	d1 f6       	brne	.-76     	; 0x41de <main+0x330>
    422a:	28 c0       	rjmp	.+80     	; 0x427c <main+0x3ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    422c:	8e 01       	movw	r16, r28
    422e:	09 52       	subi	r16, 0x29	; 41
    4230:	1f 4f       	sbci	r17, 0xFF	; 255
    4232:	fe 01       	movw	r30, r28
    4234:	e7 52       	subi	r30, 0x27	; 39
    4236:	ff 4f       	sbci	r31, 0xFF	; 255
    4238:	60 81       	ld	r22, Z
    423a:	71 81       	ldd	r23, Z+1	; 0x01
    423c:	82 81       	ldd	r24, Z+2	; 0x02
    423e:	93 81       	ldd	r25, Z+3	; 0x03
    4240:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4244:	dc 01       	movw	r26, r24
    4246:	cb 01       	movw	r24, r22
    4248:	f8 01       	movw	r30, r16
    424a:	91 83       	std	Z+1, r25	; 0x01
    424c:	80 83       	st	Z, r24
    424e:	de 01       	movw	r26, r28
    4250:	ad 52       	subi	r26, 0x2D	; 45
    4252:	bf 4f       	sbci	r27, 0xFF	; 255
    4254:	fe 01       	movw	r30, r28
    4256:	e9 52       	subi	r30, 0x29	; 41
    4258:	ff 4f       	sbci	r31, 0xFF	; 255
    425a:	80 81       	ld	r24, Z
    425c:	91 81       	ldd	r25, Z+1	; 0x01
    425e:	11 96       	adiw	r26, 0x01	; 1
    4260:	9c 93       	st	X, r25
    4262:	8e 93       	st	-X, r24
    4264:	fe 01       	movw	r30, r28
    4266:	ed 52       	subi	r30, 0x2D	; 45
    4268:	ff 4f       	sbci	r31, 0xFF	; 255
    426a:	80 81       	ld	r24, Z
    426c:	91 81       	ldd	r25, Z+1	; 0x01
    426e:	01 97       	sbiw	r24, 0x01	; 1
    4270:	f1 f7       	brne	.-4      	; 0x426e <main+0x3c0>
    4272:	fe 01       	movw	r30, r28
    4274:	ed 52       	subi	r30, 0x2D	; 45
    4276:	ff 4f       	sbci	r31, 0xFF	; 255
    4278:	91 83       	std	Z+1, r25	; 0x01
    427a:	80 83       	st	Z, r24
					_delay_ms(900); // Delay for 900 milliseconds
					start=1;
    427c:	fe 01       	movw	r30, r28
    427e:	e5 50       	subi	r30, 0x05	; 5
    4280:	ff 4f       	sbci	r31, 0xFF	; 255
    4282:	81 e0       	ldi	r24, 0x01	; 1
    4284:	80 83       	st	Z, r24
    4286:	19 cf       	rjmp	.-462    	; 0x40ba <main+0x20c>
					//break;
				} else {
					vLCD_Clear(); // Clear the LCD screen
    4288:	0e 94 4c 1c 	call	0x3898	; 0x3898 <vLCD_Clear>
					vLCD_Send_String("Invalid Choice"); // Display an error message
    428c:	8c e2       	ldi	r24, 0x2C	; 44
    428e:	91 e0       	ldi	r25, 0x01	; 1
    4290:	0e 94 05 1c 	call	0x380a	; 0x380a <vLCD_Send_String>
    4294:	fe 01       	movw	r30, r28
    4296:	e1 53       	subi	r30, 0x31	; 49
    4298:	ff 4f       	sbci	r31, 0xFF	; 255
    429a:	80 e0       	ldi	r24, 0x00	; 0
    429c:	90 e0       	ldi	r25, 0x00	; 0
    429e:	a1 e6       	ldi	r26, 0x61	; 97
    42a0:	b4 e4       	ldi	r27, 0x44	; 68
    42a2:	80 83       	st	Z, r24
    42a4:	91 83       	std	Z+1, r25	; 0x01
    42a6:	a2 83       	std	Z+2, r26	; 0x02
    42a8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42aa:	8e 01       	movw	r16, r28
    42ac:	05 53       	subi	r16, 0x35	; 53
    42ae:	1f 4f       	sbci	r17, 0xFF	; 255
    42b0:	fe 01       	movw	r30, r28
    42b2:	e1 53       	subi	r30, 0x31	; 49
    42b4:	ff 4f       	sbci	r31, 0xFF	; 255
    42b6:	60 81       	ld	r22, Z
    42b8:	71 81       	ldd	r23, Z+1	; 0x01
    42ba:	82 81       	ldd	r24, Z+2	; 0x02
    42bc:	93 81       	ldd	r25, Z+3	; 0x03
    42be:	20 e0       	ldi	r18, 0x00	; 0
    42c0:	30 e0       	ldi	r19, 0x00	; 0
    42c2:	4a ef       	ldi	r20, 0xFA	; 250
    42c4:	54 e4       	ldi	r21, 0x44	; 68
    42c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42ca:	dc 01       	movw	r26, r24
    42cc:	cb 01       	movw	r24, r22
    42ce:	f8 01       	movw	r30, r16
    42d0:	80 83       	st	Z, r24
    42d2:	91 83       	std	Z+1, r25	; 0x01
    42d4:	a2 83       	std	Z+2, r26	; 0x02
    42d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    42d8:	fe 01       	movw	r30, r28
    42da:	e5 53       	subi	r30, 0x35	; 53
    42dc:	ff 4f       	sbci	r31, 0xFF	; 255
    42de:	60 81       	ld	r22, Z
    42e0:	71 81       	ldd	r23, Z+1	; 0x01
    42e2:	82 81       	ldd	r24, Z+2	; 0x02
    42e4:	93 81       	ldd	r25, Z+3	; 0x03
    42e6:	20 e0       	ldi	r18, 0x00	; 0
    42e8:	30 e0       	ldi	r19, 0x00	; 0
    42ea:	40 e8       	ldi	r20, 0x80	; 128
    42ec:	5f e3       	ldi	r21, 0x3F	; 63
    42ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    42f2:	88 23       	and	r24, r24
    42f4:	44 f4       	brge	.+16     	; 0x4306 <main+0x458>
		__ticks = 1;
    42f6:	fe 01       	movw	r30, r28
    42f8:	e7 53       	subi	r30, 0x37	; 55
    42fa:	ff 4f       	sbci	r31, 0xFF	; 255
    42fc:	81 e0       	ldi	r24, 0x01	; 1
    42fe:	90 e0       	ldi	r25, 0x00	; 0
    4300:	91 83       	std	Z+1, r25	; 0x01
    4302:	80 83       	st	Z, r24
    4304:	64 c0       	rjmp	.+200    	; 0x43ce <main+0x520>
	else if (__tmp > 65535)
    4306:	fe 01       	movw	r30, r28
    4308:	e5 53       	subi	r30, 0x35	; 53
    430a:	ff 4f       	sbci	r31, 0xFF	; 255
    430c:	60 81       	ld	r22, Z
    430e:	71 81       	ldd	r23, Z+1	; 0x01
    4310:	82 81       	ldd	r24, Z+2	; 0x02
    4312:	93 81       	ldd	r25, Z+3	; 0x03
    4314:	20 e0       	ldi	r18, 0x00	; 0
    4316:	3f ef       	ldi	r19, 0xFF	; 255
    4318:	4f e7       	ldi	r20, 0x7F	; 127
    431a:	57 e4       	ldi	r21, 0x47	; 71
    431c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4320:	18 16       	cp	r1, r24
    4322:	0c f0       	brlt	.+2      	; 0x4326 <main+0x478>
    4324:	43 c0       	rjmp	.+134    	; 0x43ac <main+0x4fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4326:	fe 01       	movw	r30, r28
    4328:	e1 53       	subi	r30, 0x31	; 49
    432a:	ff 4f       	sbci	r31, 0xFF	; 255
    432c:	60 81       	ld	r22, Z
    432e:	71 81       	ldd	r23, Z+1	; 0x01
    4330:	82 81       	ldd	r24, Z+2	; 0x02
    4332:	93 81       	ldd	r25, Z+3	; 0x03
    4334:	20 e0       	ldi	r18, 0x00	; 0
    4336:	30 e0       	ldi	r19, 0x00	; 0
    4338:	40 e2       	ldi	r20, 0x20	; 32
    433a:	51 e4       	ldi	r21, 0x41	; 65
    433c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4340:	dc 01       	movw	r26, r24
    4342:	cb 01       	movw	r24, r22
    4344:	8e 01       	movw	r16, r28
    4346:	07 53       	subi	r16, 0x37	; 55
    4348:	1f 4f       	sbci	r17, 0xFF	; 255
    434a:	bc 01       	movw	r22, r24
    434c:	cd 01       	movw	r24, r26
    434e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4352:	dc 01       	movw	r26, r24
    4354:	cb 01       	movw	r24, r22
    4356:	f8 01       	movw	r30, r16
    4358:	91 83       	std	Z+1, r25	; 0x01
    435a:	80 83       	st	Z, r24
    435c:	1f c0       	rjmp	.+62     	; 0x439c <main+0x4ee>
    435e:	fe 01       	movw	r30, r28
    4360:	e9 53       	subi	r30, 0x39	; 57
    4362:	ff 4f       	sbci	r31, 0xFF	; 255
    4364:	88 ec       	ldi	r24, 0xC8	; 200
    4366:	90 e0       	ldi	r25, 0x00	; 0
    4368:	91 83       	std	Z+1, r25	; 0x01
    436a:	80 83       	st	Z, r24
    436c:	fe 01       	movw	r30, r28
    436e:	e9 53       	subi	r30, 0x39	; 57
    4370:	ff 4f       	sbci	r31, 0xFF	; 255
    4372:	80 81       	ld	r24, Z
    4374:	91 81       	ldd	r25, Z+1	; 0x01
    4376:	01 97       	sbiw	r24, 0x01	; 1
    4378:	f1 f7       	brne	.-4      	; 0x4376 <main+0x4c8>
    437a:	fe 01       	movw	r30, r28
    437c:	e9 53       	subi	r30, 0x39	; 57
    437e:	ff 4f       	sbci	r31, 0xFF	; 255
    4380:	91 83       	std	Z+1, r25	; 0x01
    4382:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4384:	de 01       	movw	r26, r28
    4386:	a7 53       	subi	r26, 0x37	; 55
    4388:	bf 4f       	sbci	r27, 0xFF	; 255
    438a:	fe 01       	movw	r30, r28
    438c:	e7 53       	subi	r30, 0x37	; 55
    438e:	ff 4f       	sbci	r31, 0xFF	; 255
    4390:	80 81       	ld	r24, Z
    4392:	91 81       	ldd	r25, Z+1	; 0x01
    4394:	01 97       	sbiw	r24, 0x01	; 1
    4396:	11 96       	adiw	r26, 0x01	; 1
    4398:	9c 93       	st	X, r25
    439a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    439c:	fe 01       	movw	r30, r28
    439e:	e7 53       	subi	r30, 0x37	; 55
    43a0:	ff 4f       	sbci	r31, 0xFF	; 255
    43a2:	80 81       	ld	r24, Z
    43a4:	91 81       	ldd	r25, Z+1	; 0x01
    43a6:	00 97       	sbiw	r24, 0x00	; 0
    43a8:	d1 f6       	brne	.-76     	; 0x435e <main+0x4b0>
    43aa:	28 c0       	rjmp	.+80     	; 0x43fc <main+0x54e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43ac:	8e 01       	movw	r16, r28
    43ae:	07 53       	subi	r16, 0x37	; 55
    43b0:	1f 4f       	sbci	r17, 0xFF	; 255
    43b2:	fe 01       	movw	r30, r28
    43b4:	e5 53       	subi	r30, 0x35	; 53
    43b6:	ff 4f       	sbci	r31, 0xFF	; 255
    43b8:	60 81       	ld	r22, Z
    43ba:	71 81       	ldd	r23, Z+1	; 0x01
    43bc:	82 81       	ldd	r24, Z+2	; 0x02
    43be:	93 81       	ldd	r25, Z+3	; 0x03
    43c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43c4:	dc 01       	movw	r26, r24
    43c6:	cb 01       	movw	r24, r22
    43c8:	f8 01       	movw	r30, r16
    43ca:	91 83       	std	Z+1, r25	; 0x01
    43cc:	80 83       	st	Z, r24
    43ce:	de 01       	movw	r26, r28
    43d0:	ab 53       	subi	r26, 0x3B	; 59
    43d2:	bf 4f       	sbci	r27, 0xFF	; 255
    43d4:	fe 01       	movw	r30, r28
    43d6:	e7 53       	subi	r30, 0x37	; 55
    43d8:	ff 4f       	sbci	r31, 0xFF	; 255
    43da:	80 81       	ld	r24, Z
    43dc:	91 81       	ldd	r25, Z+1	; 0x01
    43de:	11 96       	adiw	r26, 0x01	; 1
    43e0:	9c 93       	st	X, r25
    43e2:	8e 93       	st	-X, r24
    43e4:	fe 01       	movw	r30, r28
    43e6:	eb 53       	subi	r30, 0x3B	; 59
    43e8:	ff 4f       	sbci	r31, 0xFF	; 255
    43ea:	80 81       	ld	r24, Z
    43ec:	91 81       	ldd	r25, Z+1	; 0x01
    43ee:	01 97       	sbiw	r24, 0x01	; 1
    43f0:	f1 f7       	brne	.-4      	; 0x43ee <main+0x540>
    43f2:	fe 01       	movw	r30, r28
    43f4:	eb 53       	subi	r30, 0x3B	; 59
    43f6:	ff 4f       	sbci	r31, 0xFF	; 255
    43f8:	91 83       	std	Z+1, r25	; 0x01
    43fa:	80 83       	st	Z, r24
					_delay_ms(900); // Delay for 900 milliseconds
					start=1;
    43fc:	fe 01       	movw	r30, r28
    43fe:	e5 50       	subi	r30, 0x05	; 5
    4400:	ff 4f       	sbci	r31, 0xFF	; 255
    4402:	81 e0       	ldi	r24, 0x01	; 1
    4404:	80 83       	st	Z, r24
    4406:	59 ce       	rjmp	.-846    	; 0x40ba <main+0x20c>
				}
			}}}

	while (trails > 0) { // Loop until the user has no remaining atTempts
		vLCD_Clear(); // Clear the LCD screen
    4408:	0e 94 4c 1c 	call	0x3898	; 0x3898 <vLCD_Clear>

		log_in();  // Handle login using EEPROM
    440c:	0e 94 62 09 	call	0x12c4	; 0x12c4 <log_in>

		// Check if login was successful
		if (EEPROM_u8ReadDataByte(NUM_OF_TRIALS_ADDR) == 0) {
    4410:	89 e1       	ldi	r24, 0x19	; 25
    4412:	90 e0       	ldi	r25, 0x00	; 0
    4414:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <EEPROM_u8ReadDataByte>
    4418:	88 23       	and	r24, r24
    441a:	09 f0       	breq	.+2      	; 0x441e <main+0x570>
    441c:	bf c0       	rjmp	.+382    	; 0x459c <main+0x6ee>
			vLCD_Clear();
    441e:	0e 94 4c 1c 	call	0x3898	; 0x3898 <vLCD_Clear>
			vLCD_Send_String("Login Success");
    4422:	8b e3       	ldi	r24, 0x3B	; 59
    4424:	91 e0       	ldi	r25, 0x01	; 1
    4426:	0e 94 05 1c 	call	0x380a	; 0x380a <vLCD_Send_String>
    442a:	fe 01       	movw	r30, r28
    442c:	ef 53       	subi	r30, 0x3F	; 63
    442e:	ff 4f       	sbci	r31, 0xFF	; 255
    4430:	80 e0       	ldi	r24, 0x00	; 0
    4432:	90 e0       	ldi	r25, 0x00	; 0
    4434:	a1 e6       	ldi	r26, 0x61	; 97
    4436:	b4 e4       	ldi	r27, 0x44	; 68
    4438:	80 83       	st	Z, r24
    443a:	91 83       	std	Z+1, r25	; 0x01
    443c:	a2 83       	std	Z+2, r26	; 0x02
    443e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4440:	8e 01       	movw	r16, r28
    4442:	03 54       	subi	r16, 0x43	; 67
    4444:	1f 4f       	sbci	r17, 0xFF	; 255
    4446:	fe 01       	movw	r30, r28
    4448:	ef 53       	subi	r30, 0x3F	; 63
    444a:	ff 4f       	sbci	r31, 0xFF	; 255
    444c:	60 81       	ld	r22, Z
    444e:	71 81       	ldd	r23, Z+1	; 0x01
    4450:	82 81       	ldd	r24, Z+2	; 0x02
    4452:	93 81       	ldd	r25, Z+3	; 0x03
    4454:	20 e0       	ldi	r18, 0x00	; 0
    4456:	30 e0       	ldi	r19, 0x00	; 0
    4458:	4a ef       	ldi	r20, 0xFA	; 250
    445a:	54 e4       	ldi	r21, 0x44	; 68
    445c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4460:	dc 01       	movw	r26, r24
    4462:	cb 01       	movw	r24, r22
    4464:	f8 01       	movw	r30, r16
    4466:	80 83       	st	Z, r24
    4468:	91 83       	std	Z+1, r25	; 0x01
    446a:	a2 83       	std	Z+2, r26	; 0x02
    446c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    446e:	fe 01       	movw	r30, r28
    4470:	e3 54       	subi	r30, 0x43	; 67
    4472:	ff 4f       	sbci	r31, 0xFF	; 255
    4474:	60 81       	ld	r22, Z
    4476:	71 81       	ldd	r23, Z+1	; 0x01
    4478:	82 81       	ldd	r24, Z+2	; 0x02
    447a:	93 81       	ldd	r25, Z+3	; 0x03
    447c:	20 e0       	ldi	r18, 0x00	; 0
    447e:	30 e0       	ldi	r19, 0x00	; 0
    4480:	40 e8       	ldi	r20, 0x80	; 128
    4482:	5f e3       	ldi	r21, 0x3F	; 63
    4484:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4488:	88 23       	and	r24, r24
    448a:	44 f4       	brge	.+16     	; 0x449c <main+0x5ee>
		__ticks = 1;
    448c:	fe 01       	movw	r30, r28
    448e:	e5 54       	subi	r30, 0x45	; 69
    4490:	ff 4f       	sbci	r31, 0xFF	; 255
    4492:	81 e0       	ldi	r24, 0x01	; 1
    4494:	90 e0       	ldi	r25, 0x00	; 0
    4496:	91 83       	std	Z+1, r25	; 0x01
    4498:	80 83       	st	Z, r24
    449a:	64 c0       	rjmp	.+200    	; 0x4564 <main+0x6b6>
	else if (__tmp > 65535)
    449c:	fe 01       	movw	r30, r28
    449e:	e3 54       	subi	r30, 0x43	; 67
    44a0:	ff 4f       	sbci	r31, 0xFF	; 255
    44a2:	60 81       	ld	r22, Z
    44a4:	71 81       	ldd	r23, Z+1	; 0x01
    44a6:	82 81       	ldd	r24, Z+2	; 0x02
    44a8:	93 81       	ldd	r25, Z+3	; 0x03
    44aa:	20 e0       	ldi	r18, 0x00	; 0
    44ac:	3f ef       	ldi	r19, 0xFF	; 255
    44ae:	4f e7       	ldi	r20, 0x7F	; 127
    44b0:	57 e4       	ldi	r21, 0x47	; 71
    44b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    44b6:	18 16       	cp	r1, r24
    44b8:	0c f0       	brlt	.+2      	; 0x44bc <main+0x60e>
    44ba:	43 c0       	rjmp	.+134    	; 0x4542 <main+0x694>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44bc:	fe 01       	movw	r30, r28
    44be:	ef 53       	subi	r30, 0x3F	; 63
    44c0:	ff 4f       	sbci	r31, 0xFF	; 255
    44c2:	60 81       	ld	r22, Z
    44c4:	71 81       	ldd	r23, Z+1	; 0x01
    44c6:	82 81       	ldd	r24, Z+2	; 0x02
    44c8:	93 81       	ldd	r25, Z+3	; 0x03
    44ca:	20 e0       	ldi	r18, 0x00	; 0
    44cc:	30 e0       	ldi	r19, 0x00	; 0
    44ce:	40 e2       	ldi	r20, 0x20	; 32
    44d0:	51 e4       	ldi	r21, 0x41	; 65
    44d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44d6:	dc 01       	movw	r26, r24
    44d8:	cb 01       	movw	r24, r22
    44da:	8e 01       	movw	r16, r28
    44dc:	05 54       	subi	r16, 0x45	; 69
    44de:	1f 4f       	sbci	r17, 0xFF	; 255
    44e0:	bc 01       	movw	r22, r24
    44e2:	cd 01       	movw	r24, r26
    44e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44e8:	dc 01       	movw	r26, r24
    44ea:	cb 01       	movw	r24, r22
    44ec:	f8 01       	movw	r30, r16
    44ee:	91 83       	std	Z+1, r25	; 0x01
    44f0:	80 83       	st	Z, r24
    44f2:	1f c0       	rjmp	.+62     	; 0x4532 <main+0x684>
    44f4:	fe 01       	movw	r30, r28
    44f6:	e7 54       	subi	r30, 0x47	; 71
    44f8:	ff 4f       	sbci	r31, 0xFF	; 255
    44fa:	88 ec       	ldi	r24, 0xC8	; 200
    44fc:	90 e0       	ldi	r25, 0x00	; 0
    44fe:	91 83       	std	Z+1, r25	; 0x01
    4500:	80 83       	st	Z, r24
    4502:	fe 01       	movw	r30, r28
    4504:	e7 54       	subi	r30, 0x47	; 71
    4506:	ff 4f       	sbci	r31, 0xFF	; 255
    4508:	80 81       	ld	r24, Z
    450a:	91 81       	ldd	r25, Z+1	; 0x01
    450c:	01 97       	sbiw	r24, 0x01	; 1
    450e:	f1 f7       	brne	.-4      	; 0x450c <main+0x65e>
    4510:	fe 01       	movw	r30, r28
    4512:	e7 54       	subi	r30, 0x47	; 71
    4514:	ff 4f       	sbci	r31, 0xFF	; 255
    4516:	91 83       	std	Z+1, r25	; 0x01
    4518:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    451a:	de 01       	movw	r26, r28
    451c:	a5 54       	subi	r26, 0x45	; 69
    451e:	bf 4f       	sbci	r27, 0xFF	; 255
    4520:	fe 01       	movw	r30, r28
    4522:	e5 54       	subi	r30, 0x45	; 69
    4524:	ff 4f       	sbci	r31, 0xFF	; 255
    4526:	80 81       	ld	r24, Z
    4528:	91 81       	ldd	r25, Z+1	; 0x01
    452a:	01 97       	sbiw	r24, 0x01	; 1
    452c:	11 96       	adiw	r26, 0x01	; 1
    452e:	9c 93       	st	X, r25
    4530:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4532:	fe 01       	movw	r30, r28
    4534:	e5 54       	subi	r30, 0x45	; 69
    4536:	ff 4f       	sbci	r31, 0xFF	; 255
    4538:	80 81       	ld	r24, Z
    453a:	91 81       	ldd	r25, Z+1	; 0x01
    453c:	00 97       	sbiw	r24, 0x00	; 0
    453e:	d1 f6       	brne	.-76     	; 0x44f4 <main+0x646>
    4540:	27 c0       	rjmp	.+78     	; 0x4590 <main+0x6e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4542:	8e 01       	movw	r16, r28
    4544:	05 54       	subi	r16, 0x45	; 69
    4546:	1f 4f       	sbci	r17, 0xFF	; 255
    4548:	fe 01       	movw	r30, r28
    454a:	e3 54       	subi	r30, 0x43	; 67
    454c:	ff 4f       	sbci	r31, 0xFF	; 255
    454e:	60 81       	ld	r22, Z
    4550:	71 81       	ldd	r23, Z+1	; 0x01
    4552:	82 81       	ldd	r24, Z+2	; 0x02
    4554:	93 81       	ldd	r25, Z+3	; 0x03
    4556:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    455a:	dc 01       	movw	r26, r24
    455c:	cb 01       	movw	r24, r22
    455e:	f8 01       	movw	r30, r16
    4560:	91 83       	std	Z+1, r25	; 0x01
    4562:	80 83       	st	Z, r24
    4564:	de 01       	movw	r26, r28
    4566:	a9 54       	subi	r26, 0x49	; 73
    4568:	bf 4f       	sbci	r27, 0xFF	; 255
    456a:	fe 01       	movw	r30, r28
    456c:	e5 54       	subi	r30, 0x45	; 69
    456e:	ff 4f       	sbci	r31, 0xFF	; 255
    4570:	80 81       	ld	r24, Z
    4572:	91 81       	ldd	r25, Z+1	; 0x01
    4574:	8d 93       	st	X+, r24
    4576:	9c 93       	st	X, r25
    4578:	fe 01       	movw	r30, r28
    457a:	e9 54       	subi	r30, 0x49	; 73
    457c:	ff 4f       	sbci	r31, 0xFF	; 255
    457e:	80 81       	ld	r24, Z
    4580:	91 81       	ldd	r25, Z+1	; 0x01
    4582:	01 97       	sbiw	r24, 0x01	; 1
    4584:	f1 f7       	brne	.-4      	; 0x4582 <main+0x6d4>
    4586:	fe 01       	movw	r30, r28
    4588:	e9 54       	subi	r30, 0x49	; 73
    458a:	ff 4f       	sbci	r31, 0xFF	; 255
    458c:	91 83       	std	Z+1, r25	; 0x01
    458e:	80 83       	st	Z, r24
			_delay_ms(900);
			// Continue with control mode...
			// Turn off specific output pins to indicate success
			vSet_Pin_OUTPUTvalue(PORT_A, PIN_3, LOW); // Turn off device connected to pin 3
    4590:	80 e0       	ldi	r24, 0x00	; 0
    4592:	63 e0       	ldi	r22, 0x03	; 3
    4594:	40 e0       	ldi	r20, 0x00	; 0
    4596:	0e 94 64 14 	call	0x28c8	; 0x28c8 <vSet_Pin_OUTPUTvalue>
    459a:	87 c1       	rjmp	.+782    	; 0x48aa <main+0x9fc>
			break;  // Exit the loop after successful login
		}

		else
		{
			trails--; // Decrement the remaining login atTempts
    459c:	80 91 68 02 	lds	r24, 0x0268
    45a0:	81 50       	subi	r24, 0x01	; 1
    45a2:	80 93 68 02 	sts	0x0268, r24
			vLCD_Clear(); // Clear the LCD screen
    45a6:	0e 94 4c 1c 	call	0x3898	; 0x3898 <vLCD_Clear>
			if (trails == 0)
    45aa:	80 91 68 02 	lds	r24, 0x0268
    45ae:	88 23       	and	r24, r24
    45b0:	09 f0       	breq	.+2      	; 0x45b4 <main+0x706>
    45b2:	be c0       	rjmp	.+380    	; 0x4730 <main+0x882>
			{
				vLCD_Send_String("Locked Out"); // Display locked out message
    45b4:	89 e4       	ldi	r24, 0x49	; 73
    45b6:	91 e0       	ldi	r25, 0x01	; 1
    45b8:	0e 94 05 1c 	call	0x380a	; 0x380a <vLCD_Send_String>
				vSet_Pin_OUTPUTvalue(PORT_A, PIN_4, HIGH); /* buzzer */ // Activate buzzer
    45bc:	80 e0       	ldi	r24, 0x00	; 0
    45be:	64 e0       	ldi	r22, 0x04	; 4
    45c0:	41 e0       	ldi	r20, 0x01	; 1
    45c2:	0e 94 64 14 	call	0x28c8	; 0x28c8 <vSet_Pin_OUTPUTvalue>
    45c6:	fe 01       	movw	r30, r28
    45c8:	ed 54       	subi	r30, 0x4D	; 77
    45ca:	ff 4f       	sbci	r31, 0xFF	; 255
    45cc:	80 e0       	ldi	r24, 0x00	; 0
    45ce:	90 e0       	ldi	r25, 0x00	; 0
    45d0:	a1 e6       	ldi	r26, 0x61	; 97
    45d2:	b4 e4       	ldi	r27, 0x44	; 68
    45d4:	80 83       	st	Z, r24
    45d6:	91 83       	std	Z+1, r25	; 0x01
    45d8:	a2 83       	std	Z+2, r26	; 0x02
    45da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45dc:	8e 01       	movw	r16, r28
    45de:	01 55       	subi	r16, 0x51	; 81
    45e0:	1f 4f       	sbci	r17, 0xFF	; 255
    45e2:	fe 01       	movw	r30, r28
    45e4:	ed 54       	subi	r30, 0x4D	; 77
    45e6:	ff 4f       	sbci	r31, 0xFF	; 255
    45e8:	60 81       	ld	r22, Z
    45ea:	71 81       	ldd	r23, Z+1	; 0x01
    45ec:	82 81       	ldd	r24, Z+2	; 0x02
    45ee:	93 81       	ldd	r25, Z+3	; 0x03
    45f0:	20 e0       	ldi	r18, 0x00	; 0
    45f2:	30 e0       	ldi	r19, 0x00	; 0
    45f4:	4a ef       	ldi	r20, 0xFA	; 250
    45f6:	54 e4       	ldi	r21, 0x44	; 68
    45f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45fc:	dc 01       	movw	r26, r24
    45fe:	cb 01       	movw	r24, r22
    4600:	f8 01       	movw	r30, r16
    4602:	80 83       	st	Z, r24
    4604:	91 83       	std	Z+1, r25	; 0x01
    4606:	a2 83       	std	Z+2, r26	; 0x02
    4608:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    460a:	fe 01       	movw	r30, r28
    460c:	e1 55       	subi	r30, 0x51	; 81
    460e:	ff 4f       	sbci	r31, 0xFF	; 255
    4610:	60 81       	ld	r22, Z
    4612:	71 81       	ldd	r23, Z+1	; 0x01
    4614:	82 81       	ldd	r24, Z+2	; 0x02
    4616:	93 81       	ldd	r25, Z+3	; 0x03
    4618:	20 e0       	ldi	r18, 0x00	; 0
    461a:	30 e0       	ldi	r19, 0x00	; 0
    461c:	40 e8       	ldi	r20, 0x80	; 128
    461e:	5f e3       	ldi	r21, 0x3F	; 63
    4620:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4624:	88 23       	and	r24, r24
    4626:	44 f4       	brge	.+16     	; 0x4638 <main+0x78a>
		__ticks = 1;
    4628:	fe 01       	movw	r30, r28
    462a:	e3 55       	subi	r30, 0x53	; 83
    462c:	ff 4f       	sbci	r31, 0xFF	; 255
    462e:	81 e0       	ldi	r24, 0x01	; 1
    4630:	90 e0       	ldi	r25, 0x00	; 0
    4632:	91 83       	std	Z+1, r25	; 0x01
    4634:	80 83       	st	Z, r24
    4636:	64 c0       	rjmp	.+200    	; 0x4700 <main+0x852>
	else if (__tmp > 65535)
    4638:	fe 01       	movw	r30, r28
    463a:	e1 55       	subi	r30, 0x51	; 81
    463c:	ff 4f       	sbci	r31, 0xFF	; 255
    463e:	60 81       	ld	r22, Z
    4640:	71 81       	ldd	r23, Z+1	; 0x01
    4642:	82 81       	ldd	r24, Z+2	; 0x02
    4644:	93 81       	ldd	r25, Z+3	; 0x03
    4646:	20 e0       	ldi	r18, 0x00	; 0
    4648:	3f ef       	ldi	r19, 0xFF	; 255
    464a:	4f e7       	ldi	r20, 0x7F	; 127
    464c:	57 e4       	ldi	r21, 0x47	; 71
    464e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4652:	18 16       	cp	r1, r24
    4654:	0c f0       	brlt	.+2      	; 0x4658 <main+0x7aa>
    4656:	43 c0       	rjmp	.+134    	; 0x46de <main+0x830>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4658:	fe 01       	movw	r30, r28
    465a:	ed 54       	subi	r30, 0x4D	; 77
    465c:	ff 4f       	sbci	r31, 0xFF	; 255
    465e:	60 81       	ld	r22, Z
    4660:	71 81       	ldd	r23, Z+1	; 0x01
    4662:	82 81       	ldd	r24, Z+2	; 0x02
    4664:	93 81       	ldd	r25, Z+3	; 0x03
    4666:	20 e0       	ldi	r18, 0x00	; 0
    4668:	30 e0       	ldi	r19, 0x00	; 0
    466a:	40 e2       	ldi	r20, 0x20	; 32
    466c:	51 e4       	ldi	r21, 0x41	; 65
    466e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4672:	dc 01       	movw	r26, r24
    4674:	cb 01       	movw	r24, r22
    4676:	8e 01       	movw	r16, r28
    4678:	03 55       	subi	r16, 0x53	; 83
    467a:	1f 4f       	sbci	r17, 0xFF	; 255
    467c:	bc 01       	movw	r22, r24
    467e:	cd 01       	movw	r24, r26
    4680:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4684:	dc 01       	movw	r26, r24
    4686:	cb 01       	movw	r24, r22
    4688:	f8 01       	movw	r30, r16
    468a:	91 83       	std	Z+1, r25	; 0x01
    468c:	80 83       	st	Z, r24
    468e:	1f c0       	rjmp	.+62     	; 0x46ce <main+0x820>
    4690:	fe 01       	movw	r30, r28
    4692:	e5 55       	subi	r30, 0x55	; 85
    4694:	ff 4f       	sbci	r31, 0xFF	; 255
    4696:	88 ec       	ldi	r24, 0xC8	; 200
    4698:	90 e0       	ldi	r25, 0x00	; 0
    469a:	91 83       	std	Z+1, r25	; 0x01
    469c:	80 83       	st	Z, r24
    469e:	fe 01       	movw	r30, r28
    46a0:	e5 55       	subi	r30, 0x55	; 85
    46a2:	ff 4f       	sbci	r31, 0xFF	; 255
    46a4:	80 81       	ld	r24, Z
    46a6:	91 81       	ldd	r25, Z+1	; 0x01
    46a8:	01 97       	sbiw	r24, 0x01	; 1
    46aa:	f1 f7       	brne	.-4      	; 0x46a8 <main+0x7fa>
    46ac:	fe 01       	movw	r30, r28
    46ae:	e5 55       	subi	r30, 0x55	; 85
    46b0:	ff 4f       	sbci	r31, 0xFF	; 255
    46b2:	91 83       	std	Z+1, r25	; 0x01
    46b4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46b6:	de 01       	movw	r26, r28
    46b8:	a3 55       	subi	r26, 0x53	; 83
    46ba:	bf 4f       	sbci	r27, 0xFF	; 255
    46bc:	fe 01       	movw	r30, r28
    46be:	e3 55       	subi	r30, 0x53	; 83
    46c0:	ff 4f       	sbci	r31, 0xFF	; 255
    46c2:	80 81       	ld	r24, Z
    46c4:	91 81       	ldd	r25, Z+1	; 0x01
    46c6:	01 97       	sbiw	r24, 0x01	; 1
    46c8:	11 96       	adiw	r26, 0x01	; 1
    46ca:	9c 93       	st	X, r25
    46cc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46ce:	fe 01       	movw	r30, r28
    46d0:	e3 55       	subi	r30, 0x53	; 83
    46d2:	ff 4f       	sbci	r31, 0xFF	; 255
    46d4:	80 81       	ld	r24, Z
    46d6:	91 81       	ldd	r25, Z+1	; 0x01
    46d8:	00 97       	sbiw	r24, 0x00	; 0
    46da:	d1 f6       	brne	.-76     	; 0x4690 <main+0x7e2>
    46dc:	e1 c0       	rjmp	.+450    	; 0x48a0 <main+0x9f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46de:	8e 01       	movw	r16, r28
    46e0:	03 55       	subi	r16, 0x53	; 83
    46e2:	1f 4f       	sbci	r17, 0xFF	; 255
    46e4:	fe 01       	movw	r30, r28
    46e6:	e1 55       	subi	r30, 0x51	; 81
    46e8:	ff 4f       	sbci	r31, 0xFF	; 255
    46ea:	60 81       	ld	r22, Z
    46ec:	71 81       	ldd	r23, Z+1	; 0x01
    46ee:	82 81       	ldd	r24, Z+2	; 0x02
    46f0:	93 81       	ldd	r25, Z+3	; 0x03
    46f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46f6:	dc 01       	movw	r26, r24
    46f8:	cb 01       	movw	r24, r22
    46fa:	f8 01       	movw	r30, r16
    46fc:	91 83       	std	Z+1, r25	; 0x01
    46fe:	80 83       	st	Z, r24
    4700:	de 01       	movw	r26, r28
    4702:	a7 55       	subi	r26, 0x57	; 87
    4704:	bf 4f       	sbci	r27, 0xFF	; 255
    4706:	fe 01       	movw	r30, r28
    4708:	e3 55       	subi	r30, 0x53	; 83
    470a:	ff 4f       	sbci	r31, 0xFF	; 255
    470c:	80 81       	ld	r24, Z
    470e:	91 81       	ldd	r25, Z+1	; 0x01
    4710:	11 96       	adiw	r26, 0x01	; 1
    4712:	9c 93       	st	X, r25
    4714:	8e 93       	st	-X, r24
    4716:	fe 01       	movw	r30, r28
    4718:	e7 55       	subi	r30, 0x57	; 87
    471a:	ff 4f       	sbci	r31, 0xFF	; 255
    471c:	80 81       	ld	r24, Z
    471e:	91 81       	ldd	r25, Z+1	; 0x01
    4720:	01 97       	sbiw	r24, 0x01	; 1
    4722:	f1 f7       	brne	.-4      	; 0x4720 <main+0x872>
    4724:	fe 01       	movw	r30, r28
    4726:	e7 55       	subi	r30, 0x57	; 87
    4728:	ff 4f       	sbci	r31, 0xFF	; 255
    472a:	91 83       	std	Z+1, r25	; 0x01
    472c:	80 83       	st	Z, r24
    472e:	b8 c0       	rjmp	.+368    	; 0x48a0 <main+0x9f2>
				//vSet_Pin_OUTPUTvalue(PORT_A, PIN_5, HIGH); // Activate another device
				_delay_ms(900); // Delay for 900 milliseconds
			}
			else
			{
				vLCD_Send_String("Invalid Login"); // Display invalid login message
    4730:	84 e5       	ldi	r24, 0x54	; 84
    4732:	91 e0       	ldi	r25, 0x01	; 1
    4734:	0e 94 05 1c 	call	0x380a	; 0x380a <vLCD_Send_String>
    4738:	fe 01       	movw	r30, r28
    473a:	eb 55       	subi	r30, 0x5B	; 91
    473c:	ff 4f       	sbci	r31, 0xFF	; 255
    473e:	80 e0       	ldi	r24, 0x00	; 0
    4740:	90 e0       	ldi	r25, 0x00	; 0
    4742:	a1 e6       	ldi	r26, 0x61	; 97
    4744:	b4 e4       	ldi	r27, 0x44	; 68
    4746:	80 83       	st	Z, r24
    4748:	91 83       	std	Z+1, r25	; 0x01
    474a:	a2 83       	std	Z+2, r26	; 0x02
    474c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    474e:	8e 01       	movw	r16, r28
    4750:	0f 55       	subi	r16, 0x5F	; 95
    4752:	1f 4f       	sbci	r17, 0xFF	; 255
    4754:	fe 01       	movw	r30, r28
    4756:	eb 55       	subi	r30, 0x5B	; 91
    4758:	ff 4f       	sbci	r31, 0xFF	; 255
    475a:	60 81       	ld	r22, Z
    475c:	71 81       	ldd	r23, Z+1	; 0x01
    475e:	82 81       	ldd	r24, Z+2	; 0x02
    4760:	93 81       	ldd	r25, Z+3	; 0x03
    4762:	20 e0       	ldi	r18, 0x00	; 0
    4764:	30 e0       	ldi	r19, 0x00	; 0
    4766:	4a ef       	ldi	r20, 0xFA	; 250
    4768:	54 e4       	ldi	r21, 0x44	; 68
    476a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    476e:	dc 01       	movw	r26, r24
    4770:	cb 01       	movw	r24, r22
    4772:	f8 01       	movw	r30, r16
    4774:	80 83       	st	Z, r24
    4776:	91 83       	std	Z+1, r25	; 0x01
    4778:	a2 83       	std	Z+2, r26	; 0x02
    477a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    477c:	fe 01       	movw	r30, r28
    477e:	ef 55       	subi	r30, 0x5F	; 95
    4780:	ff 4f       	sbci	r31, 0xFF	; 255
    4782:	60 81       	ld	r22, Z
    4784:	71 81       	ldd	r23, Z+1	; 0x01
    4786:	82 81       	ldd	r24, Z+2	; 0x02
    4788:	93 81       	ldd	r25, Z+3	; 0x03
    478a:	20 e0       	ldi	r18, 0x00	; 0
    478c:	30 e0       	ldi	r19, 0x00	; 0
    478e:	40 e8       	ldi	r20, 0x80	; 128
    4790:	5f e3       	ldi	r21, 0x3F	; 63
    4792:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4796:	88 23       	and	r24, r24
    4798:	44 f4       	brge	.+16     	; 0x47aa <main+0x8fc>
		__ticks = 1;
    479a:	fe 01       	movw	r30, r28
    479c:	e1 56       	subi	r30, 0x61	; 97
    479e:	ff 4f       	sbci	r31, 0xFF	; 255
    47a0:	81 e0       	ldi	r24, 0x01	; 1
    47a2:	90 e0       	ldi	r25, 0x00	; 0
    47a4:	91 83       	std	Z+1, r25	; 0x01
    47a6:	80 83       	st	Z, r24
    47a8:	64 c0       	rjmp	.+200    	; 0x4872 <main+0x9c4>
	else if (__tmp > 65535)
    47aa:	fe 01       	movw	r30, r28
    47ac:	ef 55       	subi	r30, 0x5F	; 95
    47ae:	ff 4f       	sbci	r31, 0xFF	; 255
    47b0:	60 81       	ld	r22, Z
    47b2:	71 81       	ldd	r23, Z+1	; 0x01
    47b4:	82 81       	ldd	r24, Z+2	; 0x02
    47b6:	93 81       	ldd	r25, Z+3	; 0x03
    47b8:	20 e0       	ldi	r18, 0x00	; 0
    47ba:	3f ef       	ldi	r19, 0xFF	; 255
    47bc:	4f e7       	ldi	r20, 0x7F	; 127
    47be:	57 e4       	ldi	r21, 0x47	; 71
    47c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    47c4:	18 16       	cp	r1, r24
    47c6:	0c f0       	brlt	.+2      	; 0x47ca <main+0x91c>
    47c8:	43 c0       	rjmp	.+134    	; 0x4850 <main+0x9a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47ca:	fe 01       	movw	r30, r28
    47cc:	eb 55       	subi	r30, 0x5B	; 91
    47ce:	ff 4f       	sbci	r31, 0xFF	; 255
    47d0:	60 81       	ld	r22, Z
    47d2:	71 81       	ldd	r23, Z+1	; 0x01
    47d4:	82 81       	ldd	r24, Z+2	; 0x02
    47d6:	93 81       	ldd	r25, Z+3	; 0x03
    47d8:	20 e0       	ldi	r18, 0x00	; 0
    47da:	30 e0       	ldi	r19, 0x00	; 0
    47dc:	40 e2       	ldi	r20, 0x20	; 32
    47de:	51 e4       	ldi	r21, 0x41	; 65
    47e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47e4:	dc 01       	movw	r26, r24
    47e6:	cb 01       	movw	r24, r22
    47e8:	8e 01       	movw	r16, r28
    47ea:	01 56       	subi	r16, 0x61	; 97
    47ec:	1f 4f       	sbci	r17, 0xFF	; 255
    47ee:	bc 01       	movw	r22, r24
    47f0:	cd 01       	movw	r24, r26
    47f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47f6:	dc 01       	movw	r26, r24
    47f8:	cb 01       	movw	r24, r22
    47fa:	f8 01       	movw	r30, r16
    47fc:	91 83       	std	Z+1, r25	; 0x01
    47fe:	80 83       	st	Z, r24
    4800:	1f c0       	rjmp	.+62     	; 0x4840 <main+0x992>
    4802:	fe 01       	movw	r30, r28
    4804:	e3 56       	subi	r30, 0x63	; 99
    4806:	ff 4f       	sbci	r31, 0xFF	; 255
    4808:	88 ec       	ldi	r24, 0xC8	; 200
    480a:	90 e0       	ldi	r25, 0x00	; 0
    480c:	91 83       	std	Z+1, r25	; 0x01
    480e:	80 83       	st	Z, r24
    4810:	fe 01       	movw	r30, r28
    4812:	e3 56       	subi	r30, 0x63	; 99
    4814:	ff 4f       	sbci	r31, 0xFF	; 255
    4816:	80 81       	ld	r24, Z
    4818:	91 81       	ldd	r25, Z+1	; 0x01
    481a:	01 97       	sbiw	r24, 0x01	; 1
    481c:	f1 f7       	brne	.-4      	; 0x481a <main+0x96c>
    481e:	fe 01       	movw	r30, r28
    4820:	e3 56       	subi	r30, 0x63	; 99
    4822:	ff 4f       	sbci	r31, 0xFF	; 255
    4824:	91 83       	std	Z+1, r25	; 0x01
    4826:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4828:	de 01       	movw	r26, r28
    482a:	a1 56       	subi	r26, 0x61	; 97
    482c:	bf 4f       	sbci	r27, 0xFF	; 255
    482e:	fe 01       	movw	r30, r28
    4830:	e1 56       	subi	r30, 0x61	; 97
    4832:	ff 4f       	sbci	r31, 0xFF	; 255
    4834:	80 81       	ld	r24, Z
    4836:	91 81       	ldd	r25, Z+1	; 0x01
    4838:	01 97       	sbiw	r24, 0x01	; 1
    483a:	11 96       	adiw	r26, 0x01	; 1
    483c:	9c 93       	st	X, r25
    483e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4840:	fe 01       	movw	r30, r28
    4842:	e1 56       	subi	r30, 0x61	; 97
    4844:	ff 4f       	sbci	r31, 0xFF	; 255
    4846:	80 81       	ld	r24, Z
    4848:	91 81       	ldd	r25, Z+1	; 0x01
    484a:	00 97       	sbiw	r24, 0x00	; 0
    484c:	d1 f6       	brne	.-76     	; 0x4802 <main+0x954>
    484e:	28 c0       	rjmp	.+80     	; 0x48a0 <main+0x9f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4850:	8e 01       	movw	r16, r28
    4852:	01 56       	subi	r16, 0x61	; 97
    4854:	1f 4f       	sbci	r17, 0xFF	; 255
    4856:	fe 01       	movw	r30, r28
    4858:	ef 55       	subi	r30, 0x5F	; 95
    485a:	ff 4f       	sbci	r31, 0xFF	; 255
    485c:	60 81       	ld	r22, Z
    485e:	71 81       	ldd	r23, Z+1	; 0x01
    4860:	82 81       	ldd	r24, Z+2	; 0x02
    4862:	93 81       	ldd	r25, Z+3	; 0x03
    4864:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4868:	dc 01       	movw	r26, r24
    486a:	cb 01       	movw	r24, r22
    486c:	f8 01       	movw	r30, r16
    486e:	91 83       	std	Z+1, r25	; 0x01
    4870:	80 83       	st	Z, r24
    4872:	de 01       	movw	r26, r28
    4874:	a5 56       	subi	r26, 0x65	; 101
    4876:	bf 4f       	sbci	r27, 0xFF	; 255
    4878:	fe 01       	movw	r30, r28
    487a:	e1 56       	subi	r30, 0x61	; 97
    487c:	ff 4f       	sbci	r31, 0xFF	; 255
    487e:	80 81       	ld	r24, Z
    4880:	91 81       	ldd	r25, Z+1	; 0x01
    4882:	11 96       	adiw	r26, 0x01	; 1
    4884:	9c 93       	st	X, r25
    4886:	8e 93       	st	-X, r24
    4888:	fe 01       	movw	r30, r28
    488a:	e5 56       	subi	r30, 0x65	; 101
    488c:	ff 4f       	sbci	r31, 0xFF	; 255
    488e:	80 81       	ld	r24, Z
    4890:	91 81       	ldd	r25, Z+1	; 0x01
    4892:	01 97       	sbiw	r24, 0x01	; 1
    4894:	f1 f7       	brne	.-4      	; 0x4892 <main+0x9e4>
    4896:	fe 01       	movw	r30, r28
    4898:	e5 56       	subi	r30, 0x65	; 101
    489a:	ff 4f       	sbci	r31, 0xFF	; 255
    489c:	91 83       	std	Z+1, r25	; 0x01
    489e:	80 83       	st	Z, r24
					_delay_ms(900); // Delay for 900 milliseconds
					start=1;
				}
			}}}

	while (trails > 0) { // Loop until the user has no remaining atTempts
    48a0:	80 91 68 02 	lds	r24, 0x0268
    48a4:	88 23       	and	r24, r24
    48a6:	09 f0       	breq	.+2      	; 0x48aa <main+0x9fc>
    48a8:	af cd       	rjmp	.-1186   	; 0x4408 <main+0x55a>




	// If there are remaining login atTempts, enter control mode
	if (trails > 0)
    48aa:	80 91 68 02 	lds	r24, 0x0268
    48ae:	88 23       	and	r24, r24
    48b0:	11 f4       	brne	.+4      	; 0x48b6 <main+0xa08>
    48b2:	0c 94 76 2e 	jmp	0x5cec	; 0x5cec <main+0x1e3e>
	{
		while (1)
		{ // Infinite loop for control operations
			if (start2) {
    48b6:	fe 01       	movw	r30, r28
    48b8:	e6 50       	subi	r30, 0x06	; 6
    48ba:	ff 4f       	sbci	r31, 0xFF	; 255
    48bc:	80 81       	ld	r24, Z
    48be:	88 23       	and	r24, r24
    48c0:	09 f4       	brne	.+2      	; 0x48c4 <main+0xa16>
    48c2:	80 c1       	rjmp	.+768    	; 0x4bc4 <main+0xd16>
				vLCD_Clear();
    48c4:	0e 94 4c 1c 	call	0x3898	; 0x3898 <vLCD_Clear>
				vLCD_Send_String("  ###Control###"); // Display control menu
    48c8:	82 e6       	ldi	r24, 0x62	; 98
    48ca:	91 e0       	ldi	r25, 0x01	; 1
    48cc:	0e 94 05 1c 	call	0x380a	; 0x380a <vLCD_Send_String>
    48d0:	fe 01       	movw	r30, r28
    48d2:	e9 56       	subi	r30, 0x69	; 105
    48d4:	ff 4f       	sbci	r31, 0xFF	; 255
    48d6:	80 e0       	ldi	r24, 0x00	; 0
    48d8:	90 e0       	ldi	r25, 0x00	; 0
    48da:	aa ef       	ldi	r26, 0xFA	; 250
    48dc:	b4 e4       	ldi	r27, 0x44	; 68
    48de:	80 83       	st	Z, r24
    48e0:	91 83       	std	Z+1, r25	; 0x01
    48e2:	a2 83       	std	Z+2, r26	; 0x02
    48e4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48e6:	8e 01       	movw	r16, r28
    48e8:	0d 56       	subi	r16, 0x6D	; 109
    48ea:	1f 4f       	sbci	r17, 0xFF	; 255
    48ec:	fe 01       	movw	r30, r28
    48ee:	e9 56       	subi	r30, 0x69	; 105
    48f0:	ff 4f       	sbci	r31, 0xFF	; 255
    48f2:	60 81       	ld	r22, Z
    48f4:	71 81       	ldd	r23, Z+1	; 0x01
    48f6:	82 81       	ldd	r24, Z+2	; 0x02
    48f8:	93 81       	ldd	r25, Z+3	; 0x03
    48fa:	20 e0       	ldi	r18, 0x00	; 0
    48fc:	30 e0       	ldi	r19, 0x00	; 0
    48fe:	4a ef       	ldi	r20, 0xFA	; 250
    4900:	54 e4       	ldi	r21, 0x44	; 68
    4902:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4906:	dc 01       	movw	r26, r24
    4908:	cb 01       	movw	r24, r22
    490a:	f8 01       	movw	r30, r16
    490c:	80 83       	st	Z, r24
    490e:	91 83       	std	Z+1, r25	; 0x01
    4910:	a2 83       	std	Z+2, r26	; 0x02
    4912:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4914:	fe 01       	movw	r30, r28
    4916:	ed 56       	subi	r30, 0x6D	; 109
    4918:	ff 4f       	sbci	r31, 0xFF	; 255
    491a:	60 81       	ld	r22, Z
    491c:	71 81       	ldd	r23, Z+1	; 0x01
    491e:	82 81       	ldd	r24, Z+2	; 0x02
    4920:	93 81       	ldd	r25, Z+3	; 0x03
    4922:	20 e0       	ldi	r18, 0x00	; 0
    4924:	30 e0       	ldi	r19, 0x00	; 0
    4926:	40 e8       	ldi	r20, 0x80	; 128
    4928:	5f e3       	ldi	r21, 0x3F	; 63
    492a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    492e:	88 23       	and	r24, r24
    4930:	44 f4       	brge	.+16     	; 0x4942 <main+0xa94>
		__ticks = 1;
    4932:	fe 01       	movw	r30, r28
    4934:	ef 56       	subi	r30, 0x6F	; 111
    4936:	ff 4f       	sbci	r31, 0xFF	; 255
    4938:	81 e0       	ldi	r24, 0x01	; 1
    493a:	90 e0       	ldi	r25, 0x00	; 0
    493c:	91 83       	std	Z+1, r25	; 0x01
    493e:	80 83       	st	Z, r24
    4940:	64 c0       	rjmp	.+200    	; 0x4a0a <main+0xb5c>
	else if (__tmp > 65535)
    4942:	fe 01       	movw	r30, r28
    4944:	ed 56       	subi	r30, 0x6D	; 109
    4946:	ff 4f       	sbci	r31, 0xFF	; 255
    4948:	60 81       	ld	r22, Z
    494a:	71 81       	ldd	r23, Z+1	; 0x01
    494c:	82 81       	ldd	r24, Z+2	; 0x02
    494e:	93 81       	ldd	r25, Z+3	; 0x03
    4950:	20 e0       	ldi	r18, 0x00	; 0
    4952:	3f ef       	ldi	r19, 0xFF	; 255
    4954:	4f e7       	ldi	r20, 0x7F	; 127
    4956:	57 e4       	ldi	r21, 0x47	; 71
    4958:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    495c:	18 16       	cp	r1, r24
    495e:	0c f0       	brlt	.+2      	; 0x4962 <main+0xab4>
    4960:	43 c0       	rjmp	.+134    	; 0x49e8 <main+0xb3a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4962:	fe 01       	movw	r30, r28
    4964:	e9 56       	subi	r30, 0x69	; 105
    4966:	ff 4f       	sbci	r31, 0xFF	; 255
    4968:	60 81       	ld	r22, Z
    496a:	71 81       	ldd	r23, Z+1	; 0x01
    496c:	82 81       	ldd	r24, Z+2	; 0x02
    496e:	93 81       	ldd	r25, Z+3	; 0x03
    4970:	20 e0       	ldi	r18, 0x00	; 0
    4972:	30 e0       	ldi	r19, 0x00	; 0
    4974:	40 e2       	ldi	r20, 0x20	; 32
    4976:	51 e4       	ldi	r21, 0x41	; 65
    4978:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    497c:	dc 01       	movw	r26, r24
    497e:	cb 01       	movw	r24, r22
    4980:	8e 01       	movw	r16, r28
    4982:	0f 56       	subi	r16, 0x6F	; 111
    4984:	1f 4f       	sbci	r17, 0xFF	; 255
    4986:	bc 01       	movw	r22, r24
    4988:	cd 01       	movw	r24, r26
    498a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    498e:	dc 01       	movw	r26, r24
    4990:	cb 01       	movw	r24, r22
    4992:	f8 01       	movw	r30, r16
    4994:	91 83       	std	Z+1, r25	; 0x01
    4996:	80 83       	st	Z, r24
    4998:	1f c0       	rjmp	.+62     	; 0x49d8 <main+0xb2a>
    499a:	fe 01       	movw	r30, r28
    499c:	e1 57       	subi	r30, 0x71	; 113
    499e:	ff 4f       	sbci	r31, 0xFF	; 255
    49a0:	88 ec       	ldi	r24, 0xC8	; 200
    49a2:	90 e0       	ldi	r25, 0x00	; 0
    49a4:	91 83       	std	Z+1, r25	; 0x01
    49a6:	80 83       	st	Z, r24
    49a8:	fe 01       	movw	r30, r28
    49aa:	e1 57       	subi	r30, 0x71	; 113
    49ac:	ff 4f       	sbci	r31, 0xFF	; 255
    49ae:	80 81       	ld	r24, Z
    49b0:	91 81       	ldd	r25, Z+1	; 0x01
    49b2:	01 97       	sbiw	r24, 0x01	; 1
    49b4:	f1 f7       	brne	.-4      	; 0x49b2 <main+0xb04>
    49b6:	fe 01       	movw	r30, r28
    49b8:	e1 57       	subi	r30, 0x71	; 113
    49ba:	ff 4f       	sbci	r31, 0xFF	; 255
    49bc:	91 83       	std	Z+1, r25	; 0x01
    49be:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49c0:	de 01       	movw	r26, r28
    49c2:	af 56       	subi	r26, 0x6F	; 111
    49c4:	bf 4f       	sbci	r27, 0xFF	; 255
    49c6:	fe 01       	movw	r30, r28
    49c8:	ef 56       	subi	r30, 0x6F	; 111
    49ca:	ff 4f       	sbci	r31, 0xFF	; 255
    49cc:	80 81       	ld	r24, Z
    49ce:	91 81       	ldd	r25, Z+1	; 0x01
    49d0:	01 97       	sbiw	r24, 0x01	; 1
    49d2:	11 96       	adiw	r26, 0x01	; 1
    49d4:	9c 93       	st	X, r25
    49d6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49d8:	fe 01       	movw	r30, r28
    49da:	ef 56       	subi	r30, 0x6F	; 111
    49dc:	ff 4f       	sbci	r31, 0xFF	; 255
    49de:	80 81       	ld	r24, Z
    49e0:	91 81       	ldd	r25, Z+1	; 0x01
    49e2:	00 97       	sbiw	r24, 0x00	; 0
    49e4:	d1 f6       	brne	.-76     	; 0x499a <main+0xaec>
    49e6:	27 c0       	rjmp	.+78     	; 0x4a36 <main+0xb88>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49e8:	8e 01       	movw	r16, r28
    49ea:	0f 56       	subi	r16, 0x6F	; 111
    49ec:	1f 4f       	sbci	r17, 0xFF	; 255
    49ee:	fe 01       	movw	r30, r28
    49f0:	ed 56       	subi	r30, 0x6D	; 109
    49f2:	ff 4f       	sbci	r31, 0xFF	; 255
    49f4:	60 81       	ld	r22, Z
    49f6:	71 81       	ldd	r23, Z+1	; 0x01
    49f8:	82 81       	ldd	r24, Z+2	; 0x02
    49fa:	93 81       	ldd	r25, Z+3	; 0x03
    49fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a00:	dc 01       	movw	r26, r24
    4a02:	cb 01       	movw	r24, r22
    4a04:	f8 01       	movw	r30, r16
    4a06:	91 83       	std	Z+1, r25	; 0x01
    4a08:	80 83       	st	Z, r24
    4a0a:	de 01       	movw	r26, r28
    4a0c:	a3 57       	subi	r26, 0x73	; 115
    4a0e:	bf 4f       	sbci	r27, 0xFF	; 255
    4a10:	fe 01       	movw	r30, r28
    4a12:	ef 56       	subi	r30, 0x6F	; 111
    4a14:	ff 4f       	sbci	r31, 0xFF	; 255
    4a16:	80 81       	ld	r24, Z
    4a18:	91 81       	ldd	r25, Z+1	; 0x01
    4a1a:	8d 93       	st	X+, r24
    4a1c:	9c 93       	st	X, r25
    4a1e:	fe 01       	movw	r30, r28
    4a20:	e3 57       	subi	r30, 0x73	; 115
    4a22:	ff 4f       	sbci	r31, 0xFF	; 255
    4a24:	80 81       	ld	r24, Z
    4a26:	91 81       	ldd	r25, Z+1	; 0x01
    4a28:	01 97       	sbiw	r24, 0x01	; 1
    4a2a:	f1 f7       	brne	.-4      	; 0x4a28 <main+0xb7a>
    4a2c:	fe 01       	movw	r30, r28
    4a2e:	e3 57       	subi	r30, 0x73	; 115
    4a30:	ff 4f       	sbci	r31, 0xFF	; 255
    4a32:	91 83       	std	Z+1, r25	; 0x01
    4a34:	80 83       	st	Z, r24
				_delay_ms(2000);
				vLCD_Clear(); // Clear the LCD screen
    4a36:	0e 94 4c 1c 	call	0x3898	; 0x3898 <vLCD_Clear>
				vLCD_Send_String("1-LED 2-DOOR"); // Display options for LED and door control
    4a3a:	82 e7       	ldi	r24, 0x72	; 114
    4a3c:	91 e0       	ldi	r25, 0x01	; 1
    4a3e:	0e 94 05 1c 	call	0x380a	; 0x380a <vLCD_Send_String>
				vLCD_GO_TO(2,0);
    4a42:	82 e0       	ldi	r24, 0x02	; 2
    4a44:	60 e0       	ldi	r22, 0x00	; 0
    4a46:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <vLCD_GO_TO>
				vLCD_Send_String("3-TempDeg 4-Light"); // Display options for LM35 and LDR
    4a4a:	8f e7       	ldi	r24, 0x7F	; 127
    4a4c:	91 e0       	ldi	r25, 0x01	; 1
    4a4e:	0e 94 05 1c 	call	0x380a	; 0x380a <vLCD_Send_String>
    4a52:	fe 01       	movw	r30, r28
    4a54:	e7 57       	subi	r30, 0x77	; 119
    4a56:	ff 4f       	sbci	r31, 0xFF	; 255
    4a58:	80 e0       	ldi	r24, 0x00	; 0
    4a5a:	90 e0       	ldi	r25, 0x00	; 0
    4a5c:	a1 e6       	ldi	r26, 0x61	; 97
    4a5e:	b4 e4       	ldi	r27, 0x44	; 68
    4a60:	80 83       	st	Z, r24
    4a62:	91 83       	std	Z+1, r25	; 0x01
    4a64:	a2 83       	std	Z+2, r26	; 0x02
    4a66:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a68:	8e 01       	movw	r16, r28
    4a6a:	0b 57       	subi	r16, 0x7B	; 123
    4a6c:	1f 4f       	sbci	r17, 0xFF	; 255
    4a6e:	fe 01       	movw	r30, r28
    4a70:	e7 57       	subi	r30, 0x77	; 119
    4a72:	ff 4f       	sbci	r31, 0xFF	; 255
    4a74:	60 81       	ld	r22, Z
    4a76:	71 81       	ldd	r23, Z+1	; 0x01
    4a78:	82 81       	ldd	r24, Z+2	; 0x02
    4a7a:	93 81       	ldd	r25, Z+3	; 0x03
    4a7c:	20 e0       	ldi	r18, 0x00	; 0
    4a7e:	30 e0       	ldi	r19, 0x00	; 0
    4a80:	4a ef       	ldi	r20, 0xFA	; 250
    4a82:	54 e4       	ldi	r21, 0x44	; 68
    4a84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a88:	dc 01       	movw	r26, r24
    4a8a:	cb 01       	movw	r24, r22
    4a8c:	f8 01       	movw	r30, r16
    4a8e:	80 83       	st	Z, r24
    4a90:	91 83       	std	Z+1, r25	; 0x01
    4a92:	a2 83       	std	Z+2, r26	; 0x02
    4a94:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4a96:	fe 01       	movw	r30, r28
    4a98:	eb 57       	subi	r30, 0x7B	; 123
    4a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a9c:	60 81       	ld	r22, Z
    4a9e:	71 81       	ldd	r23, Z+1	; 0x01
    4aa0:	82 81       	ldd	r24, Z+2	; 0x02
    4aa2:	93 81       	ldd	r25, Z+3	; 0x03
    4aa4:	20 e0       	ldi	r18, 0x00	; 0
    4aa6:	30 e0       	ldi	r19, 0x00	; 0
    4aa8:	40 e8       	ldi	r20, 0x80	; 128
    4aaa:	5f e3       	ldi	r21, 0x3F	; 63
    4aac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4ab0:	88 23       	and	r24, r24
    4ab2:	44 f4       	brge	.+16     	; 0x4ac4 <main+0xc16>
		__ticks = 1;
    4ab4:	fe 01       	movw	r30, r28
    4ab6:	ed 57       	subi	r30, 0x7D	; 125
    4ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    4aba:	81 e0       	ldi	r24, 0x01	; 1
    4abc:	90 e0       	ldi	r25, 0x00	; 0
    4abe:	91 83       	std	Z+1, r25	; 0x01
    4ac0:	80 83       	st	Z, r24
    4ac2:	64 c0       	rjmp	.+200    	; 0x4b8c <main+0xcde>
	else if (__tmp > 65535)
    4ac4:	fe 01       	movw	r30, r28
    4ac6:	eb 57       	subi	r30, 0x7B	; 123
    4ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    4aca:	60 81       	ld	r22, Z
    4acc:	71 81       	ldd	r23, Z+1	; 0x01
    4ace:	82 81       	ldd	r24, Z+2	; 0x02
    4ad0:	93 81       	ldd	r25, Z+3	; 0x03
    4ad2:	20 e0       	ldi	r18, 0x00	; 0
    4ad4:	3f ef       	ldi	r19, 0xFF	; 255
    4ad6:	4f e7       	ldi	r20, 0x7F	; 127
    4ad8:	57 e4       	ldi	r21, 0x47	; 71
    4ada:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4ade:	18 16       	cp	r1, r24
    4ae0:	0c f0       	brlt	.+2      	; 0x4ae4 <main+0xc36>
    4ae2:	43 c0       	rjmp	.+134    	; 0x4b6a <main+0xcbc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ae4:	fe 01       	movw	r30, r28
    4ae6:	e7 57       	subi	r30, 0x77	; 119
    4ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    4aea:	60 81       	ld	r22, Z
    4aec:	71 81       	ldd	r23, Z+1	; 0x01
    4aee:	82 81       	ldd	r24, Z+2	; 0x02
    4af0:	93 81       	ldd	r25, Z+3	; 0x03
    4af2:	20 e0       	ldi	r18, 0x00	; 0
    4af4:	30 e0       	ldi	r19, 0x00	; 0
    4af6:	40 e2       	ldi	r20, 0x20	; 32
    4af8:	51 e4       	ldi	r21, 0x41	; 65
    4afa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4afe:	dc 01       	movw	r26, r24
    4b00:	cb 01       	movw	r24, r22
    4b02:	8e 01       	movw	r16, r28
    4b04:	0d 57       	subi	r16, 0x7D	; 125
    4b06:	1f 4f       	sbci	r17, 0xFF	; 255
    4b08:	bc 01       	movw	r22, r24
    4b0a:	cd 01       	movw	r24, r26
    4b0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b10:	dc 01       	movw	r26, r24
    4b12:	cb 01       	movw	r24, r22
    4b14:	f8 01       	movw	r30, r16
    4b16:	91 83       	std	Z+1, r25	; 0x01
    4b18:	80 83       	st	Z, r24
    4b1a:	1f c0       	rjmp	.+62     	; 0x4b5a <main+0xcac>
    4b1c:	fe 01       	movw	r30, r28
    4b1e:	ef 57       	subi	r30, 0x7F	; 127
    4b20:	ff 4f       	sbci	r31, 0xFF	; 255
    4b22:	88 ec       	ldi	r24, 0xC8	; 200
    4b24:	90 e0       	ldi	r25, 0x00	; 0
    4b26:	91 83       	std	Z+1, r25	; 0x01
    4b28:	80 83       	st	Z, r24
    4b2a:	fe 01       	movw	r30, r28
    4b2c:	ef 57       	subi	r30, 0x7F	; 127
    4b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b30:	80 81       	ld	r24, Z
    4b32:	91 81       	ldd	r25, Z+1	; 0x01
    4b34:	01 97       	sbiw	r24, 0x01	; 1
    4b36:	f1 f7       	brne	.-4      	; 0x4b34 <main+0xc86>
    4b38:	fe 01       	movw	r30, r28
    4b3a:	ef 57       	subi	r30, 0x7F	; 127
    4b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b3e:	91 83       	std	Z+1, r25	; 0x01
    4b40:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b42:	de 01       	movw	r26, r28
    4b44:	ad 57       	subi	r26, 0x7D	; 125
    4b46:	bf 4f       	sbci	r27, 0xFF	; 255
    4b48:	fe 01       	movw	r30, r28
    4b4a:	ed 57       	subi	r30, 0x7D	; 125
    4b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b4e:	80 81       	ld	r24, Z
    4b50:	91 81       	ldd	r25, Z+1	; 0x01
    4b52:	01 97       	sbiw	r24, 0x01	; 1
    4b54:	11 96       	adiw	r26, 0x01	; 1
    4b56:	9c 93       	st	X, r25
    4b58:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b5a:	fe 01       	movw	r30, r28
    4b5c:	ed 57       	subi	r30, 0x7D	; 125
    4b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b60:	80 81       	ld	r24, Z
    4b62:	91 81       	ldd	r25, Z+1	; 0x01
    4b64:	00 97       	sbiw	r24, 0x00	; 0
    4b66:	d1 f6       	brne	.-76     	; 0x4b1c <main+0xc6e>
    4b68:	28 c0       	rjmp	.+80     	; 0x4bba <main+0xd0c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b6a:	8e 01       	movw	r16, r28
    4b6c:	0d 57       	subi	r16, 0x7D	; 125
    4b6e:	1f 4f       	sbci	r17, 0xFF	; 255
    4b70:	fe 01       	movw	r30, r28
    4b72:	eb 57       	subi	r30, 0x7B	; 123
    4b74:	ff 4f       	sbci	r31, 0xFF	; 255
    4b76:	60 81       	ld	r22, Z
    4b78:	71 81       	ldd	r23, Z+1	; 0x01
    4b7a:	82 81       	ldd	r24, Z+2	; 0x02
    4b7c:	93 81       	ldd	r25, Z+3	; 0x03
    4b7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b82:	dc 01       	movw	r26, r24
    4b84:	cb 01       	movw	r24, r22
    4b86:	f8 01       	movw	r30, r16
    4b88:	91 83       	std	Z+1, r25	; 0x01
    4b8a:	80 83       	st	Z, r24
    4b8c:	de 01       	movw	r26, r28
    4b8e:	a1 58       	subi	r26, 0x81	; 129
    4b90:	bf 4f       	sbci	r27, 0xFF	; 255
    4b92:	fe 01       	movw	r30, r28
    4b94:	ed 57       	subi	r30, 0x7D	; 125
    4b96:	ff 4f       	sbci	r31, 0xFF	; 255
    4b98:	80 81       	ld	r24, Z
    4b9a:	91 81       	ldd	r25, Z+1	; 0x01
    4b9c:	11 96       	adiw	r26, 0x01	; 1
    4b9e:	9c 93       	st	X, r25
    4ba0:	8e 93       	st	-X, r24
    4ba2:	fe 01       	movw	r30, r28
    4ba4:	e1 58       	subi	r30, 0x81	; 129
    4ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ba8:	80 81       	ld	r24, Z
    4baa:	91 81       	ldd	r25, Z+1	; 0x01
    4bac:	01 97       	sbiw	r24, 0x01	; 1
    4bae:	f1 f7       	brne	.-4      	; 0x4bac <main+0xcfe>
    4bb0:	fe 01       	movw	r30, r28
    4bb2:	e1 58       	subi	r30, 0x81	; 129
    4bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    4bb6:	91 83       	std	Z+1, r25	; 0x01
    4bb8:	80 83       	st	Z, r24
				_delay_ms(900); // Delay for 900 milliseconds
				start2=0;
    4bba:	fe 01       	movw	r30, r28
    4bbc:	e6 50       	subi	r30, 0x06	; 6
    4bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    4bc0:	10 82       	st	Z, r1
    4bc2:	79 ce       	rjmp	.-782    	; 0x48b6 <main+0xa08>
			}
			else{
				u8 received_operation = u8KEY_PRESSED(); // Receive operation choice from UART
    4bc4:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <u8KEY_PRESSED>
    4bc8:	fe 01       	movw	r30, r28
    4bca:	e7 50       	subi	r30, 0x07	; 7
    4bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    4bce:	80 83       	st	Z, r24
				if(received_operation != 0xff) {
    4bd0:	fe 01       	movw	r30, r28
    4bd2:	e7 50       	subi	r30, 0x07	; 7
    4bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    4bd6:	80 81       	ld	r24, Z
    4bd8:	8f 3f       	cpi	r24, 0xFF	; 255
    4bda:	09 f4       	brne	.+2      	; 0x4bde <main+0xd30>
    4bdc:	6c ce       	rjmp	.-808    	; 0x48b6 <main+0xa08>
					if (received_operation-'0' == 1)
    4bde:	fe 01       	movw	r30, r28
    4be0:	e7 50       	subi	r30, 0x07	; 7
    4be2:	ff 4f       	sbci	r31, 0xFF	; 255
    4be4:	80 81       	ld	r24, Z
    4be6:	81 33       	cpi	r24, 0x31	; 49
    4be8:	09 f0       	breq	.+2      	; 0x4bec <main+0xd3e>
    4bea:	35 c3       	rjmp	.+1642   	; 0x5256 <main+0x13a8>
					{ // If LED control is selected
						vLCD_Clear(); // Clear the LCD screen
    4bec:	0e 94 4c 1c 	call	0x3898	; 0x3898 <vLCD_Clear>
						vLCD_Send_String("1-LED ON"); // Display LED ON option
    4bf0:	81 e9       	ldi	r24, 0x91	; 145
    4bf2:	91 e0       	ldi	r25, 0x01	; 1
    4bf4:	0e 94 05 1c 	call	0x380a	; 0x380a <vLCD_Send_String>
						vLCD_GO_TO(2,0); // Move cursor to second line, first column
    4bf8:	82 e0       	ldi	r24, 0x02	; 2
    4bfa:	60 e0       	ldi	r22, 0x00	; 0
    4bfc:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <vLCD_GO_TO>
						vLCD_Send_String("2-LED OFF"); // Display LED OFF option
    4c00:	8a e9       	ldi	r24, 0x9A	; 154
    4c02:	91 e0       	ldi	r25, 0x01	; 1
    4c04:	0e 94 05 1c 	call	0x380a	; 0x380a <vLCD_Send_String>
						while(1){
							u8 received_led_status = u8KEY_PRESSED(); // Receive LED control choice from UART
    4c08:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <u8KEY_PRESSED>
    4c0c:	fe 01       	movw	r30, r28
    4c0e:	e8 50       	subi	r30, 0x08	; 8
    4c10:	ff 4f       	sbci	r31, 0xFF	; 255
    4c12:	80 83       	st	Z, r24
							if(received_led_status != 0xff) {
    4c14:	fe 01       	movw	r30, r28
    4c16:	e8 50       	subi	r30, 0x08	; 8
    4c18:	ff 4f       	sbci	r31, 0xFF	; 255
    4c1a:	80 81       	ld	r24, Z
    4c1c:	8f 3f       	cpi	r24, 0xFF	; 255
    4c1e:	09 f4       	brne	.+2      	; 0x4c22 <main+0xd74>
    4c20:	65 c2       	rjmp	.+1226   	; 0x50ec <main+0x123e>
								if (received_led_status-'0' == 1)
    4c22:	fe 01       	movw	r30, r28
    4c24:	e8 50       	subi	r30, 0x08	; 8
    4c26:	ff 4f       	sbci	r31, 0xFF	; 255
    4c28:	80 81       	ld	r24, Z
    4c2a:	81 33       	cpi	r24, 0x31	; 49
    4c2c:	09 f0       	breq	.+2      	; 0x4c30 <main+0xd82>
    4c2e:	c9 c0       	rjmp	.+402    	; 0x4dc2 <main+0xf14>
								{
									vSet_Pin_OUTPUTvalue(PORT_A, PIN_3, HIGH); // Turn on LED connected to pin 3
    4c30:	80 e0       	ldi	r24, 0x00	; 0
    4c32:	63 e0       	ldi	r22, 0x03	; 3
    4c34:	41 e0       	ldi	r20, 0x01	; 1
    4c36:	0e 94 64 14 	call	0x28c8	; 0x28c8 <vSet_Pin_OUTPUTvalue>
									//UART_TransmitString("on"); // Send "on" status to UART
									vLCD_Clear(); // Clear the LCD screen
    4c3a:	0e 94 4c 1c 	call	0x3898	; 0x3898 <vLCD_Clear>
									vLCD_Send_String("LED ON"); // Display LED ON message
    4c3e:	84 ea       	ldi	r24, 0xA4	; 164
    4c40:	91 e0       	ldi	r25, 0x01	; 1
    4c42:	0e 94 05 1c 	call	0x380a	; 0x380a <vLCD_Send_String>
    4c46:	fe 01       	movw	r30, r28
    4c48:	e5 58       	subi	r30, 0x85	; 133
    4c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c4c:	80 e0       	ldi	r24, 0x00	; 0
    4c4e:	90 e8       	ldi	r25, 0x80	; 128
    4c50:	ab e3       	ldi	r26, 0x3B	; 59
    4c52:	b5 e4       	ldi	r27, 0x45	; 69
    4c54:	80 83       	st	Z, r24
    4c56:	91 83       	std	Z+1, r25	; 0x01
    4c58:	a2 83       	std	Z+2, r26	; 0x02
    4c5a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c5c:	8e 01       	movw	r16, r28
    4c5e:	09 58       	subi	r16, 0x89	; 137
    4c60:	1f 4f       	sbci	r17, 0xFF	; 255
    4c62:	fe 01       	movw	r30, r28
    4c64:	e5 58       	subi	r30, 0x85	; 133
    4c66:	ff 4f       	sbci	r31, 0xFF	; 255
    4c68:	60 81       	ld	r22, Z
    4c6a:	71 81       	ldd	r23, Z+1	; 0x01
    4c6c:	82 81       	ldd	r24, Z+2	; 0x02
    4c6e:	93 81       	ldd	r25, Z+3	; 0x03
    4c70:	20 e0       	ldi	r18, 0x00	; 0
    4c72:	30 e0       	ldi	r19, 0x00	; 0
    4c74:	4a ef       	ldi	r20, 0xFA	; 250
    4c76:	54 e4       	ldi	r21, 0x44	; 68
    4c78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c7c:	dc 01       	movw	r26, r24
    4c7e:	cb 01       	movw	r24, r22
    4c80:	f8 01       	movw	r30, r16
    4c82:	80 83       	st	Z, r24
    4c84:	91 83       	std	Z+1, r25	; 0x01
    4c86:	a2 83       	std	Z+2, r26	; 0x02
    4c88:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4c8a:	fe 01       	movw	r30, r28
    4c8c:	e9 58       	subi	r30, 0x89	; 137
    4c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c90:	60 81       	ld	r22, Z
    4c92:	71 81       	ldd	r23, Z+1	; 0x01
    4c94:	82 81       	ldd	r24, Z+2	; 0x02
    4c96:	93 81       	ldd	r25, Z+3	; 0x03
    4c98:	20 e0       	ldi	r18, 0x00	; 0
    4c9a:	30 e0       	ldi	r19, 0x00	; 0
    4c9c:	40 e8       	ldi	r20, 0x80	; 128
    4c9e:	5f e3       	ldi	r21, 0x3F	; 63
    4ca0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4ca4:	88 23       	and	r24, r24
    4ca6:	44 f4       	brge	.+16     	; 0x4cb8 <main+0xe0a>
		__ticks = 1;
    4ca8:	fe 01       	movw	r30, r28
    4caa:	eb 58       	subi	r30, 0x8B	; 139
    4cac:	ff 4f       	sbci	r31, 0xFF	; 255
    4cae:	81 e0       	ldi	r24, 0x01	; 1
    4cb0:	90 e0       	ldi	r25, 0x00	; 0
    4cb2:	91 83       	std	Z+1, r25	; 0x01
    4cb4:	80 83       	st	Z, r24
    4cb6:	64 c0       	rjmp	.+200    	; 0x4d80 <main+0xed2>
	else if (__tmp > 65535)
    4cb8:	fe 01       	movw	r30, r28
    4cba:	e9 58       	subi	r30, 0x89	; 137
    4cbc:	ff 4f       	sbci	r31, 0xFF	; 255
    4cbe:	60 81       	ld	r22, Z
    4cc0:	71 81       	ldd	r23, Z+1	; 0x01
    4cc2:	82 81       	ldd	r24, Z+2	; 0x02
    4cc4:	93 81       	ldd	r25, Z+3	; 0x03
    4cc6:	20 e0       	ldi	r18, 0x00	; 0
    4cc8:	3f ef       	ldi	r19, 0xFF	; 255
    4cca:	4f e7       	ldi	r20, 0x7F	; 127
    4ccc:	57 e4       	ldi	r21, 0x47	; 71
    4cce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4cd2:	18 16       	cp	r1, r24
    4cd4:	0c f0       	brlt	.+2      	; 0x4cd8 <main+0xe2a>
    4cd6:	43 c0       	rjmp	.+134    	; 0x4d5e <main+0xeb0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4cd8:	fe 01       	movw	r30, r28
    4cda:	e5 58       	subi	r30, 0x85	; 133
    4cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    4cde:	60 81       	ld	r22, Z
    4ce0:	71 81       	ldd	r23, Z+1	; 0x01
    4ce2:	82 81       	ldd	r24, Z+2	; 0x02
    4ce4:	93 81       	ldd	r25, Z+3	; 0x03
    4ce6:	20 e0       	ldi	r18, 0x00	; 0
    4ce8:	30 e0       	ldi	r19, 0x00	; 0
    4cea:	40 e2       	ldi	r20, 0x20	; 32
    4cec:	51 e4       	ldi	r21, 0x41	; 65
    4cee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cf2:	dc 01       	movw	r26, r24
    4cf4:	cb 01       	movw	r24, r22
    4cf6:	8e 01       	movw	r16, r28
    4cf8:	0b 58       	subi	r16, 0x8B	; 139
    4cfa:	1f 4f       	sbci	r17, 0xFF	; 255
    4cfc:	bc 01       	movw	r22, r24
    4cfe:	cd 01       	movw	r24, r26
    4d00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d04:	dc 01       	movw	r26, r24
    4d06:	cb 01       	movw	r24, r22
    4d08:	f8 01       	movw	r30, r16
    4d0a:	91 83       	std	Z+1, r25	; 0x01
    4d0c:	80 83       	st	Z, r24
    4d0e:	1f c0       	rjmp	.+62     	; 0x4d4e <main+0xea0>
    4d10:	fe 01       	movw	r30, r28
    4d12:	ed 58       	subi	r30, 0x8D	; 141
    4d14:	ff 4f       	sbci	r31, 0xFF	; 255
    4d16:	88 ec       	ldi	r24, 0xC8	; 200
    4d18:	90 e0       	ldi	r25, 0x00	; 0
    4d1a:	91 83       	std	Z+1, r25	; 0x01
    4d1c:	80 83       	st	Z, r24
    4d1e:	fe 01       	movw	r30, r28
    4d20:	ed 58       	subi	r30, 0x8D	; 141
    4d22:	ff 4f       	sbci	r31, 0xFF	; 255
    4d24:	80 81       	ld	r24, Z
    4d26:	91 81       	ldd	r25, Z+1	; 0x01
    4d28:	01 97       	sbiw	r24, 0x01	; 1
    4d2a:	f1 f7       	brne	.-4      	; 0x4d28 <main+0xe7a>
    4d2c:	fe 01       	movw	r30, r28
    4d2e:	ed 58       	subi	r30, 0x8D	; 141
    4d30:	ff 4f       	sbci	r31, 0xFF	; 255
    4d32:	91 83       	std	Z+1, r25	; 0x01
    4d34:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d36:	de 01       	movw	r26, r28
    4d38:	ab 58       	subi	r26, 0x8B	; 139
    4d3a:	bf 4f       	sbci	r27, 0xFF	; 255
    4d3c:	fe 01       	movw	r30, r28
    4d3e:	eb 58       	subi	r30, 0x8B	; 139
    4d40:	ff 4f       	sbci	r31, 0xFF	; 255
    4d42:	80 81       	ld	r24, Z
    4d44:	91 81       	ldd	r25, Z+1	; 0x01
    4d46:	01 97       	sbiw	r24, 0x01	; 1
    4d48:	11 96       	adiw	r26, 0x01	; 1
    4d4a:	9c 93       	st	X, r25
    4d4c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d4e:	fe 01       	movw	r30, r28
    4d50:	eb 58       	subi	r30, 0x8B	; 139
    4d52:	ff 4f       	sbci	r31, 0xFF	; 255
    4d54:	80 81       	ld	r24, Z
    4d56:	91 81       	ldd	r25, Z+1	; 0x01
    4d58:	00 97       	sbiw	r24, 0x00	; 0
    4d5a:	d1 f6       	brne	.-76     	; 0x4d10 <main+0xe62>
    4d5c:	28 c0       	rjmp	.+80     	; 0x4dae <main+0xf00>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d5e:	8e 01       	movw	r16, r28
    4d60:	0b 58       	subi	r16, 0x8B	; 139
    4d62:	1f 4f       	sbci	r17, 0xFF	; 255
    4d64:	fe 01       	movw	r30, r28
    4d66:	e9 58       	subi	r30, 0x89	; 137
    4d68:	ff 4f       	sbci	r31, 0xFF	; 255
    4d6a:	60 81       	ld	r22, Z
    4d6c:	71 81       	ldd	r23, Z+1	; 0x01
    4d6e:	82 81       	ldd	r24, Z+2	; 0x02
    4d70:	93 81       	ldd	r25, Z+3	; 0x03
    4d72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d76:	dc 01       	movw	r26, r24
    4d78:	cb 01       	movw	r24, r22
    4d7a:	f8 01       	movw	r30, r16
    4d7c:	91 83       	std	Z+1, r25	; 0x01
    4d7e:	80 83       	st	Z, r24
    4d80:	de 01       	movw	r26, r28
    4d82:	af 58       	subi	r26, 0x8F	; 143
    4d84:	bf 4f       	sbci	r27, 0xFF	; 255
    4d86:	fe 01       	movw	r30, r28
    4d88:	eb 58       	subi	r30, 0x8B	; 139
    4d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    4d8c:	80 81       	ld	r24, Z
    4d8e:	91 81       	ldd	r25, Z+1	; 0x01
    4d90:	11 96       	adiw	r26, 0x01	; 1
    4d92:	9c 93       	st	X, r25
    4d94:	8e 93       	st	-X, r24
    4d96:	fe 01       	movw	r30, r28
    4d98:	ef 58       	subi	r30, 0x8F	; 143
    4d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    4d9c:	80 81       	ld	r24, Z
    4d9e:	91 81       	ldd	r25, Z+1	; 0x01
    4da0:	01 97       	sbiw	r24, 0x01	; 1
    4da2:	f1 f7       	brne	.-4      	; 0x4da0 <main+0xef2>
    4da4:	fe 01       	movw	r30, r28
    4da6:	ef 58       	subi	r30, 0x8F	; 143
    4da8:	ff 4f       	sbci	r31, 0xFF	; 255
    4daa:	91 83       	std	Z+1, r25	; 0x01
    4dac:	80 83       	st	Z, r24
									_delay_ms(3000); // Delay for 900 milliseconds
									start2=1;
    4dae:	fe 01       	movw	r30, r28
    4db0:	e6 50       	subi	r30, 0x06	; 6
    4db2:	ff 4f       	sbci	r31, 0xFF	; 255
    4db4:	81 e0       	ldi	r24, 0x01	; 1
    4db6:	80 83       	st	Z, r24
									received_led_status=0;
    4db8:	fe 01       	movw	r30, r28
    4dba:	e8 50       	subi	r30, 0x08	; 8
    4dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    4dbe:	10 82       	st	Z, r1
    4dc0:	7a cd       	rjmp	.-1292   	; 0x48b6 <main+0xa08>
									break;
								}
								else if (received_led_status-'0' == 2)
    4dc2:	fe 01       	movw	r30, r28
    4dc4:	e8 50       	subi	r30, 0x08	; 8
    4dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    4dc8:	80 81       	ld	r24, Z
    4dca:	82 33       	cpi	r24, 0x32	; 50
    4dcc:	09 f0       	breq	.+2      	; 0x4dd0 <main+0xf22>
    4dce:	c9 c0       	rjmp	.+402    	; 0x4f62 <main+0x10b4>
								{
									vSet_Pin_OUTPUTvalue(PORT_A, PIN_3, LOW); // Turn off LED connected to pin 3
    4dd0:	80 e0       	ldi	r24, 0x00	; 0
    4dd2:	63 e0       	ldi	r22, 0x03	; 3
    4dd4:	40 e0       	ldi	r20, 0x00	; 0
    4dd6:	0e 94 64 14 	call	0x28c8	; 0x28c8 <vSet_Pin_OUTPUTvalue>
									//UART_TransmitString("off"); // Send "off" status to UART
									vLCD_Clear(); // Clear the LCD screen
    4dda:	0e 94 4c 1c 	call	0x3898	; 0x3898 <vLCD_Clear>
									vLCD_Send_String("LED OFF"); // Display LED OFF message
    4dde:	8b ea       	ldi	r24, 0xAB	; 171
    4de0:	91 e0       	ldi	r25, 0x01	; 1
    4de2:	0e 94 05 1c 	call	0x380a	; 0x380a <vLCD_Send_String>
    4de6:	fe 01       	movw	r30, r28
    4de8:	e3 59       	subi	r30, 0x93	; 147
    4dea:	ff 4f       	sbci	r31, 0xFF	; 255
    4dec:	80 e0       	ldi	r24, 0x00	; 0
    4dee:	90 e8       	ldi	r25, 0x80	; 128
    4df0:	ab e3       	ldi	r26, 0x3B	; 59
    4df2:	b5 e4       	ldi	r27, 0x45	; 69
    4df4:	80 83       	st	Z, r24
    4df6:	91 83       	std	Z+1, r25	; 0x01
    4df8:	a2 83       	std	Z+2, r26	; 0x02
    4dfa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4dfc:	8e 01       	movw	r16, r28
    4dfe:	07 59       	subi	r16, 0x97	; 151
    4e00:	1f 4f       	sbci	r17, 0xFF	; 255
    4e02:	fe 01       	movw	r30, r28
    4e04:	e3 59       	subi	r30, 0x93	; 147
    4e06:	ff 4f       	sbci	r31, 0xFF	; 255
    4e08:	60 81       	ld	r22, Z
    4e0a:	71 81       	ldd	r23, Z+1	; 0x01
    4e0c:	82 81       	ldd	r24, Z+2	; 0x02
    4e0e:	93 81       	ldd	r25, Z+3	; 0x03
    4e10:	20 e0       	ldi	r18, 0x00	; 0
    4e12:	30 e0       	ldi	r19, 0x00	; 0
    4e14:	4a ef       	ldi	r20, 0xFA	; 250
    4e16:	54 e4       	ldi	r21, 0x44	; 68
    4e18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e1c:	dc 01       	movw	r26, r24
    4e1e:	cb 01       	movw	r24, r22
    4e20:	f8 01       	movw	r30, r16
    4e22:	80 83       	st	Z, r24
    4e24:	91 83       	std	Z+1, r25	; 0x01
    4e26:	a2 83       	std	Z+2, r26	; 0x02
    4e28:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4e2a:	fe 01       	movw	r30, r28
    4e2c:	e7 59       	subi	r30, 0x97	; 151
    4e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e30:	60 81       	ld	r22, Z
    4e32:	71 81       	ldd	r23, Z+1	; 0x01
    4e34:	82 81       	ldd	r24, Z+2	; 0x02
    4e36:	93 81       	ldd	r25, Z+3	; 0x03
    4e38:	20 e0       	ldi	r18, 0x00	; 0
    4e3a:	30 e0       	ldi	r19, 0x00	; 0
    4e3c:	40 e8       	ldi	r20, 0x80	; 128
    4e3e:	5f e3       	ldi	r21, 0x3F	; 63
    4e40:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4e44:	88 23       	and	r24, r24
    4e46:	44 f4       	brge	.+16     	; 0x4e58 <main+0xfaa>
		__ticks = 1;
    4e48:	fe 01       	movw	r30, r28
    4e4a:	e9 59       	subi	r30, 0x99	; 153
    4e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    4e4e:	81 e0       	ldi	r24, 0x01	; 1
    4e50:	90 e0       	ldi	r25, 0x00	; 0
    4e52:	91 83       	std	Z+1, r25	; 0x01
    4e54:	80 83       	st	Z, r24
    4e56:	64 c0       	rjmp	.+200    	; 0x4f20 <main+0x1072>
	else if (__tmp > 65535)
    4e58:	fe 01       	movw	r30, r28
    4e5a:	e7 59       	subi	r30, 0x97	; 151
    4e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    4e5e:	60 81       	ld	r22, Z
    4e60:	71 81       	ldd	r23, Z+1	; 0x01
    4e62:	82 81       	ldd	r24, Z+2	; 0x02
    4e64:	93 81       	ldd	r25, Z+3	; 0x03
    4e66:	20 e0       	ldi	r18, 0x00	; 0
    4e68:	3f ef       	ldi	r19, 0xFF	; 255
    4e6a:	4f e7       	ldi	r20, 0x7F	; 127
    4e6c:	57 e4       	ldi	r21, 0x47	; 71
    4e6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4e72:	18 16       	cp	r1, r24
    4e74:	0c f0       	brlt	.+2      	; 0x4e78 <main+0xfca>
    4e76:	43 c0       	rjmp	.+134    	; 0x4efe <main+0x1050>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e78:	fe 01       	movw	r30, r28
    4e7a:	e3 59       	subi	r30, 0x93	; 147
    4e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    4e7e:	60 81       	ld	r22, Z
    4e80:	71 81       	ldd	r23, Z+1	; 0x01
    4e82:	82 81       	ldd	r24, Z+2	; 0x02
    4e84:	93 81       	ldd	r25, Z+3	; 0x03
    4e86:	20 e0       	ldi	r18, 0x00	; 0
    4e88:	30 e0       	ldi	r19, 0x00	; 0
    4e8a:	40 e2       	ldi	r20, 0x20	; 32
    4e8c:	51 e4       	ldi	r21, 0x41	; 65
    4e8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e92:	dc 01       	movw	r26, r24
    4e94:	cb 01       	movw	r24, r22
    4e96:	8e 01       	movw	r16, r28
    4e98:	09 59       	subi	r16, 0x99	; 153
    4e9a:	1f 4f       	sbci	r17, 0xFF	; 255
    4e9c:	bc 01       	movw	r22, r24
    4e9e:	cd 01       	movw	r24, r26
    4ea0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ea4:	dc 01       	movw	r26, r24
    4ea6:	cb 01       	movw	r24, r22
    4ea8:	f8 01       	movw	r30, r16
    4eaa:	91 83       	std	Z+1, r25	; 0x01
    4eac:	80 83       	st	Z, r24
    4eae:	1f c0       	rjmp	.+62     	; 0x4eee <main+0x1040>
    4eb0:	fe 01       	movw	r30, r28
    4eb2:	eb 59       	subi	r30, 0x9B	; 155
    4eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    4eb6:	88 ec       	ldi	r24, 0xC8	; 200
    4eb8:	90 e0       	ldi	r25, 0x00	; 0
    4eba:	91 83       	std	Z+1, r25	; 0x01
    4ebc:	80 83       	st	Z, r24
    4ebe:	fe 01       	movw	r30, r28
    4ec0:	eb 59       	subi	r30, 0x9B	; 155
    4ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ec4:	80 81       	ld	r24, Z
    4ec6:	91 81       	ldd	r25, Z+1	; 0x01
    4ec8:	01 97       	sbiw	r24, 0x01	; 1
    4eca:	f1 f7       	brne	.-4      	; 0x4ec8 <main+0x101a>
    4ecc:	fe 01       	movw	r30, r28
    4ece:	eb 59       	subi	r30, 0x9B	; 155
    4ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ed2:	91 83       	std	Z+1, r25	; 0x01
    4ed4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ed6:	de 01       	movw	r26, r28
    4ed8:	a9 59       	subi	r26, 0x99	; 153
    4eda:	bf 4f       	sbci	r27, 0xFF	; 255
    4edc:	fe 01       	movw	r30, r28
    4ede:	e9 59       	subi	r30, 0x99	; 153
    4ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ee2:	80 81       	ld	r24, Z
    4ee4:	91 81       	ldd	r25, Z+1	; 0x01
    4ee6:	01 97       	sbiw	r24, 0x01	; 1
    4ee8:	11 96       	adiw	r26, 0x01	; 1
    4eea:	9c 93       	st	X, r25
    4eec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4eee:	fe 01       	movw	r30, r28
    4ef0:	e9 59       	subi	r30, 0x99	; 153
    4ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ef4:	80 81       	ld	r24, Z
    4ef6:	91 81       	ldd	r25, Z+1	; 0x01
    4ef8:	00 97       	sbiw	r24, 0x00	; 0
    4efa:	d1 f6       	brne	.-76     	; 0x4eb0 <main+0x1002>
    4efc:	28 c0       	rjmp	.+80     	; 0x4f4e <main+0x10a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4efe:	8e 01       	movw	r16, r28
    4f00:	09 59       	subi	r16, 0x99	; 153
    4f02:	1f 4f       	sbci	r17, 0xFF	; 255
    4f04:	fe 01       	movw	r30, r28
    4f06:	e7 59       	subi	r30, 0x97	; 151
    4f08:	ff 4f       	sbci	r31, 0xFF	; 255
    4f0a:	60 81       	ld	r22, Z
    4f0c:	71 81       	ldd	r23, Z+1	; 0x01
    4f0e:	82 81       	ldd	r24, Z+2	; 0x02
    4f10:	93 81       	ldd	r25, Z+3	; 0x03
    4f12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f16:	dc 01       	movw	r26, r24
    4f18:	cb 01       	movw	r24, r22
    4f1a:	f8 01       	movw	r30, r16
    4f1c:	91 83       	std	Z+1, r25	; 0x01
    4f1e:	80 83       	st	Z, r24
    4f20:	de 01       	movw	r26, r28
    4f22:	ad 59       	subi	r26, 0x9D	; 157
    4f24:	bf 4f       	sbci	r27, 0xFF	; 255
    4f26:	fe 01       	movw	r30, r28
    4f28:	e9 59       	subi	r30, 0x99	; 153
    4f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f2c:	80 81       	ld	r24, Z
    4f2e:	91 81       	ldd	r25, Z+1	; 0x01
    4f30:	11 96       	adiw	r26, 0x01	; 1
    4f32:	9c 93       	st	X, r25
    4f34:	8e 93       	st	-X, r24
    4f36:	fe 01       	movw	r30, r28
    4f38:	ed 59       	subi	r30, 0x9D	; 157
    4f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f3c:	80 81       	ld	r24, Z
    4f3e:	91 81       	ldd	r25, Z+1	; 0x01
    4f40:	01 97       	sbiw	r24, 0x01	; 1
    4f42:	f1 f7       	brne	.-4      	; 0x4f40 <main+0x1092>
    4f44:	fe 01       	movw	r30, r28
    4f46:	ed 59       	subi	r30, 0x9D	; 157
    4f48:	ff 4f       	sbci	r31, 0xFF	; 255
    4f4a:	91 83       	std	Z+1, r25	; 0x01
    4f4c:	80 83       	st	Z, r24
									_delay_ms(3000); // Delay for 900 milliseconds
									start2=1;
    4f4e:	fe 01       	movw	r30, r28
    4f50:	e6 50       	subi	r30, 0x06	; 6
    4f52:	ff 4f       	sbci	r31, 0xFF	; 255
    4f54:	81 e0       	ldi	r24, 0x01	; 1
    4f56:	80 83       	st	Z, r24
									received_led_status=0;
    4f58:	fe 01       	movw	r30, r28
    4f5a:	e8 50       	subi	r30, 0x08	; 8
    4f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f5e:	10 82       	st	Z, r1
    4f60:	aa cc       	rjmp	.-1708   	; 0x48b6 <main+0xa08>
								}

								else
								{
									//UART_TransmitString("none"); // Send "none" status to UART
									vLCD_Clear(); // Clear the LCD screen
    4f62:	0e 94 4c 1c 	call	0x3898	; 0x3898 <vLCD_Clear>
									//vLCD_Send_String("NONE"); // Display NONE message
									vLCD_sendDATA(received_led_status); // Display NONE message
    4f66:	fe 01       	movw	r30, r28
    4f68:	e8 50       	subi	r30, 0x08	; 8
    4f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f6c:	80 81       	ld	r24, Z
    4f6e:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <vLCD_sendDATA>
    4f72:	fe 01       	movw	r30, r28
    4f74:	e1 5a       	subi	r30, 0xA1	; 161
    4f76:	ff 4f       	sbci	r31, 0xFF	; 255
    4f78:	80 e0       	ldi	r24, 0x00	; 0
    4f7a:	90 e0       	ldi	r25, 0x00	; 0
    4f7c:	a1 e6       	ldi	r26, 0x61	; 97
    4f7e:	b4 e4       	ldi	r27, 0x44	; 68
    4f80:	80 83       	st	Z, r24
    4f82:	91 83       	std	Z+1, r25	; 0x01
    4f84:	a2 83       	std	Z+2, r26	; 0x02
    4f86:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f88:	8e 01       	movw	r16, r28
    4f8a:	05 5a       	subi	r16, 0xA5	; 165
    4f8c:	1f 4f       	sbci	r17, 0xFF	; 255
    4f8e:	fe 01       	movw	r30, r28
    4f90:	e1 5a       	subi	r30, 0xA1	; 161
    4f92:	ff 4f       	sbci	r31, 0xFF	; 255
    4f94:	60 81       	ld	r22, Z
    4f96:	71 81       	ldd	r23, Z+1	; 0x01
    4f98:	82 81       	ldd	r24, Z+2	; 0x02
    4f9a:	93 81       	ldd	r25, Z+3	; 0x03
    4f9c:	20 e0       	ldi	r18, 0x00	; 0
    4f9e:	30 e0       	ldi	r19, 0x00	; 0
    4fa0:	4a ef       	ldi	r20, 0xFA	; 250
    4fa2:	54 e4       	ldi	r21, 0x44	; 68
    4fa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fa8:	dc 01       	movw	r26, r24
    4faa:	cb 01       	movw	r24, r22
    4fac:	f8 01       	movw	r30, r16
    4fae:	80 83       	st	Z, r24
    4fb0:	91 83       	std	Z+1, r25	; 0x01
    4fb2:	a2 83       	std	Z+2, r26	; 0x02
    4fb4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4fb6:	fe 01       	movw	r30, r28
    4fb8:	e5 5a       	subi	r30, 0xA5	; 165
    4fba:	ff 4f       	sbci	r31, 0xFF	; 255
    4fbc:	60 81       	ld	r22, Z
    4fbe:	71 81       	ldd	r23, Z+1	; 0x01
    4fc0:	82 81       	ldd	r24, Z+2	; 0x02
    4fc2:	93 81       	ldd	r25, Z+3	; 0x03
    4fc4:	20 e0       	ldi	r18, 0x00	; 0
    4fc6:	30 e0       	ldi	r19, 0x00	; 0
    4fc8:	40 e8       	ldi	r20, 0x80	; 128
    4fca:	5f e3       	ldi	r21, 0x3F	; 63
    4fcc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4fd0:	88 23       	and	r24, r24
    4fd2:	44 f4       	brge	.+16     	; 0x4fe4 <main+0x1136>
		__ticks = 1;
    4fd4:	fe 01       	movw	r30, r28
    4fd6:	e7 5a       	subi	r30, 0xA7	; 167
    4fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    4fda:	81 e0       	ldi	r24, 0x01	; 1
    4fdc:	90 e0       	ldi	r25, 0x00	; 0
    4fde:	91 83       	std	Z+1, r25	; 0x01
    4fe0:	80 83       	st	Z, r24
    4fe2:	64 c0       	rjmp	.+200    	; 0x50ac <main+0x11fe>
	else if (__tmp > 65535)
    4fe4:	fe 01       	movw	r30, r28
    4fe6:	e5 5a       	subi	r30, 0xA5	; 165
    4fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    4fea:	60 81       	ld	r22, Z
    4fec:	71 81       	ldd	r23, Z+1	; 0x01
    4fee:	82 81       	ldd	r24, Z+2	; 0x02
    4ff0:	93 81       	ldd	r25, Z+3	; 0x03
    4ff2:	20 e0       	ldi	r18, 0x00	; 0
    4ff4:	3f ef       	ldi	r19, 0xFF	; 255
    4ff6:	4f e7       	ldi	r20, 0x7F	; 127
    4ff8:	57 e4       	ldi	r21, 0x47	; 71
    4ffa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4ffe:	18 16       	cp	r1, r24
    5000:	0c f0       	brlt	.+2      	; 0x5004 <main+0x1156>
    5002:	43 c0       	rjmp	.+134    	; 0x508a <main+0x11dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5004:	fe 01       	movw	r30, r28
    5006:	e1 5a       	subi	r30, 0xA1	; 161
    5008:	ff 4f       	sbci	r31, 0xFF	; 255
    500a:	60 81       	ld	r22, Z
    500c:	71 81       	ldd	r23, Z+1	; 0x01
    500e:	82 81       	ldd	r24, Z+2	; 0x02
    5010:	93 81       	ldd	r25, Z+3	; 0x03
    5012:	20 e0       	ldi	r18, 0x00	; 0
    5014:	30 e0       	ldi	r19, 0x00	; 0
    5016:	40 e2       	ldi	r20, 0x20	; 32
    5018:	51 e4       	ldi	r21, 0x41	; 65
    501a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    501e:	dc 01       	movw	r26, r24
    5020:	cb 01       	movw	r24, r22
    5022:	8e 01       	movw	r16, r28
    5024:	07 5a       	subi	r16, 0xA7	; 167
    5026:	1f 4f       	sbci	r17, 0xFF	; 255
    5028:	bc 01       	movw	r22, r24
    502a:	cd 01       	movw	r24, r26
    502c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5030:	dc 01       	movw	r26, r24
    5032:	cb 01       	movw	r24, r22
    5034:	f8 01       	movw	r30, r16
    5036:	91 83       	std	Z+1, r25	; 0x01
    5038:	80 83       	st	Z, r24
    503a:	1f c0       	rjmp	.+62     	; 0x507a <main+0x11cc>
    503c:	fe 01       	movw	r30, r28
    503e:	e9 5a       	subi	r30, 0xA9	; 169
    5040:	ff 4f       	sbci	r31, 0xFF	; 255
    5042:	88 ec       	ldi	r24, 0xC8	; 200
    5044:	90 e0       	ldi	r25, 0x00	; 0
    5046:	91 83       	std	Z+1, r25	; 0x01
    5048:	80 83       	st	Z, r24
    504a:	fe 01       	movw	r30, r28
    504c:	e9 5a       	subi	r30, 0xA9	; 169
    504e:	ff 4f       	sbci	r31, 0xFF	; 255
    5050:	80 81       	ld	r24, Z
    5052:	91 81       	ldd	r25, Z+1	; 0x01
    5054:	01 97       	sbiw	r24, 0x01	; 1
    5056:	f1 f7       	brne	.-4      	; 0x5054 <main+0x11a6>
    5058:	fe 01       	movw	r30, r28
    505a:	e9 5a       	subi	r30, 0xA9	; 169
    505c:	ff 4f       	sbci	r31, 0xFF	; 255
    505e:	91 83       	std	Z+1, r25	; 0x01
    5060:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5062:	de 01       	movw	r26, r28
    5064:	a7 5a       	subi	r26, 0xA7	; 167
    5066:	bf 4f       	sbci	r27, 0xFF	; 255
    5068:	fe 01       	movw	r30, r28
    506a:	e7 5a       	subi	r30, 0xA7	; 167
    506c:	ff 4f       	sbci	r31, 0xFF	; 255
    506e:	80 81       	ld	r24, Z
    5070:	91 81       	ldd	r25, Z+1	; 0x01
    5072:	01 97       	sbiw	r24, 0x01	; 1
    5074:	11 96       	adiw	r26, 0x01	; 1
    5076:	9c 93       	st	X, r25
    5078:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    507a:	fe 01       	movw	r30, r28
    507c:	e7 5a       	subi	r30, 0xA7	; 167
    507e:	ff 4f       	sbci	r31, 0xFF	; 255
    5080:	80 81       	ld	r24, Z
    5082:	91 81       	ldd	r25, Z+1	; 0x01
    5084:	00 97       	sbiw	r24, 0x00	; 0
    5086:	d1 f6       	brne	.-76     	; 0x503c <main+0x118e>
    5088:	28 c0       	rjmp	.+80     	; 0x50da <main+0x122c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    508a:	8e 01       	movw	r16, r28
    508c:	07 5a       	subi	r16, 0xA7	; 167
    508e:	1f 4f       	sbci	r17, 0xFF	; 255
    5090:	fe 01       	movw	r30, r28
    5092:	e5 5a       	subi	r30, 0xA5	; 165
    5094:	ff 4f       	sbci	r31, 0xFF	; 255
    5096:	60 81       	ld	r22, Z
    5098:	71 81       	ldd	r23, Z+1	; 0x01
    509a:	82 81       	ldd	r24, Z+2	; 0x02
    509c:	93 81       	ldd	r25, Z+3	; 0x03
    509e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50a2:	dc 01       	movw	r26, r24
    50a4:	cb 01       	movw	r24, r22
    50a6:	f8 01       	movw	r30, r16
    50a8:	91 83       	std	Z+1, r25	; 0x01
    50aa:	80 83       	st	Z, r24
    50ac:	de 01       	movw	r26, r28
    50ae:	ab 5a       	subi	r26, 0xAB	; 171
    50b0:	bf 4f       	sbci	r27, 0xFF	; 255
    50b2:	fe 01       	movw	r30, r28
    50b4:	e7 5a       	subi	r30, 0xA7	; 167
    50b6:	ff 4f       	sbci	r31, 0xFF	; 255
    50b8:	80 81       	ld	r24, Z
    50ba:	91 81       	ldd	r25, Z+1	; 0x01
    50bc:	11 96       	adiw	r26, 0x01	; 1
    50be:	9c 93       	st	X, r25
    50c0:	8e 93       	st	-X, r24
    50c2:	fe 01       	movw	r30, r28
    50c4:	eb 5a       	subi	r30, 0xAB	; 171
    50c6:	ff 4f       	sbci	r31, 0xFF	; 255
    50c8:	80 81       	ld	r24, Z
    50ca:	91 81       	ldd	r25, Z+1	; 0x01
    50cc:	01 97       	sbiw	r24, 0x01	; 1
    50ce:	f1 f7       	brne	.-4      	; 0x50cc <main+0x121e>
    50d0:	fe 01       	movw	r30, r28
    50d2:	eb 5a       	subi	r30, 0xAB	; 171
    50d4:	ff 4f       	sbci	r31, 0xFF	; 255
    50d6:	91 83       	std	Z+1, r25	; 0x01
    50d8:	80 83       	st	Z, r24

									_delay_ms(900); // Delay for 900 milliseconds
									start2=0;
    50da:	fe 01       	movw	r30, r28
    50dc:	e6 50       	subi	r30, 0x06	; 6
    50de:	ff 4f       	sbci	r31, 0xFF	; 255
    50e0:	10 82       	st	Z, r1
									received_led_status=0;
    50e2:	fe 01       	movw	r30, r28
    50e4:	e8 50       	subi	r30, 0x08	; 8
    50e6:	ff 4f       	sbci	r31, 0xFF	; 255
    50e8:	10 82       	st	Z, r1
    50ea:	e5 cb       	rjmp	.-2102   	; 0x48b6 <main+0xa08>
									break;
    50ec:	fe 01       	movw	r30, r28
    50ee:	ef 5a       	subi	r30, 0xAF	; 175
    50f0:	ff 4f       	sbci	r31, 0xFF	; 255
    50f2:	80 e0       	ldi	r24, 0x00	; 0
    50f4:	90 e0       	ldi	r25, 0x00	; 0
    50f6:	aa ef       	ldi	r26, 0xFA	; 250
    50f8:	b3 e4       	ldi	r27, 0x43	; 67
    50fa:	80 83       	st	Z, r24
    50fc:	91 83       	std	Z+1, r25	; 0x01
    50fe:	a2 83       	std	Z+2, r26	; 0x02
    5100:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5102:	8e 01       	movw	r16, r28
    5104:	03 5b       	subi	r16, 0xB3	; 179
    5106:	1f 4f       	sbci	r17, 0xFF	; 255
    5108:	fe 01       	movw	r30, r28
    510a:	ef 5a       	subi	r30, 0xAF	; 175
    510c:	ff 4f       	sbci	r31, 0xFF	; 255
    510e:	60 81       	ld	r22, Z
    5110:	71 81       	ldd	r23, Z+1	; 0x01
    5112:	82 81       	ldd	r24, Z+2	; 0x02
    5114:	93 81       	ldd	r25, Z+3	; 0x03
    5116:	20 e0       	ldi	r18, 0x00	; 0
    5118:	30 e0       	ldi	r19, 0x00	; 0
    511a:	4a ef       	ldi	r20, 0xFA	; 250
    511c:	54 e4       	ldi	r21, 0x44	; 68
    511e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5122:	dc 01       	movw	r26, r24
    5124:	cb 01       	movw	r24, r22
    5126:	f8 01       	movw	r30, r16
    5128:	80 83       	st	Z, r24
    512a:	91 83       	std	Z+1, r25	; 0x01
    512c:	a2 83       	std	Z+2, r26	; 0x02
    512e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5130:	fe 01       	movw	r30, r28
    5132:	e3 5b       	subi	r30, 0xB3	; 179
    5134:	ff 4f       	sbci	r31, 0xFF	; 255
    5136:	60 81       	ld	r22, Z
    5138:	71 81       	ldd	r23, Z+1	; 0x01
    513a:	82 81       	ldd	r24, Z+2	; 0x02
    513c:	93 81       	ldd	r25, Z+3	; 0x03
    513e:	20 e0       	ldi	r18, 0x00	; 0
    5140:	30 e0       	ldi	r19, 0x00	; 0
    5142:	40 e8       	ldi	r20, 0x80	; 128
    5144:	5f e3       	ldi	r21, 0x3F	; 63
    5146:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    514a:	88 23       	and	r24, r24
    514c:	44 f4       	brge	.+16     	; 0x515e <main+0x12b0>
		__ticks = 1;
    514e:	fe 01       	movw	r30, r28
    5150:	e5 5b       	subi	r30, 0xB5	; 181
    5152:	ff 4f       	sbci	r31, 0xFF	; 255
    5154:	81 e0       	ldi	r24, 0x01	; 1
    5156:	90 e0       	ldi	r25, 0x00	; 0
    5158:	91 83       	std	Z+1, r25	; 0x01
    515a:	80 83       	st	Z, r24
    515c:	64 c0       	rjmp	.+200    	; 0x5226 <main+0x1378>
	else if (__tmp > 65535)
    515e:	fe 01       	movw	r30, r28
    5160:	e3 5b       	subi	r30, 0xB3	; 179
    5162:	ff 4f       	sbci	r31, 0xFF	; 255
    5164:	60 81       	ld	r22, Z
    5166:	71 81       	ldd	r23, Z+1	; 0x01
    5168:	82 81       	ldd	r24, Z+2	; 0x02
    516a:	93 81       	ldd	r25, Z+3	; 0x03
    516c:	20 e0       	ldi	r18, 0x00	; 0
    516e:	3f ef       	ldi	r19, 0xFF	; 255
    5170:	4f e7       	ldi	r20, 0x7F	; 127
    5172:	57 e4       	ldi	r21, 0x47	; 71
    5174:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5178:	18 16       	cp	r1, r24
    517a:	0c f0       	brlt	.+2      	; 0x517e <main+0x12d0>
    517c:	43 c0       	rjmp	.+134    	; 0x5204 <main+0x1356>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    517e:	fe 01       	movw	r30, r28
    5180:	ef 5a       	subi	r30, 0xAF	; 175
    5182:	ff 4f       	sbci	r31, 0xFF	; 255
    5184:	60 81       	ld	r22, Z
    5186:	71 81       	ldd	r23, Z+1	; 0x01
    5188:	82 81       	ldd	r24, Z+2	; 0x02
    518a:	93 81       	ldd	r25, Z+3	; 0x03
    518c:	20 e0       	ldi	r18, 0x00	; 0
    518e:	30 e0       	ldi	r19, 0x00	; 0
    5190:	40 e2       	ldi	r20, 0x20	; 32
    5192:	51 e4       	ldi	r21, 0x41	; 65
    5194:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5198:	dc 01       	movw	r26, r24
    519a:	cb 01       	movw	r24, r22
    519c:	8e 01       	movw	r16, r28
    519e:	05 5b       	subi	r16, 0xB5	; 181
    51a0:	1f 4f       	sbci	r17, 0xFF	; 255
    51a2:	bc 01       	movw	r22, r24
    51a4:	cd 01       	movw	r24, r26
    51a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51aa:	dc 01       	movw	r26, r24
    51ac:	cb 01       	movw	r24, r22
    51ae:	f8 01       	movw	r30, r16
    51b0:	91 83       	std	Z+1, r25	; 0x01
    51b2:	80 83       	st	Z, r24
    51b4:	1f c0       	rjmp	.+62     	; 0x51f4 <main+0x1346>
    51b6:	fe 01       	movw	r30, r28
    51b8:	e7 5b       	subi	r30, 0xB7	; 183
    51ba:	ff 4f       	sbci	r31, 0xFF	; 255
    51bc:	88 ec       	ldi	r24, 0xC8	; 200
    51be:	90 e0       	ldi	r25, 0x00	; 0
    51c0:	91 83       	std	Z+1, r25	; 0x01
    51c2:	80 83       	st	Z, r24
    51c4:	fe 01       	movw	r30, r28
    51c6:	e7 5b       	subi	r30, 0xB7	; 183
    51c8:	ff 4f       	sbci	r31, 0xFF	; 255
    51ca:	80 81       	ld	r24, Z
    51cc:	91 81       	ldd	r25, Z+1	; 0x01
    51ce:	01 97       	sbiw	r24, 0x01	; 1
    51d0:	f1 f7       	brne	.-4      	; 0x51ce <main+0x1320>
    51d2:	fe 01       	movw	r30, r28
    51d4:	e7 5b       	subi	r30, 0xB7	; 183
    51d6:	ff 4f       	sbci	r31, 0xFF	; 255
    51d8:	91 83       	std	Z+1, r25	; 0x01
    51da:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51dc:	de 01       	movw	r26, r28
    51de:	a5 5b       	subi	r26, 0xB5	; 181
    51e0:	bf 4f       	sbci	r27, 0xFF	; 255
    51e2:	fe 01       	movw	r30, r28
    51e4:	e5 5b       	subi	r30, 0xB5	; 181
    51e6:	ff 4f       	sbci	r31, 0xFF	; 255
    51e8:	80 81       	ld	r24, Z
    51ea:	91 81       	ldd	r25, Z+1	; 0x01
    51ec:	01 97       	sbiw	r24, 0x01	; 1
    51ee:	11 96       	adiw	r26, 0x01	; 1
    51f0:	9c 93       	st	X, r25
    51f2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51f4:	fe 01       	movw	r30, r28
    51f6:	e5 5b       	subi	r30, 0xB5	; 181
    51f8:	ff 4f       	sbci	r31, 0xFF	; 255
    51fa:	80 81       	ld	r24, Z
    51fc:	91 81       	ldd	r25, Z+1	; 0x01
    51fe:	00 97       	sbiw	r24, 0x00	; 0
    5200:	d1 f6       	brne	.-76     	; 0x51b6 <main+0x1308>
    5202:	02 cd       	rjmp	.-1532   	; 0x4c08 <main+0xd5a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5204:	8e 01       	movw	r16, r28
    5206:	05 5b       	subi	r16, 0xB5	; 181
    5208:	1f 4f       	sbci	r17, 0xFF	; 255
    520a:	fe 01       	movw	r30, r28
    520c:	e3 5b       	subi	r30, 0xB3	; 179
    520e:	ff 4f       	sbci	r31, 0xFF	; 255
    5210:	60 81       	ld	r22, Z
    5212:	71 81       	ldd	r23, Z+1	; 0x01
    5214:	82 81       	ldd	r24, Z+2	; 0x02
    5216:	93 81       	ldd	r25, Z+3	; 0x03
    5218:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    521c:	dc 01       	movw	r26, r24
    521e:	cb 01       	movw	r24, r22
    5220:	f8 01       	movw	r30, r16
    5222:	91 83       	std	Z+1, r25	; 0x01
    5224:	80 83       	st	Z, r24
    5226:	de 01       	movw	r26, r28
    5228:	a9 5b       	subi	r26, 0xB9	; 185
    522a:	bf 4f       	sbci	r27, 0xFF	; 255
    522c:	fe 01       	movw	r30, r28
    522e:	e5 5b       	subi	r30, 0xB5	; 181
    5230:	ff 4f       	sbci	r31, 0xFF	; 255
    5232:	80 81       	ld	r24, Z
    5234:	91 81       	ldd	r25, Z+1	; 0x01
    5236:	11 96       	adiw	r26, 0x01	; 1
    5238:	9c 93       	st	X, r25
    523a:	8e 93       	st	-X, r24
    523c:	fe 01       	movw	r30, r28
    523e:	e9 5b       	subi	r30, 0xB9	; 185
    5240:	ff 4f       	sbci	r31, 0xFF	; 255
    5242:	80 81       	ld	r24, Z
    5244:	91 81       	ldd	r25, Z+1	; 0x01
    5246:	01 97       	sbiw	r24, 0x01	; 1
    5248:	f1 f7       	brne	.-4      	; 0x5246 <main+0x1398>
    524a:	fe 01       	movw	r30, r28
    524c:	e9 5b       	subi	r30, 0xB9	; 185
    524e:	ff 4f       	sbci	r31, 0xFF	; 255
    5250:	91 83       	std	Z+1, r25	; 0x01
    5252:	80 83       	st	Z, r24
    5254:	d9 cc       	rjmp	.-1614   	; 0x4c08 <main+0xd5a>
							_delay_ms(500); // Adjust delay as needed


						}
					}
					else if ( (received_operation-'0') == 2)
    5256:	fe 01       	movw	r30, r28
    5258:	e7 50       	subi	r30, 0x07	; 7
    525a:	ff 4f       	sbci	r31, 0xFF	; 255
    525c:	80 81       	ld	r24, Z
    525e:	82 33       	cpi	r24, 0x32	; 50
    5260:	09 f0       	breq	.+2      	; 0x5264 <main+0x13b6>
    5262:	bd c1       	rjmp	.+890    	; 0x55de <main+0x1730>
					{ // If door control is selected
						vLCD_Clear(); // Clear the LCD screen
    5264:	0e 94 4c 1c 	call	0x3898	; 0x3898 <vLCD_Clear>
						vLCD_Send_String("1-LOCK DOOR"); // Display lock door option
    5268:	83 eb       	ldi	r24, 0xB3	; 179
    526a:	91 e0       	ldi	r25, 0x01	; 1
    526c:	0e 94 05 1c 	call	0x380a	; 0x380a <vLCD_Send_String>
						vLCD_GO_TO(2,0); // Move cursor to second line, first column
    5270:	82 e0       	ldi	r24, 0x02	; 2
    5272:	60 e0       	ldi	r22, 0x00	; 0
    5274:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <vLCD_GO_TO>
						vLCD_Send_String("2-UNLOCK DOOR"); // Display unlock door option
    5278:	8f eb       	ldi	r24, 0xBF	; 191
    527a:	91 e0       	ldi	r25, 0x01	; 1
    527c:	0e 94 05 1c 	call	0x380a	; 0x380a <vLCD_Send_String>


						while(1){
							u8 received_lock_status = u8KEY_PRESSED(); // Receive door control choice from UART
    5280:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <u8KEY_PRESSED>
    5284:	fe 01       	movw	r30, r28
    5286:	e9 50       	subi	r30, 0x09	; 9
    5288:	ff 4f       	sbci	r31, 0xFF	; 255
    528a:	80 83       	st	Z, r24

							if(received_lock_status != 0xff) {
    528c:	fe 01       	movw	r30, r28
    528e:	e9 50       	subi	r30, 0x09	; 9
    5290:	ff 4f       	sbci	r31, 0xFF	; 255
    5292:	80 81       	ld	r24, Z
    5294:	8f 3f       	cpi	r24, 0xFF	; 255
    5296:	09 f4       	brne	.+2      	; 0x529a <main+0x13ec>
    5298:	2f c1       	rjmp	.+606    	; 0x54f8 <main+0x164a>


								if (received_lock_status-'0' == 1)
    529a:	fe 01       	movw	r30, r28
    529c:	e9 50       	subi	r30, 0x09	; 9
    529e:	ff 4f       	sbci	r31, 0xFF	; 255
    52a0:	80 81       	ld	r24, Z
    52a2:	81 33       	cpi	r24, 0x31	; 49
    52a4:	09 f0       	breq	.+2      	; 0x52a8 <main+0x13fa>
    52a6:	9a c0       	rjmp	.+308    	; 0x53dc <main+0x152e>
								{
									vTIMER1_START();
    52a8:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <vTIMER1_START>

									servo_angle(0); // Lock the door by setting servo angle to 0
    52ac:	80 e0       	ldi	r24, 0x00	; 0
    52ae:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <servo_angle>
									vLCD_Clear(); // Clear the LCD screen
    52b2:	0e 94 4c 1c 	call	0x3898	; 0x3898 <vLCD_Clear>
									vLCD_Send_String("DOOR LOCKED"); // Display door locked message
    52b6:	8d ec       	ldi	r24, 0xCD	; 205
    52b8:	91 e0       	ldi	r25, 0x01	; 1
    52ba:	0e 94 05 1c 	call	0x380a	; 0x380a <vLCD_Send_String>
    52be:	fe 01       	movw	r30, r28
    52c0:	ed 5b       	subi	r30, 0xBD	; 189
    52c2:	ff 4f       	sbci	r31, 0xFF	; 255
    52c4:	80 e0       	ldi	r24, 0x00	; 0
    52c6:	90 e8       	ldi	r25, 0x80	; 128
    52c8:	ab e3       	ldi	r26, 0x3B	; 59
    52ca:	b5 e4       	ldi	r27, 0x45	; 69
    52cc:	80 83       	st	Z, r24
    52ce:	91 83       	std	Z+1, r25	; 0x01
    52d0:	a2 83       	std	Z+2, r26	; 0x02
    52d2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    52d4:	8e 01       	movw	r16, r28
    52d6:	01 5c       	subi	r16, 0xC1	; 193
    52d8:	1f 4f       	sbci	r17, 0xFF	; 255
    52da:	fe 01       	movw	r30, r28
    52dc:	ed 5b       	subi	r30, 0xBD	; 189
    52de:	ff 4f       	sbci	r31, 0xFF	; 255
    52e0:	60 81       	ld	r22, Z
    52e2:	71 81       	ldd	r23, Z+1	; 0x01
    52e4:	82 81       	ldd	r24, Z+2	; 0x02
    52e6:	93 81       	ldd	r25, Z+3	; 0x03
    52e8:	20 e0       	ldi	r18, 0x00	; 0
    52ea:	30 e0       	ldi	r19, 0x00	; 0
    52ec:	4a ef       	ldi	r20, 0xFA	; 250
    52ee:	54 e4       	ldi	r21, 0x44	; 68
    52f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52f4:	dc 01       	movw	r26, r24
    52f6:	cb 01       	movw	r24, r22
    52f8:	f8 01       	movw	r30, r16
    52fa:	80 83       	st	Z, r24
    52fc:	91 83       	std	Z+1, r25	; 0x01
    52fe:	a2 83       	std	Z+2, r26	; 0x02
    5300:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5302:	fe 01       	movw	r30, r28
    5304:	ff 96       	adiw	r30, 0x3f	; 63
    5306:	60 81       	ld	r22, Z
    5308:	71 81       	ldd	r23, Z+1	; 0x01
    530a:	82 81       	ldd	r24, Z+2	; 0x02
    530c:	93 81       	ldd	r25, Z+3	; 0x03
    530e:	20 e0       	ldi	r18, 0x00	; 0
    5310:	30 e0       	ldi	r19, 0x00	; 0
    5312:	40 e8       	ldi	r20, 0x80	; 128
    5314:	5f e3       	ldi	r21, 0x3F	; 63
    5316:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    531a:	88 23       	and	r24, r24
    531c:	2c f4       	brge	.+10     	; 0x5328 <main+0x147a>
		__ticks = 1;
    531e:	81 e0       	ldi	r24, 0x01	; 1
    5320:	90 e0       	ldi	r25, 0x00	; 0
    5322:	9e af       	std	Y+62, r25	; 0x3e
    5324:	8d af       	std	Y+61, r24	; 0x3d
    5326:	46 c0       	rjmp	.+140    	; 0x53b4 <main+0x1506>
	else if (__tmp > 65535)
    5328:	fe 01       	movw	r30, r28
    532a:	ff 96       	adiw	r30, 0x3f	; 63
    532c:	60 81       	ld	r22, Z
    532e:	71 81       	ldd	r23, Z+1	; 0x01
    5330:	82 81       	ldd	r24, Z+2	; 0x02
    5332:	93 81       	ldd	r25, Z+3	; 0x03
    5334:	20 e0       	ldi	r18, 0x00	; 0
    5336:	3f ef       	ldi	r19, 0xFF	; 255
    5338:	4f e7       	ldi	r20, 0x7F	; 127
    533a:	57 e4       	ldi	r21, 0x47	; 71
    533c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5340:	18 16       	cp	r1, r24
    5342:	64 f5       	brge	.+88     	; 0x539c <main+0x14ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5344:	fe 01       	movw	r30, r28
    5346:	ed 5b       	subi	r30, 0xBD	; 189
    5348:	ff 4f       	sbci	r31, 0xFF	; 255
    534a:	60 81       	ld	r22, Z
    534c:	71 81       	ldd	r23, Z+1	; 0x01
    534e:	82 81       	ldd	r24, Z+2	; 0x02
    5350:	93 81       	ldd	r25, Z+3	; 0x03
    5352:	20 e0       	ldi	r18, 0x00	; 0
    5354:	30 e0       	ldi	r19, 0x00	; 0
    5356:	40 e2       	ldi	r20, 0x20	; 32
    5358:	51 e4       	ldi	r21, 0x41	; 65
    535a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    535e:	dc 01       	movw	r26, r24
    5360:	cb 01       	movw	r24, r22
    5362:	bc 01       	movw	r22, r24
    5364:	cd 01       	movw	r24, r26
    5366:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    536a:	dc 01       	movw	r26, r24
    536c:	cb 01       	movw	r24, r22
    536e:	9e af       	std	Y+62, r25	; 0x3e
    5370:	8d af       	std	Y+61, r24	; 0x3d
    5372:	0f c0       	rjmp	.+30     	; 0x5392 <main+0x14e4>
    5374:	88 ec       	ldi	r24, 0xC8	; 200
    5376:	90 e0       	ldi	r25, 0x00	; 0
    5378:	9c af       	std	Y+60, r25	; 0x3c
    537a:	8b af       	std	Y+59, r24	; 0x3b
    537c:	8b ad       	ldd	r24, Y+59	; 0x3b
    537e:	9c ad       	ldd	r25, Y+60	; 0x3c
    5380:	01 97       	sbiw	r24, 0x01	; 1
    5382:	f1 f7       	brne	.-4      	; 0x5380 <main+0x14d2>
    5384:	9c af       	std	Y+60, r25	; 0x3c
    5386:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5388:	8d ad       	ldd	r24, Y+61	; 0x3d
    538a:	9e ad       	ldd	r25, Y+62	; 0x3e
    538c:	01 97       	sbiw	r24, 0x01	; 1
    538e:	9e af       	std	Y+62, r25	; 0x3e
    5390:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5392:	8d ad       	ldd	r24, Y+61	; 0x3d
    5394:	9e ad       	ldd	r25, Y+62	; 0x3e
    5396:	00 97       	sbiw	r24, 0x00	; 0
    5398:	69 f7       	brne	.-38     	; 0x5374 <main+0x14c6>
    539a:	16 c0       	rjmp	.+44     	; 0x53c8 <main+0x151a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    539c:	fe 01       	movw	r30, r28
    539e:	ff 96       	adiw	r30, 0x3f	; 63
    53a0:	60 81       	ld	r22, Z
    53a2:	71 81       	ldd	r23, Z+1	; 0x01
    53a4:	82 81       	ldd	r24, Z+2	; 0x02
    53a6:	93 81       	ldd	r25, Z+3	; 0x03
    53a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53ac:	dc 01       	movw	r26, r24
    53ae:	cb 01       	movw	r24, r22
    53b0:	9e af       	std	Y+62, r25	; 0x3e
    53b2:	8d af       	std	Y+61, r24	; 0x3d
    53b4:	8d ad       	ldd	r24, Y+61	; 0x3d
    53b6:	9e ad       	ldd	r25, Y+62	; 0x3e
    53b8:	9a af       	std	Y+58, r25	; 0x3a
    53ba:	89 af       	std	Y+57, r24	; 0x39
    53bc:	89 ad       	ldd	r24, Y+57	; 0x39
    53be:	9a ad       	ldd	r25, Y+58	; 0x3a
    53c0:	01 97       	sbiw	r24, 0x01	; 1
    53c2:	f1 f7       	brne	.-4      	; 0x53c0 <main+0x1512>
    53c4:	9a af       	std	Y+58, r25	; 0x3a
    53c6:	89 af       	std	Y+57, r24	; 0x39
									_delay_ms(3000); // Delay for 900 milliseconds
									start2=1;
    53c8:	fe 01       	movw	r30, r28
    53ca:	e6 50       	subi	r30, 0x06	; 6
    53cc:	ff 4f       	sbci	r31, 0xFF	; 255
    53ce:	81 e0       	ldi	r24, 0x01	; 1
    53d0:	80 83       	st	Z, r24
									received_lock_status=0;
    53d2:	fe 01       	movw	r30, r28
    53d4:	e9 50       	subi	r30, 0x09	; 9
    53d6:	ff 4f       	sbci	r31, 0xFF	; 255
    53d8:	10 82       	st	Z, r1
    53da:	6d ca       	rjmp	.-2854   	; 0x48b6 <main+0xa08>
									break;
									vTIMER1_STOP();

								}
								else if (received_lock_status-'0' == 2)
    53dc:	fe 01       	movw	r30, r28
    53de:	e9 50       	subi	r30, 0x09	; 9
    53e0:	ff 4f       	sbci	r31, 0xFF	; 255
    53e2:	80 81       	ld	r24, Z
    53e4:	82 33       	cpi	r24, 0x32	; 50
    53e6:	09 f0       	breq	.+2      	; 0x53ea <main+0x153c>
    53e8:	87 c0       	rjmp	.+270    	; 0x54f8 <main+0x164a>
								{
									vTIMER1_START();
    53ea:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <vTIMER1_START>

									servo_angle(180); // Unlock the door by setting servo angle to 90
    53ee:	84 eb       	ldi	r24, 0xB4	; 180
    53f0:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <servo_angle>
									vLCD_Clear(); // Clear the LCD screen
    53f4:	0e 94 4c 1c 	call	0x3898	; 0x3898 <vLCD_Clear>
									vLCD_Send_String("DOOR UNLOCKED"); // Display door unlocked message
    53f8:	89 ed       	ldi	r24, 0xD9	; 217
    53fa:	91 e0       	ldi	r25, 0x01	; 1
    53fc:	0e 94 05 1c 	call	0x380a	; 0x380a <vLCD_Send_String>
    5400:	80 e0       	ldi	r24, 0x00	; 0
    5402:	90 e8       	ldi	r25, 0x80	; 128
    5404:	ab e3       	ldi	r26, 0x3B	; 59
    5406:	b5 e4       	ldi	r27, 0x45	; 69
    5408:	8d ab       	std	Y+53, r24	; 0x35
    540a:	9e ab       	std	Y+54, r25	; 0x36
    540c:	af ab       	std	Y+55, r26	; 0x37
    540e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5410:	6d a9       	ldd	r22, Y+53	; 0x35
    5412:	7e a9       	ldd	r23, Y+54	; 0x36
    5414:	8f a9       	ldd	r24, Y+55	; 0x37
    5416:	98 ad       	ldd	r25, Y+56	; 0x38
    5418:	20 e0       	ldi	r18, 0x00	; 0
    541a:	30 e0       	ldi	r19, 0x00	; 0
    541c:	4a ef       	ldi	r20, 0xFA	; 250
    541e:	54 e4       	ldi	r21, 0x44	; 68
    5420:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5424:	dc 01       	movw	r26, r24
    5426:	cb 01       	movw	r24, r22
    5428:	89 ab       	std	Y+49, r24	; 0x31
    542a:	9a ab       	std	Y+50, r25	; 0x32
    542c:	ab ab       	std	Y+51, r26	; 0x33
    542e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5430:	69 a9       	ldd	r22, Y+49	; 0x31
    5432:	7a a9       	ldd	r23, Y+50	; 0x32
    5434:	8b a9       	ldd	r24, Y+51	; 0x33
    5436:	9c a9       	ldd	r25, Y+52	; 0x34
    5438:	20 e0       	ldi	r18, 0x00	; 0
    543a:	30 e0       	ldi	r19, 0x00	; 0
    543c:	40 e8       	ldi	r20, 0x80	; 128
    543e:	5f e3       	ldi	r21, 0x3F	; 63
    5440:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5444:	88 23       	and	r24, r24
    5446:	2c f4       	brge	.+10     	; 0x5452 <main+0x15a4>
		__ticks = 1;
    5448:	81 e0       	ldi	r24, 0x01	; 1
    544a:	90 e0       	ldi	r25, 0x00	; 0
    544c:	98 ab       	std	Y+48, r25	; 0x30
    544e:	8f a7       	std	Y+47, r24	; 0x2f
    5450:	3f c0       	rjmp	.+126    	; 0x54d0 <main+0x1622>
	else if (__tmp > 65535)
    5452:	69 a9       	ldd	r22, Y+49	; 0x31
    5454:	7a a9       	ldd	r23, Y+50	; 0x32
    5456:	8b a9       	ldd	r24, Y+51	; 0x33
    5458:	9c a9       	ldd	r25, Y+52	; 0x34
    545a:	20 e0       	ldi	r18, 0x00	; 0
    545c:	3f ef       	ldi	r19, 0xFF	; 255
    545e:	4f e7       	ldi	r20, 0x7F	; 127
    5460:	57 e4       	ldi	r21, 0x47	; 71
    5462:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5466:	18 16       	cp	r1, r24
    5468:	4c f5       	brge	.+82     	; 0x54bc <main+0x160e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    546a:	6d a9       	ldd	r22, Y+53	; 0x35
    546c:	7e a9       	ldd	r23, Y+54	; 0x36
    546e:	8f a9       	ldd	r24, Y+55	; 0x37
    5470:	98 ad       	ldd	r25, Y+56	; 0x38
    5472:	20 e0       	ldi	r18, 0x00	; 0
    5474:	30 e0       	ldi	r19, 0x00	; 0
    5476:	40 e2       	ldi	r20, 0x20	; 32
    5478:	51 e4       	ldi	r21, 0x41	; 65
    547a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    547e:	dc 01       	movw	r26, r24
    5480:	cb 01       	movw	r24, r22
    5482:	bc 01       	movw	r22, r24
    5484:	cd 01       	movw	r24, r26
    5486:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    548a:	dc 01       	movw	r26, r24
    548c:	cb 01       	movw	r24, r22
    548e:	98 ab       	std	Y+48, r25	; 0x30
    5490:	8f a7       	std	Y+47, r24	; 0x2f
    5492:	0f c0       	rjmp	.+30     	; 0x54b2 <main+0x1604>
    5494:	88 ec       	ldi	r24, 0xC8	; 200
    5496:	90 e0       	ldi	r25, 0x00	; 0
    5498:	9e a7       	std	Y+46, r25	; 0x2e
    549a:	8d a7       	std	Y+45, r24	; 0x2d
    549c:	8d a5       	ldd	r24, Y+45	; 0x2d
    549e:	9e a5       	ldd	r25, Y+46	; 0x2e
    54a0:	01 97       	sbiw	r24, 0x01	; 1
    54a2:	f1 f7       	brne	.-4      	; 0x54a0 <main+0x15f2>
    54a4:	9e a7       	std	Y+46, r25	; 0x2e
    54a6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    54a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    54aa:	98 a9       	ldd	r25, Y+48	; 0x30
    54ac:	01 97       	sbiw	r24, 0x01	; 1
    54ae:	98 ab       	std	Y+48, r25	; 0x30
    54b0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    54b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    54b4:	98 a9       	ldd	r25, Y+48	; 0x30
    54b6:	00 97       	sbiw	r24, 0x00	; 0
    54b8:	69 f7       	brne	.-38     	; 0x5494 <main+0x15e6>
    54ba:	14 c0       	rjmp	.+40     	; 0x54e4 <main+0x1636>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    54bc:	69 a9       	ldd	r22, Y+49	; 0x31
    54be:	7a a9       	ldd	r23, Y+50	; 0x32
    54c0:	8b a9       	ldd	r24, Y+51	; 0x33
    54c2:	9c a9       	ldd	r25, Y+52	; 0x34
    54c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54c8:	dc 01       	movw	r26, r24
    54ca:	cb 01       	movw	r24, r22
    54cc:	98 ab       	std	Y+48, r25	; 0x30
    54ce:	8f a7       	std	Y+47, r24	; 0x2f
    54d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    54d2:	98 a9       	ldd	r25, Y+48	; 0x30
    54d4:	9c a7       	std	Y+44, r25	; 0x2c
    54d6:	8b a7       	std	Y+43, r24	; 0x2b
    54d8:	8b a5       	ldd	r24, Y+43	; 0x2b
    54da:	9c a5       	ldd	r25, Y+44	; 0x2c
    54dc:	01 97       	sbiw	r24, 0x01	; 1
    54de:	f1 f7       	brne	.-4      	; 0x54dc <main+0x162e>
    54e0:	9c a7       	std	Y+44, r25	; 0x2c
    54e2:	8b a7       	std	Y+43, r24	; 0x2b
									_delay_ms(3000); // Delay for 900 milliseconds
									start2=1;
    54e4:	fe 01       	movw	r30, r28
    54e6:	e6 50       	subi	r30, 0x06	; 6
    54e8:	ff 4f       	sbci	r31, 0xFF	; 255
    54ea:	81 e0       	ldi	r24, 0x01	; 1
    54ec:	80 83       	st	Z, r24
									received_lock_status=0;
    54ee:	fe 01       	movw	r30, r28
    54f0:	e9 50       	subi	r30, 0x09	; 9
    54f2:	ff 4f       	sbci	r31, 0xFF	; 255
    54f4:	10 82       	st	Z, r1
    54f6:	df c9       	rjmp	.-3138   	; 0x48b6 <main+0xa08>
									break;
    54f8:	80 e0       	ldi	r24, 0x00	; 0
    54fa:	90 e0       	ldi	r25, 0x00	; 0
    54fc:	aa ef       	ldi	r26, 0xFA	; 250
    54fe:	b3 e4       	ldi	r27, 0x43	; 67
    5500:	8f a3       	std	Y+39, r24	; 0x27
    5502:	98 a7       	std	Y+40, r25	; 0x28
    5504:	a9 a7       	std	Y+41, r26	; 0x29
    5506:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5508:	6f a1       	ldd	r22, Y+39	; 0x27
    550a:	78 a5       	ldd	r23, Y+40	; 0x28
    550c:	89 a5       	ldd	r24, Y+41	; 0x29
    550e:	9a a5       	ldd	r25, Y+42	; 0x2a
    5510:	20 e0       	ldi	r18, 0x00	; 0
    5512:	30 e0       	ldi	r19, 0x00	; 0
    5514:	4a ef       	ldi	r20, 0xFA	; 250
    5516:	54 e4       	ldi	r21, 0x44	; 68
    5518:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    551c:	dc 01       	movw	r26, r24
    551e:	cb 01       	movw	r24, r22
    5520:	8b a3       	std	Y+35, r24	; 0x23
    5522:	9c a3       	std	Y+36, r25	; 0x24
    5524:	ad a3       	std	Y+37, r26	; 0x25
    5526:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5528:	6b a1       	ldd	r22, Y+35	; 0x23
    552a:	7c a1       	ldd	r23, Y+36	; 0x24
    552c:	8d a1       	ldd	r24, Y+37	; 0x25
    552e:	9e a1       	ldd	r25, Y+38	; 0x26
    5530:	20 e0       	ldi	r18, 0x00	; 0
    5532:	30 e0       	ldi	r19, 0x00	; 0
    5534:	40 e8       	ldi	r20, 0x80	; 128
    5536:	5f e3       	ldi	r21, 0x3F	; 63
    5538:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    553c:	88 23       	and	r24, r24
    553e:	2c f4       	brge	.+10     	; 0x554a <main+0x169c>
		__ticks = 1;
    5540:	81 e0       	ldi	r24, 0x01	; 1
    5542:	90 e0       	ldi	r25, 0x00	; 0
    5544:	9a a3       	std	Y+34, r25	; 0x22
    5546:	89 a3       	std	Y+33, r24	; 0x21
    5548:	3f c0       	rjmp	.+126    	; 0x55c8 <main+0x171a>
	else if (__tmp > 65535)
    554a:	6b a1       	ldd	r22, Y+35	; 0x23
    554c:	7c a1       	ldd	r23, Y+36	; 0x24
    554e:	8d a1       	ldd	r24, Y+37	; 0x25
    5550:	9e a1       	ldd	r25, Y+38	; 0x26
    5552:	20 e0       	ldi	r18, 0x00	; 0
    5554:	3f ef       	ldi	r19, 0xFF	; 255
    5556:	4f e7       	ldi	r20, 0x7F	; 127
    5558:	57 e4       	ldi	r21, 0x47	; 71
    555a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    555e:	18 16       	cp	r1, r24
    5560:	4c f5       	brge	.+82     	; 0x55b4 <main+0x1706>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5562:	6f a1       	ldd	r22, Y+39	; 0x27
    5564:	78 a5       	ldd	r23, Y+40	; 0x28
    5566:	89 a5       	ldd	r24, Y+41	; 0x29
    5568:	9a a5       	ldd	r25, Y+42	; 0x2a
    556a:	20 e0       	ldi	r18, 0x00	; 0
    556c:	30 e0       	ldi	r19, 0x00	; 0
    556e:	40 e2       	ldi	r20, 0x20	; 32
    5570:	51 e4       	ldi	r21, 0x41	; 65
    5572:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5576:	dc 01       	movw	r26, r24
    5578:	cb 01       	movw	r24, r22
    557a:	bc 01       	movw	r22, r24
    557c:	cd 01       	movw	r24, r26
    557e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5582:	dc 01       	movw	r26, r24
    5584:	cb 01       	movw	r24, r22
    5586:	9a a3       	std	Y+34, r25	; 0x22
    5588:	89 a3       	std	Y+33, r24	; 0x21
    558a:	0f c0       	rjmp	.+30     	; 0x55aa <main+0x16fc>
    558c:	88 ec       	ldi	r24, 0xC8	; 200
    558e:	90 e0       	ldi	r25, 0x00	; 0
    5590:	98 a3       	std	Y+32, r25	; 0x20
    5592:	8f 8f       	std	Y+31, r24	; 0x1f
    5594:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5596:	98 a1       	ldd	r25, Y+32	; 0x20
    5598:	01 97       	sbiw	r24, 0x01	; 1
    559a:	f1 f7       	brne	.-4      	; 0x5598 <main+0x16ea>
    559c:	98 a3       	std	Y+32, r25	; 0x20
    559e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    55a0:	89 a1       	ldd	r24, Y+33	; 0x21
    55a2:	9a a1       	ldd	r25, Y+34	; 0x22
    55a4:	01 97       	sbiw	r24, 0x01	; 1
    55a6:	9a a3       	std	Y+34, r25	; 0x22
    55a8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    55aa:	89 a1       	ldd	r24, Y+33	; 0x21
    55ac:	9a a1       	ldd	r25, Y+34	; 0x22
    55ae:	00 97       	sbiw	r24, 0x00	; 0
    55b0:	69 f7       	brne	.-38     	; 0x558c <main+0x16de>
    55b2:	66 ce       	rjmp	.-820    	; 0x5280 <main+0x13d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    55b4:	6b a1       	ldd	r22, Y+35	; 0x23
    55b6:	7c a1       	ldd	r23, Y+36	; 0x24
    55b8:	8d a1       	ldd	r24, Y+37	; 0x25
    55ba:	9e a1       	ldd	r25, Y+38	; 0x26
    55bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55c0:	dc 01       	movw	r26, r24
    55c2:	cb 01       	movw	r24, r22
    55c4:	9a a3       	std	Y+34, r25	; 0x22
    55c6:	89 a3       	std	Y+33, r24	; 0x21
    55c8:	89 a1       	ldd	r24, Y+33	; 0x21
    55ca:	9a a1       	ldd	r25, Y+34	; 0x22
    55cc:	9e 8f       	std	Y+30, r25	; 0x1e
    55ce:	8d 8f       	std	Y+29, r24	; 0x1d
    55d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    55d2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    55d4:	01 97       	sbiw	r24, 0x01	; 1
    55d6:	f1 f7       	brne	.-4      	; 0x55d4 <main+0x1726>
    55d8:	9e 8f       	std	Y+30, r25	; 0x1e
    55da:	8d 8f       	std	Y+29, r24	; 0x1d
    55dc:	51 ce       	rjmp	.-862    	; 0x5280 <main+0x13d2>

							_delay_ms(500); // Adjust delay as needed

						}
					}
					else if (received_operation-'0' == 3)
    55de:	fe 01       	movw	r30, r28
    55e0:	e7 50       	subi	r30, 0x07	; 7
    55e2:	ff 4f       	sbci	r31, 0xFF	; 255
    55e4:	80 81       	ld	r24, Z
    55e6:	83 33       	cpi	r24, 0x33	; 51
    55e8:	09 f0       	breq	.+2      	; 0x55ec <main+0x173e>
    55ea:	33 c2       	rjmp	.+1126   	; 0x5a52 <main+0x1ba4>
						//////////////////////////////////////////////////

						while (1) {


							u32 totalReading = 0;
    55ec:	fe 01       	movw	r30, r28
    55ee:	ed 50       	subi	r30, 0x0D	; 13
    55f0:	ff 4f       	sbci	r31, 0xFF	; 255
    55f2:	10 82       	st	Z, r1
    55f4:	11 82       	std	Z+1, r1	; 0x01
    55f6:	12 82       	std	Z+2, r1	; 0x02
    55f8:	13 82       	std	Z+3, r1	; 0x03
							for (int i = 0; i < 10; i++) {
    55fa:	fe 01       	movw	r30, r28
    55fc:	e0 51       	subi	r30, 0x10	; 16
    55fe:	ff 4f       	sbci	r31, 0xFF	; 255
    5600:	11 82       	std	Z+1, r1	; 0x01
    5602:	10 82       	st	Z, r1
    5604:	25 c0       	rjmp	.+74     	; 0x5650 <main+0x17a2>
							    totalReading += MADC_u8StartConversion(CHANNEL_7);
    5606:	87 e0       	ldi	r24, 0x07	; 7
    5608:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <MADC_u8StartConversion>
    560c:	9c 01       	movw	r18, r24
    560e:	40 e0       	ldi	r20, 0x00	; 0
    5610:	50 e0       	ldi	r21, 0x00	; 0
    5612:	be 01       	movw	r22, r28
    5614:	6d 50       	subi	r22, 0x0D	; 13
    5616:	7f 4f       	sbci	r23, 0xFF	; 255
    5618:	fe 01       	movw	r30, r28
    561a:	ed 50       	subi	r30, 0x0D	; 13
    561c:	ff 4f       	sbci	r31, 0xFF	; 255
    561e:	80 81       	ld	r24, Z
    5620:	91 81       	ldd	r25, Z+1	; 0x01
    5622:	a2 81       	ldd	r26, Z+2	; 0x02
    5624:	b3 81       	ldd	r27, Z+3	; 0x03
    5626:	82 0f       	add	r24, r18
    5628:	93 1f       	adc	r25, r19
    562a:	a4 1f       	adc	r26, r20
    562c:	b5 1f       	adc	r27, r21
    562e:	fb 01       	movw	r30, r22
    5630:	80 83       	st	Z, r24
    5632:	91 83       	std	Z+1, r25	; 0x01
    5634:	a2 83       	std	Z+2, r26	; 0x02
    5636:	b3 83       	std	Z+3, r27	; 0x03

						while (1) {


							u32 totalReading = 0;
							for (int i = 0; i < 10; i++) {
    5638:	de 01       	movw	r26, r28
    563a:	a0 51       	subi	r26, 0x10	; 16
    563c:	bf 4f       	sbci	r27, 0xFF	; 255
    563e:	fe 01       	movw	r30, r28
    5640:	e0 51       	subi	r30, 0x10	; 16
    5642:	ff 4f       	sbci	r31, 0xFF	; 255
    5644:	80 81       	ld	r24, Z
    5646:	91 81       	ldd	r25, Z+1	; 0x01
    5648:	01 96       	adiw	r24, 0x01	; 1
    564a:	11 96       	adiw	r26, 0x01	; 1
    564c:	9c 93       	st	X, r25
    564e:	8e 93       	st	-X, r24
    5650:	fe 01       	movw	r30, r28
    5652:	e0 51       	subi	r30, 0x10	; 16
    5654:	ff 4f       	sbci	r31, 0xFF	; 255
    5656:	80 81       	ld	r24, Z
    5658:	91 81       	ldd	r25, Z+1	; 0x01
    565a:	8a 30       	cpi	r24, 0x0A	; 10
    565c:	91 05       	cpc	r25, r1
    565e:	9c f2       	brlt	.-90     	; 0x5606 <main+0x1758>
							    totalReading += MADC_u8StartConversion(CHANNEL_7);
							}
							readdigit = totalReading / 10;
    5660:	fe 01       	movw	r30, r28
    5662:	ed 50       	subi	r30, 0x0D	; 13
    5664:	ff 4f       	sbci	r31, 0xFF	; 255
    5666:	80 81       	ld	r24, Z
    5668:	91 81       	ldd	r25, Z+1	; 0x01
    566a:	a2 81       	ldd	r26, Z+2	; 0x02
    566c:	b3 81       	ldd	r27, Z+3	; 0x03
    566e:	2a e0       	ldi	r18, 0x0A	; 10
    5670:	30 e0       	ldi	r19, 0x00	; 0
    5672:	40 e0       	ldi	r20, 0x00	; 0
    5674:	50 e0       	ldi	r21, 0x00	; 0
    5676:	bc 01       	movw	r22, r24
    5678:	cd 01       	movw	r24, r26
    567a:	0e 94 b7 2e 	call	0x5d6e	; 0x5d6e <__udivmodsi4>
    567e:	da 01       	movw	r26, r20
    5680:	c9 01       	movw	r24, r18
    5682:	fe 01       	movw	r30, r28
    5684:	ee 5e       	subi	r30, 0xEE	; 238
    5686:	fe 4f       	sbci	r31, 0xFE	; 254
    5688:	91 83       	std	Z+1, r25	; 0x01
    568a:	80 83       	st	Z, r24

							//readdigit = MADC_u8StartConversion(CHANNEL_7);

							if (readdigit != 0) { // Ensure a valid reading is obtained
    568c:	fe 01       	movw	r30, r28
    568e:	ee 5e       	subi	r30, 0xEE	; 238
    5690:	fe 4f       	sbci	r31, 0xFE	; 254
    5692:	80 81       	ld	r24, Z
    5694:	91 81       	ldd	r25, Z+1	; 0x01
    5696:	00 97       	sbiw	r24, 0x00	; 0
    5698:	09 f4       	brne	.+2      	; 0x569c <main+0x17ee>
    569a:	44 c1       	rjmp	.+648    	; 0x5924 <main+0x1a76>
								VOIL = (u32)(readdigit * 2560UL) / 1024; // Convert ADC value to voltage
    569c:	fe 01       	movw	r30, r28
    569e:	ee 5e       	subi	r30, 0xEE	; 238
    56a0:	fe 4f       	sbci	r31, 0xFE	; 254
    56a2:	80 81       	ld	r24, Z
    56a4:	91 81       	ldd	r25, Z+1	; 0x01
    56a6:	cc 01       	movw	r24, r24
    56a8:	a0 e0       	ldi	r26, 0x00	; 0
    56aa:	b0 e0       	ldi	r27, 0x00	; 0
    56ac:	20 e0       	ldi	r18, 0x00	; 0
    56ae:	3a e0       	ldi	r19, 0x0A	; 10
    56b0:	40 e0       	ldi	r20, 0x00	; 0
    56b2:	50 e0       	ldi	r21, 0x00	; 0
    56b4:	bc 01       	movw	r22, r24
    56b6:	cd 01       	movw	r24, r26
    56b8:	0e 94 84 2e 	call	0x5d08	; 0x5d08 <__mulsi3>
    56bc:	dc 01       	movw	r26, r24
    56be:	cb 01       	movw	r24, r22
    56c0:	fe 01       	movw	r30, r28
    56c2:	e8 5f       	subi	r30, 0xF8	; 248
    56c4:	fe 4f       	sbci	r31, 0xFE	; 254
    56c6:	07 2e       	mov	r0, r23
    56c8:	7a e0       	ldi	r23, 0x0A	; 10
    56ca:	b6 95       	lsr	r27
    56cc:	a7 95       	ror	r26
    56ce:	97 95       	ror	r25
    56d0:	87 95       	ror	r24
    56d2:	7a 95       	dec	r23
    56d4:	d1 f7       	brne	.-12     	; 0x56ca <main+0x181c>
    56d6:	70 2d       	mov	r23, r0
    56d8:	80 83       	st	Z, r24
    56da:	91 83       	std	Z+1, r25	; 0x01
    56dc:	a2 83       	std	Z+2, r26	; 0x02
    56de:	b3 83       	std	Z+3, r27	; 0x03
								Temp = VOIL / 10; // Convert voltage to Temperature
    56e0:	8e 01       	movw	r16, r28
    56e2:	04 5f       	subi	r16, 0xF4	; 244
    56e4:	1e 4f       	sbci	r17, 0xFE	; 254
    56e6:	fe 01       	movw	r30, r28
    56e8:	e8 5f       	subi	r30, 0xF8	; 248
    56ea:	fe 4f       	sbci	r31, 0xFE	; 254
    56ec:	80 81       	ld	r24, Z
    56ee:	91 81       	ldd	r25, Z+1	; 0x01
    56f0:	a2 81       	ldd	r26, Z+2	; 0x02
    56f2:	b3 81       	ldd	r27, Z+3	; 0x03
    56f4:	2a e0       	ldi	r18, 0x0A	; 10
    56f6:	30 e0       	ldi	r19, 0x00	; 0
    56f8:	40 e0       	ldi	r20, 0x00	; 0
    56fa:	50 e0       	ldi	r21, 0x00	; 0
    56fc:	bc 01       	movw	r22, r24
    56fe:	cd 01       	movw	r24, r26
    5700:	0e 94 b7 2e 	call	0x5d6e	; 0x5d6e <__udivmodsi4>
    5704:	da 01       	movw	r26, r20
    5706:	c9 01       	movw	r24, r18
    5708:	f8 01       	movw	r30, r16
    570a:	80 83       	st	Z, r24
    570c:	91 83       	std	Z+1, r25	; 0x01
    570e:	a2 83       	std	Z+2, r26	; 0x02
    5710:	b3 83       	std	Z+3, r27	; 0x03

								// Update LCD only if temperature has changed beyond threshold
								if (abs((int)(Temp - prevReading)) >= UPDATE_THRESHOLD) {
    5712:	fe 01       	movw	r30, r28
    5714:	e4 5f       	subi	r30, 0xF4	; 244
    5716:	fe 4f       	sbci	r31, 0xFE	; 254
    5718:	20 81       	ld	r18, Z
    571a:	31 81       	ldd	r19, Z+1	; 0x01
    571c:	fe 01       	movw	r30, r28
    571e:	ec 5f       	subi	r30, 0xFC	; 252
    5720:	fe 4f       	sbci	r31, 0xFE	; 254
    5722:	80 81       	ld	r24, Z
    5724:	91 81       	ldd	r25, Z+1	; 0x01
    5726:	a9 01       	movw	r20, r18
    5728:	48 1b       	sub	r20, r24
    572a:	59 0b       	sbc	r21, r25
    572c:	ca 01       	movw	r24, r20
    572e:	c9 5e       	subi	r28, 0xE9	; 233
    5730:	de 4f       	sbci	r29, 0xFE	; 254
    5732:	99 83       	std	Y+1, r25	; 0x01
    5734:	88 83       	st	Y, r24
    5736:	c7 51       	subi	r28, 0x17	; 23
    5738:	d1 40       	sbci	r29, 0x01	; 1
    573a:	c9 5e       	subi	r28, 0xE9	; 233
    573c:	de 4f       	sbci	r29, 0xFE	; 254
    573e:	88 81       	ld	r24, Y
    5740:	99 81       	ldd	r25, Y+1	; 0x01
    5742:	c7 51       	subi	r28, 0x17	; 23
    5744:	d1 40       	sbci	r29, 0x01	; 1
    5746:	99 23       	and	r25, r25
    5748:	7c f4       	brge	.+30     	; 0x5768 <main+0x18ba>
    574a:	c9 5e       	subi	r28, 0xE9	; 233
    574c:	de 4f       	sbci	r29, 0xFE	; 254
    574e:	e8 81       	ld	r30, Y
    5750:	f9 81       	ldd	r31, Y+1	; 0x01
    5752:	c7 51       	subi	r28, 0x17	; 23
    5754:	d1 40       	sbci	r29, 0x01	; 1
    5756:	f0 95       	com	r31
    5758:	e1 95       	neg	r30
    575a:	ff 4f       	sbci	r31, 0xFF	; 255
    575c:	c9 5e       	subi	r28, 0xE9	; 233
    575e:	de 4f       	sbci	r29, 0xFE	; 254
    5760:	f9 83       	std	Y+1, r31	; 0x01
    5762:	e8 83       	st	Y, r30
    5764:	c7 51       	subi	r28, 0x17	; 23
    5766:	d1 40       	sbci	r29, 0x01	; 1
    5768:	c9 5e       	subi	r28, 0xE9	; 233
    576a:	de 4f       	sbci	r29, 0xFE	; 254
    576c:	48 81       	ld	r20, Y
    576e:	59 81       	ldd	r21, Y+1	; 0x01
    5770:	c7 51       	subi	r28, 0x17	; 23
    5772:	d1 40       	sbci	r29, 0x01	; 1
    5774:	14 16       	cp	r1, r20
    5776:	15 06       	cpc	r1, r21
    5778:	0c f0       	brlt	.+2      	; 0x577c <main+0x18ce>
    577a:	da c0       	rjmp	.+436    	; 0x5930 <main+0x1a82>
									vLCD_Clear(); // Clear the LCD screen
    577c:	0e 94 4c 1c 	call	0x3898	; 0x3898 <vLCD_Clear>
									vLCD_Send_String("Temp:");
    5780:	87 ee       	ldi	r24, 0xE7	; 231
    5782:	91 e0       	ldi	r25, 0x01	; 1
    5784:	0e 94 05 1c 	call	0x380a	; 0x380a <vLCD_Send_String>
									vLCD_GO_TO(1, 6);
    5788:	81 e0       	ldi	r24, 0x01	; 1
    578a:	66 e0       	ldi	r22, 0x06	; 6
    578c:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <vLCD_GO_TO>
									vLCD_Convert_numTOchar(Temp);
    5790:	fe 01       	movw	r30, r28
    5792:	e4 5f       	subi	r30, 0xF4	; 244
    5794:	fe 4f       	sbci	r31, 0xFE	; 254
    5796:	80 81       	ld	r24, Z
    5798:	91 81       	ldd	r25, Z+1	; 0x01
    579a:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <vLCD_Convert_numTOchar>
									vLCD_Send_String(" C");
    579e:	8d ee       	ldi	r24, 0xED	; 237
    57a0:	91 e0       	ldi	r25, 0x01	; 1
    57a2:	0e 94 05 1c 	call	0x380a	; 0x380a <vLCD_Send_String>

									// Control fan speed based on temperature
									if ((Temp >= 20) && (Temp <= 35)) {
    57a6:	fe 01       	movw	r30, r28
    57a8:	e4 5f       	subi	r30, 0xF4	; 244
    57aa:	fe 4f       	sbci	r31, 0xFE	; 254
    57ac:	80 81       	ld	r24, Z
    57ae:	91 81       	ldd	r25, Z+1	; 0x01
    57b0:	a2 81       	ldd	r26, Z+2	; 0x02
    57b2:	b3 81       	ldd	r27, Z+3	; 0x03
    57b4:	84 31       	cpi	r24, 0x14	; 20
    57b6:	91 05       	cpc	r25, r1
    57b8:	a1 05       	cpc	r26, r1
    57ba:	b1 05       	cpc	r27, r1
    57bc:	f0 f0       	brcs	.+60     	; 0x57fa <main+0x194c>
    57be:	fe 01       	movw	r30, r28
    57c0:	e4 5f       	subi	r30, 0xF4	; 244
    57c2:	fe 4f       	sbci	r31, 0xFE	; 254
    57c4:	80 81       	ld	r24, Z
    57c6:	91 81       	ldd	r25, Z+1	; 0x01
    57c8:	a2 81       	ldd	r26, Z+2	; 0x02
    57ca:	b3 81       	ldd	r27, Z+3	; 0x03
    57cc:	84 32       	cpi	r24, 0x24	; 36
    57ce:	91 05       	cpc	r25, r1
    57d0:	a1 05       	cpc	r26, r1
    57d2:	b1 05       	cpc	r27, r1
    57d4:	90 f4       	brcc	.+36     	; 0x57fa <main+0x194c>
										vTimer2_SetOCRValue(127);
    57d6:	8f e7       	ldi	r24, 0x7F	; 127
    57d8:	90 e0       	ldi	r25, 0x00	; 0
    57da:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <vTimer2_SetOCRValue>
										vLCD_GO_TO(2, 0);
    57de:	82 e0       	ldi	r24, 0x02	; 2
    57e0:	60 e0       	ldi	r22, 0x00	; 0
    57e2:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <vLCD_GO_TO>
										vLCD_Send_String("Fan:half speed");
    57e6:	80 ef       	ldi	r24, 0xF0	; 240
    57e8:	91 e0       	ldi	r25, 0x01	; 1
    57ea:	0e 94 05 1c 	call	0x380a	; 0x380a <vLCD_Send_String>
										vSet_Pin_OUTPUTvalue(PORT_C, PIN_5, LOW);
    57ee:	82 e0       	ldi	r24, 0x02	; 2
    57f0:	65 e0       	ldi	r22, 0x05	; 5
    57f2:	40 e0       	ldi	r20, 0x00	; 0
    57f4:	0e 94 64 14 	call	0x28c8	; 0x28c8 <vSet_Pin_OUTPUTvalue>
    57f8:	83 c0       	rjmp	.+262    	; 0x5900 <main+0x1a52>
									} else if ((Temp > 25) && (Temp <= 30)) {
    57fa:	fe 01       	movw	r30, r28
    57fc:	e4 5f       	subi	r30, 0xF4	; 244
    57fe:	fe 4f       	sbci	r31, 0xFE	; 254
    5800:	80 81       	ld	r24, Z
    5802:	91 81       	ldd	r25, Z+1	; 0x01
    5804:	a2 81       	ldd	r26, Z+2	; 0x02
    5806:	b3 81       	ldd	r27, Z+3	; 0x03
    5808:	8a 31       	cpi	r24, 0x1A	; 26
    580a:	91 05       	cpc	r25, r1
    580c:	a1 05       	cpc	r26, r1
    580e:	b1 05       	cpc	r27, r1
    5810:	f0 f0       	brcs	.+60     	; 0x584e <main+0x19a0>
    5812:	fe 01       	movw	r30, r28
    5814:	e4 5f       	subi	r30, 0xF4	; 244
    5816:	fe 4f       	sbci	r31, 0xFE	; 254
    5818:	80 81       	ld	r24, Z
    581a:	91 81       	ldd	r25, Z+1	; 0x01
    581c:	a2 81       	ldd	r26, Z+2	; 0x02
    581e:	b3 81       	ldd	r27, Z+3	; 0x03
    5820:	8f 31       	cpi	r24, 0x1F	; 31
    5822:	91 05       	cpc	r25, r1
    5824:	a1 05       	cpc	r26, r1
    5826:	b1 05       	cpc	r27, r1
    5828:	90 f4       	brcc	.+36     	; 0x584e <main+0x19a0>
										vTimer2_SetOCRValue(191);
    582a:	8f eb       	ldi	r24, 0xBF	; 191
    582c:	90 e0       	ldi	r25, 0x00	; 0
    582e:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <vTimer2_SetOCRValue>
										vLCD_GO_TO(2, 0);
    5832:	82 e0       	ldi	r24, 0x02	; 2
    5834:	60 e0       	ldi	r22, 0x00	; 0
    5836:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <vLCD_GO_TO>
										vLCD_Send_String("Fan:75% speed");
    583a:	8f ef       	ldi	r24, 0xFF	; 255
    583c:	91 e0       	ldi	r25, 0x01	; 1
    583e:	0e 94 05 1c 	call	0x380a	; 0x380a <vLCD_Send_String>
										vSet_Pin_OUTPUTvalue(PORT_C, PIN_5, LOW);
    5842:	82 e0       	ldi	r24, 0x02	; 2
    5844:	65 e0       	ldi	r22, 0x05	; 5
    5846:	40 e0       	ldi	r20, 0x00	; 0
    5848:	0e 94 64 14 	call	0x28c8	; 0x28c8 <vSet_Pin_OUTPUTvalue>
    584c:	59 c0       	rjmp	.+178    	; 0x5900 <main+0x1a52>
									} else if ((Temp > 30) && (Temp <= 45)) {
    584e:	fe 01       	movw	r30, r28
    5850:	e4 5f       	subi	r30, 0xF4	; 244
    5852:	fe 4f       	sbci	r31, 0xFE	; 254
    5854:	80 81       	ld	r24, Z
    5856:	91 81       	ldd	r25, Z+1	; 0x01
    5858:	a2 81       	ldd	r26, Z+2	; 0x02
    585a:	b3 81       	ldd	r27, Z+3	; 0x03
    585c:	8f 31       	cpi	r24, 0x1F	; 31
    585e:	91 05       	cpc	r25, r1
    5860:	a1 05       	cpc	r26, r1
    5862:	b1 05       	cpc	r27, r1
    5864:	f0 f0       	brcs	.+60     	; 0x58a2 <main+0x19f4>
    5866:	fe 01       	movw	r30, r28
    5868:	e4 5f       	subi	r30, 0xF4	; 244
    586a:	fe 4f       	sbci	r31, 0xFE	; 254
    586c:	80 81       	ld	r24, Z
    586e:	91 81       	ldd	r25, Z+1	; 0x01
    5870:	a2 81       	ldd	r26, Z+2	; 0x02
    5872:	b3 81       	ldd	r27, Z+3	; 0x03
    5874:	8e 32       	cpi	r24, 0x2E	; 46
    5876:	91 05       	cpc	r25, r1
    5878:	a1 05       	cpc	r26, r1
    587a:	b1 05       	cpc	r27, r1
    587c:	90 f4       	brcc	.+36     	; 0x58a2 <main+0x19f4>
										vTimer2_SetOCRValue(255);
    587e:	8f ef       	ldi	r24, 0xFF	; 255
    5880:	90 e0       	ldi	r25, 0x00	; 0
    5882:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <vTimer2_SetOCRValue>
										vLCD_GO_TO(2, 0);
    5886:	82 e0       	ldi	r24, 0x02	; 2
    5888:	60 e0       	ldi	r22, 0x00	; 0
    588a:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <vLCD_GO_TO>
										vLCD_Send_String("Fan:full speed");
    588e:	8d e0       	ldi	r24, 0x0D	; 13
    5890:	92 e0       	ldi	r25, 0x02	; 2
    5892:	0e 94 05 1c 	call	0x380a	; 0x380a <vLCD_Send_String>
										vSet_Pin_OUTPUTvalue(PORT_C, PIN_5, LOW);
    5896:	82 e0       	ldi	r24, 0x02	; 2
    5898:	65 e0       	ldi	r22, 0x05	; 5
    589a:	40 e0       	ldi	r20, 0x00	; 0
    589c:	0e 94 64 14 	call	0x28c8	; 0x28c8 <vSet_Pin_OUTPUTvalue>
    58a0:	2f c0       	rjmp	.+94     	; 0x5900 <main+0x1a52>
									} else if (Temp > 45) {
    58a2:	fe 01       	movw	r30, r28
    58a4:	e4 5f       	subi	r30, 0xF4	; 244
    58a6:	fe 4f       	sbci	r31, 0xFE	; 254
    58a8:	80 81       	ld	r24, Z
    58aa:	91 81       	ldd	r25, Z+1	; 0x01
    58ac:	a2 81       	ldd	r26, Z+2	; 0x02
    58ae:	b3 81       	ldd	r27, Z+3	; 0x03
    58b0:	8e 32       	cpi	r24, 0x2E	; 46
    58b2:	91 05       	cpc	r25, r1
    58b4:	a1 05       	cpc	r26, r1
    58b6:	b1 05       	cpc	r27, r1
    58b8:	90 f0       	brcs	.+36     	; 0x58de <main+0x1a30>
										vTimer2_SetOCRValue(0);
    58ba:	80 e0       	ldi	r24, 0x00	; 0
    58bc:	90 e0       	ldi	r25, 0x00	; 0
    58be:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <vTimer2_SetOCRValue>
										vLCD_GO_TO(2, 0);
    58c2:	82 e0       	ldi	r24, 0x02	; 2
    58c4:	60 e0       	ldi	r22, 0x00	; 0
    58c6:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <vLCD_GO_TO>
										vLCD_Send_String("Fire warning!!");
    58ca:	8c e1       	ldi	r24, 0x1C	; 28
    58cc:	92 e0       	ldi	r25, 0x02	; 2
    58ce:	0e 94 05 1c 	call	0x380a	; 0x380a <vLCD_Send_String>
										vSet_Pin_OUTPUTvalue(PORT_C, PIN_5, HIGH); // Red LED ON
    58d2:	82 e0       	ldi	r24, 0x02	; 2
    58d4:	65 e0       	ldi	r22, 0x05	; 5
    58d6:	41 e0       	ldi	r20, 0x01	; 1
    58d8:	0e 94 64 14 	call	0x28c8	; 0x28c8 <vSet_Pin_OUTPUTvalue>
    58dc:	11 c0       	rjmp	.+34     	; 0x5900 <main+0x1a52>
									} else {
										vTimer2_SetOCRValue(0);
    58de:	80 e0       	ldi	r24, 0x00	; 0
    58e0:	90 e0       	ldi	r25, 0x00	; 0
    58e2:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <vTimer2_SetOCRValue>
										vLCD_GO_TO(2, 0);
    58e6:	82 e0       	ldi	r24, 0x02	; 2
    58e8:	60 e0       	ldi	r22, 0x00	; 0
    58ea:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <vLCD_GO_TO>
										vLCD_Send_String("Fan OFF");
    58ee:	8b e2       	ldi	r24, 0x2B	; 43
    58f0:	92 e0       	ldi	r25, 0x02	; 2
    58f2:	0e 94 05 1c 	call	0x380a	; 0x380a <vLCD_Send_String>
										vSet_Pin_OUTPUTvalue(PORT_C, PIN_5, LOW);
    58f6:	82 e0       	ldi	r24, 0x02	; 2
    58f8:	65 e0       	ldi	r22, 0x05	; 5
    58fa:	40 e0       	ldi	r20, 0x00	; 0
    58fc:	0e 94 64 14 	call	0x28c8	; 0x28c8 <vSet_Pin_OUTPUTvalue>
									}

									vTIMER2_Start();
    5900:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <vTIMER2_Start>

									prevReading = Temp; // Update previous temperature
    5904:	9e 01       	movw	r18, r28
    5906:	2c 5f       	subi	r18, 0xFC	; 252
    5908:	3e 4f       	sbci	r19, 0xFE	; 254
    590a:	fe 01       	movw	r30, r28
    590c:	e4 5f       	subi	r30, 0xF4	; 244
    590e:	fe 4f       	sbci	r31, 0xFE	; 254
    5910:	80 81       	ld	r24, Z
    5912:	91 81       	ldd	r25, Z+1	; 0x01
    5914:	a2 81       	ldd	r26, Z+2	; 0x02
    5916:	b3 81       	ldd	r27, Z+3	; 0x03
    5918:	f9 01       	movw	r30, r18
    591a:	80 83       	st	Z, r24
    591c:	91 83       	std	Z+1, r25	; 0x01
    591e:	a2 83       	std	Z+2, r26	; 0x02
    5920:	b3 83       	std	Z+3, r27	; 0x03
    5922:	06 c0       	rjmp	.+12     	; 0x5930 <main+0x1a82>

								}
							} else {
								vLCD_Clear();
    5924:	0e 94 4c 1c 	call	0x3898	; 0x3898 <vLCD_Clear>
								vLCD_Send_String("Error"); // Display error message if ADC read fails
    5928:	83 e3       	ldi	r24, 0x33	; 51
    592a:	92 e0       	ldi	r25, 0x02	; 2
    592c:	0e 94 05 1c 	call	0x380a	; 0x380a <vLCD_Send_String>
							}

							// Check for '0' key press to return to control menu
							u8 Back1 = u8KEY_PRESSED();
    5930:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <u8KEY_PRESSED>
    5934:	fe 01       	movw	r30, r28
    5936:	ee 50       	subi	r30, 0x0E	; 14
    5938:	ff 4f       	sbci	r31, 0xFF	; 255
    593a:	80 83       	st	Z, r24
							if(Back1!=0xff){
    593c:	fe 01       	movw	r30, r28
    593e:	ee 50       	subi	r30, 0x0E	; 14
    5940:	ff 4f       	sbci	r31, 0xFF	; 255
    5942:	80 81       	ld	r24, Z
    5944:	8f 3f       	cpi	r24, 0xFF	; 255
    5946:	91 f0       	breq	.+36     	; 0x596c <main+0x1abe>
								if(Back1 - '0' == 0) {
    5948:	fe 01       	movw	r30, r28
    594a:	ee 50       	subi	r30, 0x0E	; 14
    594c:	ff 4f       	sbci	r31, 0xFF	; 255
    594e:	80 81       	ld	r24, Z
    5950:	80 33       	cpi	r24, 0x30	; 48
    5952:	61 f4       	brne	.+24     	; 0x596c <main+0x1abe>
									start2=1;
    5954:	fe 01       	movw	r30, r28
    5956:	e6 50       	subi	r30, 0x06	; 6
    5958:	ff 4f       	sbci	r31, 0xFF	; 255
    595a:	81 e0       	ldi	r24, 0x01	; 1
    595c:	80 83       	st	Z, r24
									vSet_Pin_OUTPUTvalue(PORT_C, PIN_5, LOW);
    595e:	82 e0       	ldi	r24, 0x02	; 2
    5960:	65 e0       	ldi	r22, 0x05	; 5
    5962:	40 e0       	ldi	r20, 0x00	; 0
    5964:	0e 94 64 14 	call	0x28c8	; 0x28c8 <vSet_Pin_OUTPUTvalue>
    5968:	0c 94 5b 24 	jmp	0x48b6	; 0x48b6 <main+0xa08>
    596c:	80 e0       	ldi	r24, 0x00	; 0
    596e:	90 e0       	ldi	r25, 0x00	; 0
    5970:	aa ef       	ldi	r26, 0xFA	; 250
    5972:	b3 e4       	ldi	r27, 0x43	; 67
    5974:	89 8f       	std	Y+25, r24	; 0x19
    5976:	9a 8f       	std	Y+26, r25	; 0x1a
    5978:	ab 8f       	std	Y+27, r26	; 0x1b
    597a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    597c:	69 8d       	ldd	r22, Y+25	; 0x19
    597e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5980:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5982:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5984:	20 e0       	ldi	r18, 0x00	; 0
    5986:	30 e0       	ldi	r19, 0x00	; 0
    5988:	4a ef       	ldi	r20, 0xFA	; 250
    598a:	54 e4       	ldi	r21, 0x44	; 68
    598c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5990:	dc 01       	movw	r26, r24
    5992:	cb 01       	movw	r24, r22
    5994:	8d 8b       	std	Y+21, r24	; 0x15
    5996:	9e 8b       	std	Y+22, r25	; 0x16
    5998:	af 8b       	std	Y+23, r26	; 0x17
    599a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    599c:	6d 89       	ldd	r22, Y+21	; 0x15
    599e:	7e 89       	ldd	r23, Y+22	; 0x16
    59a0:	8f 89       	ldd	r24, Y+23	; 0x17
    59a2:	98 8d       	ldd	r25, Y+24	; 0x18
    59a4:	20 e0       	ldi	r18, 0x00	; 0
    59a6:	30 e0       	ldi	r19, 0x00	; 0
    59a8:	40 e8       	ldi	r20, 0x80	; 128
    59aa:	5f e3       	ldi	r21, 0x3F	; 63
    59ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    59b0:	88 23       	and	r24, r24
    59b2:	2c f4       	brge	.+10     	; 0x59be <main+0x1b10>
		__ticks = 1;
    59b4:	81 e0       	ldi	r24, 0x01	; 1
    59b6:	90 e0       	ldi	r25, 0x00	; 0
    59b8:	9c 8b       	std	Y+20, r25	; 0x14
    59ba:	8b 8b       	std	Y+19, r24	; 0x13
    59bc:	3f c0       	rjmp	.+126    	; 0x5a3c <main+0x1b8e>
	else if (__tmp > 65535)
    59be:	6d 89       	ldd	r22, Y+21	; 0x15
    59c0:	7e 89       	ldd	r23, Y+22	; 0x16
    59c2:	8f 89       	ldd	r24, Y+23	; 0x17
    59c4:	98 8d       	ldd	r25, Y+24	; 0x18
    59c6:	20 e0       	ldi	r18, 0x00	; 0
    59c8:	3f ef       	ldi	r19, 0xFF	; 255
    59ca:	4f e7       	ldi	r20, 0x7F	; 127
    59cc:	57 e4       	ldi	r21, 0x47	; 71
    59ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    59d2:	18 16       	cp	r1, r24
    59d4:	4c f5       	brge	.+82     	; 0x5a28 <main+0x1b7a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    59d6:	69 8d       	ldd	r22, Y+25	; 0x19
    59d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    59da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    59dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    59de:	20 e0       	ldi	r18, 0x00	; 0
    59e0:	30 e0       	ldi	r19, 0x00	; 0
    59e2:	40 e2       	ldi	r20, 0x20	; 32
    59e4:	51 e4       	ldi	r21, 0x41	; 65
    59e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    59ea:	dc 01       	movw	r26, r24
    59ec:	cb 01       	movw	r24, r22
    59ee:	bc 01       	movw	r22, r24
    59f0:	cd 01       	movw	r24, r26
    59f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    59f6:	dc 01       	movw	r26, r24
    59f8:	cb 01       	movw	r24, r22
    59fa:	9c 8b       	std	Y+20, r25	; 0x14
    59fc:	8b 8b       	std	Y+19, r24	; 0x13
    59fe:	0f c0       	rjmp	.+30     	; 0x5a1e <main+0x1b70>
    5a00:	88 ec       	ldi	r24, 0xC8	; 200
    5a02:	90 e0       	ldi	r25, 0x00	; 0
    5a04:	9a 8b       	std	Y+18, r25	; 0x12
    5a06:	89 8b       	std	Y+17, r24	; 0x11
    5a08:	89 89       	ldd	r24, Y+17	; 0x11
    5a0a:	9a 89       	ldd	r25, Y+18	; 0x12
    5a0c:	01 97       	sbiw	r24, 0x01	; 1
    5a0e:	f1 f7       	brne	.-4      	; 0x5a0c <main+0x1b5e>
    5a10:	9a 8b       	std	Y+18, r25	; 0x12
    5a12:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a14:	8b 89       	ldd	r24, Y+19	; 0x13
    5a16:	9c 89       	ldd	r25, Y+20	; 0x14
    5a18:	01 97       	sbiw	r24, 0x01	; 1
    5a1a:	9c 8b       	std	Y+20, r25	; 0x14
    5a1c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a1e:	8b 89       	ldd	r24, Y+19	; 0x13
    5a20:	9c 89       	ldd	r25, Y+20	; 0x14
    5a22:	00 97       	sbiw	r24, 0x00	; 0
    5a24:	69 f7       	brne	.-38     	; 0x5a00 <main+0x1b52>
    5a26:	e2 cd       	rjmp	.-1084   	; 0x55ec <main+0x173e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a28:	6d 89       	ldd	r22, Y+21	; 0x15
    5a2a:	7e 89       	ldd	r23, Y+22	; 0x16
    5a2c:	8f 89       	ldd	r24, Y+23	; 0x17
    5a2e:	98 8d       	ldd	r25, Y+24	; 0x18
    5a30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a34:	dc 01       	movw	r26, r24
    5a36:	cb 01       	movw	r24, r22
    5a38:	9c 8b       	std	Y+20, r25	; 0x14
    5a3a:	8b 8b       	std	Y+19, r24	; 0x13
    5a3c:	8b 89       	ldd	r24, Y+19	; 0x13
    5a3e:	9c 89       	ldd	r25, Y+20	; 0x14
    5a40:	98 8b       	std	Y+16, r25	; 0x10
    5a42:	8f 87       	std	Y+15, r24	; 0x0f
    5a44:	8f 85       	ldd	r24, Y+15	; 0x0f
    5a46:	98 89       	ldd	r25, Y+16	; 0x10
    5a48:	01 97       	sbiw	r24, 0x01	; 1
    5a4a:	f1 f7       	brne	.-4      	; 0x5a48 <main+0x1b9a>
    5a4c:	98 8b       	std	Y+16, r25	; 0x10
    5a4e:	8f 87       	std	Y+15, r24	; 0x0f
    5a50:	cd cd       	rjmp	.-1126   	; 0x55ec <main+0x173e>
							_delay_ms(500); // Adjust delay as needed
						}


					}
					else if(received_operation-'0' == 4)
    5a52:	fe 01       	movw	r30, r28
    5a54:	e7 50       	subi	r30, 0x07	; 7
    5a56:	ff 4f       	sbci	r31, 0xFF	; 255
    5a58:	80 81       	ld	r24, Z
    5a5a:	84 33       	cpi	r24, 0x34	; 52
    5a5c:	11 f0       	breq	.+4      	; 0x5a62 <main+0x1bb4>
    5a5e:	0c 94 5b 24 	jmp	0x48b6	; 0x48b6 <main+0xa08>
					{
						while(1){
							readdigit2 = MADC_u8StartConversion(CHANNEL_0);
    5a62:	80 e0       	ldi	r24, 0x00	; 0
    5a64:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <MADC_u8StartConversion>
    5a68:	fe 01       	movw	r30, r28
    5a6a:	e0 5f       	subi	r30, 0xF0	; 240
    5a6c:	fe 4f       	sbci	r31, 0xFE	; 254
    5a6e:	91 83       	std	Z+1, r25	; 0x01
    5a70:	80 83       	st	Z, r24

							if (readdigit2 != 0) { // Ensure a valid reading is obtained
    5a72:	fe 01       	movw	r30, r28
    5a74:	e0 5f       	subi	r30, 0xF0	; 240
    5a76:	fe 4f       	sbci	r31, 0xFE	; 254
    5a78:	80 81       	ld	r24, Z
    5a7a:	91 81       	ldd	r25, Z+1	; 0x01
    5a7c:	00 97       	sbiw	r24, 0x00	; 0
    5a7e:	09 f4       	brne	.+2      	; 0x5a82 <main+0x1bd4>
    5a80:	a9 c0       	rjmp	.+338    	; 0x5bd4 <main+0x1d26>

								//#########################  Room 1 #############################
								//For the LDR, MAX Vo = (5*5.5k)/(5.5k+5k)=2.62 V (DARK)
								//For the LDR, MIN Vo = (5*1.5k)/(1.5k+5k)=0.8 V (LIGHT)
								LDR_room = (u32)(readdigit2 * 2560UL) / 1024UL; // Convert ADC value to voltage
    5a82:	fe 01       	movw	r30, r28
    5a84:	e0 5f       	subi	r30, 0xF0	; 240
    5a86:	fe 4f       	sbci	r31, 0xFE	; 254
    5a88:	80 81       	ld	r24, Z
    5a8a:	91 81       	ldd	r25, Z+1	; 0x01
    5a8c:	cc 01       	movw	r24, r24
    5a8e:	a0 e0       	ldi	r26, 0x00	; 0
    5a90:	b0 e0       	ldi	r27, 0x00	; 0
    5a92:	20 e0       	ldi	r18, 0x00	; 0
    5a94:	3a e0       	ldi	r19, 0x0A	; 10
    5a96:	40 e0       	ldi	r20, 0x00	; 0
    5a98:	50 e0       	ldi	r21, 0x00	; 0
    5a9a:	bc 01       	movw	r22, r24
    5a9c:	cd 01       	movw	r24, r26
    5a9e:	0e 94 84 2e 	call	0x5d08	; 0x5d08 <__mulsi3>
    5aa2:	dc 01       	movw	r26, r24
    5aa4:	cb 01       	movw	r24, r22
    5aa6:	fe 01       	movw	r30, r28
    5aa8:	e4 50       	subi	r30, 0x04	; 4
    5aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    5aac:	07 2e       	mov	r0, r23
    5aae:	7a e0       	ldi	r23, 0x0A	; 10
    5ab0:	b6 95       	lsr	r27
    5ab2:	a7 95       	ror	r26
    5ab4:	97 95       	ror	r25
    5ab6:	87 95       	ror	r24
    5ab8:	7a 95       	dec	r23
    5aba:	d1 f7       	brne	.-12     	; 0x5ab0 <main+0x1c02>
    5abc:	70 2d       	mov	r23, r0
    5abe:	80 83       	st	Z, r24
    5ac0:	91 83       	std	Z+1, r25	; 0x01
    5ac2:	a2 83       	std	Z+2, r26	; 0x02
    5ac4:	b3 83       	std	Z+3, r27	; 0x03

								// Update LCD only if temperature has changed beyond threshold
								if (abs((int)(LDR_room - LDRprevReading)) >= LDR_UPDATE_THRESHOLD) {
    5ac6:	fe 01       	movw	r30, r28
    5ac8:	e4 50       	subi	r30, 0x04	; 4
    5aca:	ff 4f       	sbci	r31, 0xFF	; 255
    5acc:	20 81       	ld	r18, Z
    5ace:	31 81       	ldd	r19, Z+1	; 0x01
    5ad0:	fe 01       	movw	r30, r28
    5ad2:	e0 50       	subi	r30, 0x00	; 0
    5ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    5ad6:	80 81       	ld	r24, Z
    5ad8:	91 81       	ldd	r25, Z+1	; 0x01
    5ada:	a9 01       	movw	r20, r18
    5adc:	48 1b       	sub	r20, r24
    5ade:	59 0b       	sbc	r21, r25
    5ae0:	ca 01       	movw	r24, r20
    5ae2:	cb 5e       	subi	r28, 0xEB	; 235
    5ae4:	de 4f       	sbci	r29, 0xFE	; 254
    5ae6:	99 83       	std	Y+1, r25	; 0x01
    5ae8:	88 83       	st	Y, r24
    5aea:	c5 51       	subi	r28, 0x15	; 21
    5aec:	d1 40       	sbci	r29, 0x01	; 1
    5aee:	cb 5e       	subi	r28, 0xEB	; 235
    5af0:	de 4f       	sbci	r29, 0xFE	; 254
    5af2:	88 81       	ld	r24, Y
    5af4:	99 81       	ldd	r25, Y+1	; 0x01
    5af6:	c5 51       	subi	r28, 0x15	; 21
    5af8:	d1 40       	sbci	r29, 0x01	; 1
    5afa:	99 23       	and	r25, r25
    5afc:	7c f4       	brge	.+30     	; 0x5b1c <main+0x1c6e>
    5afe:	cb 5e       	subi	r28, 0xEB	; 235
    5b00:	de 4f       	sbci	r29, 0xFE	; 254
    5b02:	e8 81       	ld	r30, Y
    5b04:	f9 81       	ldd	r31, Y+1	; 0x01
    5b06:	c5 51       	subi	r28, 0x15	; 21
    5b08:	d1 40       	sbci	r29, 0x01	; 1
    5b0a:	f0 95       	com	r31
    5b0c:	e1 95       	neg	r30
    5b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    5b10:	cb 5e       	subi	r28, 0xEB	; 235
    5b12:	de 4f       	sbci	r29, 0xFE	; 254
    5b14:	f9 83       	std	Y+1, r31	; 0x01
    5b16:	e8 83       	st	Y, r30
    5b18:	c5 51       	subi	r28, 0x15	; 21
    5b1a:	d1 40       	sbci	r29, 0x01	; 1
    5b1c:	cb 5e       	subi	r28, 0xEB	; 235
    5b1e:	de 4f       	sbci	r29, 0xFE	; 254
    5b20:	48 81       	ld	r20, Y
    5b22:	59 81       	ldd	r21, Y+1	; 0x01
    5b24:	c5 51       	subi	r28, 0x15	; 21
    5b26:	d1 40       	sbci	r29, 0x01	; 1
    5b28:	14 16       	cp	r1, r20
    5b2a:	15 06       	cpc	r1, r21
    5b2c:	0c f0       	brlt	.+2      	; 0x5b30 <main+0x1c82>
    5b2e:	52 c0       	rjmp	.+164    	; 0x5bd4 <main+0x1d26>
									vLCD_Clear(); // Clear the LCD screen
    5b30:	0e 94 4c 1c 	call	0x3898	; 0x3898 <vLCD_Clear>
									vLCD_Send_String("Light:");
    5b34:	89 e3       	ldi	r24, 0x39	; 57
    5b36:	92 e0       	ldi	r25, 0x02	; 2
    5b38:	0e 94 05 1c 	call	0x380a	; 0x380a <vLCD_Send_String>
									vLCD_GO_TO(1, 7);
    5b3c:	81 e0       	ldi	r24, 0x01	; 1
    5b3e:	67 e0       	ldi	r22, 0x07	; 7
    5b40:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <vLCD_GO_TO>
									vLCD_Convert_numTOchar(LDR_room);
    5b44:	fe 01       	movw	r30, r28
    5b46:	e4 50       	subi	r30, 0x04	; 4
    5b48:	ff 4f       	sbci	r31, 0xFF	; 255
    5b4a:	80 81       	ld	r24, Z
    5b4c:	91 81       	ldd	r25, Z+1	; 0x01
    5b4e:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <vLCD_Convert_numTOchar>
									vLCD_Send_String(" mv");
    5b52:	80 e4       	ldi	r24, 0x40	; 64
    5b54:	92 e0       	ldi	r25, 0x02	; 2
    5b56:	0e 94 05 1c 	call	0x380a	; 0x380a <vLCD_Send_String>

									if (LDR_room < 1000)
    5b5a:	fe 01       	movw	r30, r28
    5b5c:	e4 50       	subi	r30, 0x04	; 4
    5b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    5b60:	80 81       	ld	r24, Z
    5b62:	91 81       	ldd	r25, Z+1	; 0x01
    5b64:	a2 81       	ldd	r26, Z+2	; 0x02
    5b66:	b3 81       	ldd	r27, Z+3	; 0x03
    5b68:	88 3e       	cpi	r24, 0xE8	; 232
    5b6a:	53 e0       	ldi	r21, 0x03	; 3
    5b6c:	95 07       	cpc	r25, r21
    5b6e:	50 e0       	ldi	r21, 0x00	; 0
    5b70:	a5 07       	cpc	r26, r21
    5b72:	50 e0       	ldi	r21, 0x00	; 0
    5b74:	b5 07       	cpc	r27, r21
    5b76:	80 f4       	brcc	.+32     	; 0x5b98 <main+0x1cea>
									{
										vSet_Pin_OUTPUTvalue(PORT_C, PIN_2, HIGH);
    5b78:	82 e0       	ldi	r24, 0x02	; 2
    5b7a:	62 e0       	ldi	r22, 0x02	; 2
    5b7c:	41 e0       	ldi	r20, 0x01	; 1
    5b7e:	0e 94 64 14 	call	0x28c8	; 0x28c8 <vSet_Pin_OUTPUTvalue>
										vSet_Pin_OUTPUTvalue(PORT_C, PIN_3, HIGH);
    5b82:	82 e0       	ldi	r24, 0x02	; 2
    5b84:	63 e0       	ldi	r22, 0x03	; 3
    5b86:	41 e0       	ldi	r20, 0x01	; 1
    5b88:	0e 94 64 14 	call	0x28c8	; 0x28c8 <vSet_Pin_OUTPUTvalue>
										vSet_Pin_OUTPUTvalue(PORT_C, PIN_4, HIGH);
    5b8c:	82 e0       	ldi	r24, 0x02	; 2
    5b8e:	64 e0       	ldi	r22, 0x04	; 4
    5b90:	41 e0       	ldi	r20, 0x01	; 1
    5b92:	0e 94 64 14 	call	0x28c8	; 0x28c8 <vSet_Pin_OUTPUTvalue>
    5b96:	0f c0       	rjmp	.+30     	; 0x5bb6 <main+0x1d08>
									}
									else
									{
										vSet_Pin_OUTPUTvalue(PORT_C, PIN_2, LOW);
    5b98:	82 e0       	ldi	r24, 0x02	; 2
    5b9a:	62 e0       	ldi	r22, 0x02	; 2
    5b9c:	40 e0       	ldi	r20, 0x00	; 0
    5b9e:	0e 94 64 14 	call	0x28c8	; 0x28c8 <vSet_Pin_OUTPUTvalue>
										vSet_Pin_OUTPUTvalue(PORT_C, PIN_3, LOW);
    5ba2:	82 e0       	ldi	r24, 0x02	; 2
    5ba4:	63 e0       	ldi	r22, 0x03	; 3
    5ba6:	40 e0       	ldi	r20, 0x00	; 0
    5ba8:	0e 94 64 14 	call	0x28c8	; 0x28c8 <vSet_Pin_OUTPUTvalue>
										vSet_Pin_OUTPUTvalue(PORT_C, PIN_4, LOW);
    5bac:	82 e0       	ldi	r24, 0x02	; 2
    5bae:	64 e0       	ldi	r22, 0x04	; 4
    5bb0:	40 e0       	ldi	r20, 0x00	; 0
    5bb2:	0e 94 64 14 	call	0x28c8	; 0x28c8 <vSet_Pin_OUTPUTvalue>
									}

									LDRprevReading = LDR_room; // Update previous temperature
    5bb6:	9e 01       	movw	r18, r28
    5bb8:	20 50       	subi	r18, 0x00	; 0
    5bba:	3f 4f       	sbci	r19, 0xFF	; 255
    5bbc:	fe 01       	movw	r30, r28
    5bbe:	e4 50       	subi	r30, 0x04	; 4
    5bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    5bc2:	80 81       	ld	r24, Z
    5bc4:	91 81       	ldd	r25, Z+1	; 0x01
    5bc6:	a2 81       	ldd	r26, Z+2	; 0x02
    5bc8:	b3 81       	ldd	r27, Z+3	; 0x03
    5bca:	f9 01       	movw	r30, r18
    5bcc:	80 83       	st	Z, r24
    5bce:	91 83       	std	Z+1, r25	; 0x01
    5bd0:	a2 83       	std	Z+2, r26	; 0x02
    5bd2:	b3 83       	std	Z+3, r27	; 0x03
								//vLCD_Send_String("Error"); // Display error message if ADC read fails

							}

							// Check for '0' key press to return to control menu
							u8 Back2 = u8KEY_PRESSED();
    5bd4:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <u8KEY_PRESSED>
    5bd8:	fe 01       	movw	r30, r28
    5bda:	e1 51       	subi	r30, 0x11	; 17
    5bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    5bde:	80 83       	st	Z, r24
							if(Back2!=0xff){
    5be0:	fe 01       	movw	r30, r28
    5be2:	e1 51       	subi	r30, 0x11	; 17
    5be4:	ff 4f       	sbci	r31, 0xFF	; 255
    5be6:	80 81       	ld	r24, Z
    5be8:	8f 3f       	cpi	r24, 0xFF	; 255
    5bea:	69 f0       	breq	.+26     	; 0x5c06 <main+0x1d58>
								if(Back2 - '0' == 0) {
    5bec:	fe 01       	movw	r30, r28
    5bee:	e1 51       	subi	r30, 0x11	; 17
    5bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    5bf2:	80 81       	ld	r24, Z
    5bf4:	80 33       	cpi	r24, 0x30	; 48
    5bf6:	39 f4       	brne	.+14     	; 0x5c06 <main+0x1d58>
									start2=1;
    5bf8:	fe 01       	movw	r30, r28
    5bfa:	e6 50       	subi	r30, 0x06	; 6
    5bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    5bfe:	81 e0       	ldi	r24, 0x01	; 1
    5c00:	80 83       	st	Z, r24
    5c02:	0c 94 5b 24 	jmp	0x48b6	; 0x48b6 <main+0xa08>
									break;
    5c06:	80 e0       	ldi	r24, 0x00	; 0
    5c08:	90 e0       	ldi	r25, 0x00	; 0
    5c0a:	aa ef       	ldi	r26, 0xFA	; 250
    5c0c:	b3 e4       	ldi	r27, 0x43	; 67
    5c0e:	8b 87       	std	Y+11, r24	; 0x0b
    5c10:	9c 87       	std	Y+12, r25	; 0x0c
    5c12:	ad 87       	std	Y+13, r26	; 0x0d
    5c14:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5c16:	6b 85       	ldd	r22, Y+11	; 0x0b
    5c18:	7c 85       	ldd	r23, Y+12	; 0x0c
    5c1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    5c1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    5c1e:	20 e0       	ldi	r18, 0x00	; 0
    5c20:	30 e0       	ldi	r19, 0x00	; 0
    5c22:	4a ef       	ldi	r20, 0xFA	; 250
    5c24:	54 e4       	ldi	r21, 0x44	; 68
    5c26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c2a:	dc 01       	movw	r26, r24
    5c2c:	cb 01       	movw	r24, r22
    5c2e:	8f 83       	std	Y+7, r24	; 0x07
    5c30:	98 87       	std	Y+8, r25	; 0x08
    5c32:	a9 87       	std	Y+9, r26	; 0x09
    5c34:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5c36:	6f 81       	ldd	r22, Y+7	; 0x07
    5c38:	78 85       	ldd	r23, Y+8	; 0x08
    5c3a:	89 85       	ldd	r24, Y+9	; 0x09
    5c3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c3e:	20 e0       	ldi	r18, 0x00	; 0
    5c40:	30 e0       	ldi	r19, 0x00	; 0
    5c42:	40 e8       	ldi	r20, 0x80	; 128
    5c44:	5f e3       	ldi	r21, 0x3F	; 63
    5c46:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5c4a:	88 23       	and	r24, r24
    5c4c:	2c f4       	brge	.+10     	; 0x5c58 <main+0x1daa>
		__ticks = 1;
    5c4e:	81 e0       	ldi	r24, 0x01	; 1
    5c50:	90 e0       	ldi	r25, 0x00	; 0
    5c52:	9e 83       	std	Y+6, r25	; 0x06
    5c54:	8d 83       	std	Y+5, r24	; 0x05
    5c56:	3f c0       	rjmp	.+126    	; 0x5cd6 <main+0x1e28>
	else if (__tmp > 65535)
    5c58:	6f 81       	ldd	r22, Y+7	; 0x07
    5c5a:	78 85       	ldd	r23, Y+8	; 0x08
    5c5c:	89 85       	ldd	r24, Y+9	; 0x09
    5c5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c60:	20 e0       	ldi	r18, 0x00	; 0
    5c62:	3f ef       	ldi	r19, 0xFF	; 255
    5c64:	4f e7       	ldi	r20, 0x7F	; 127
    5c66:	57 e4       	ldi	r21, 0x47	; 71
    5c68:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5c6c:	18 16       	cp	r1, r24
    5c6e:	4c f5       	brge	.+82     	; 0x5cc2 <main+0x1e14>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c70:	6b 85       	ldd	r22, Y+11	; 0x0b
    5c72:	7c 85       	ldd	r23, Y+12	; 0x0c
    5c74:	8d 85       	ldd	r24, Y+13	; 0x0d
    5c76:	9e 85       	ldd	r25, Y+14	; 0x0e
    5c78:	20 e0       	ldi	r18, 0x00	; 0
    5c7a:	30 e0       	ldi	r19, 0x00	; 0
    5c7c:	40 e2       	ldi	r20, 0x20	; 32
    5c7e:	51 e4       	ldi	r21, 0x41	; 65
    5c80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c84:	dc 01       	movw	r26, r24
    5c86:	cb 01       	movw	r24, r22
    5c88:	bc 01       	movw	r22, r24
    5c8a:	cd 01       	movw	r24, r26
    5c8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c90:	dc 01       	movw	r26, r24
    5c92:	cb 01       	movw	r24, r22
    5c94:	9e 83       	std	Y+6, r25	; 0x06
    5c96:	8d 83       	std	Y+5, r24	; 0x05
    5c98:	0f c0       	rjmp	.+30     	; 0x5cb8 <main+0x1e0a>
    5c9a:	88 ec       	ldi	r24, 0xC8	; 200
    5c9c:	90 e0       	ldi	r25, 0x00	; 0
    5c9e:	9c 83       	std	Y+4, r25	; 0x04
    5ca0:	8b 83       	std	Y+3, r24	; 0x03
    5ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    5ca4:	9c 81       	ldd	r25, Y+4	; 0x04
    5ca6:	01 97       	sbiw	r24, 0x01	; 1
    5ca8:	f1 f7       	brne	.-4      	; 0x5ca6 <main+0x1df8>
    5caa:	9c 83       	std	Y+4, r25	; 0x04
    5cac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5cae:	8d 81       	ldd	r24, Y+5	; 0x05
    5cb0:	9e 81       	ldd	r25, Y+6	; 0x06
    5cb2:	01 97       	sbiw	r24, 0x01	; 1
    5cb4:	9e 83       	std	Y+6, r25	; 0x06
    5cb6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5cb8:	8d 81       	ldd	r24, Y+5	; 0x05
    5cba:	9e 81       	ldd	r25, Y+6	; 0x06
    5cbc:	00 97       	sbiw	r24, 0x00	; 0
    5cbe:	69 f7       	brne	.-38     	; 0x5c9a <main+0x1dec>
    5cc0:	d0 ce       	rjmp	.-608    	; 0x5a62 <main+0x1bb4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5cc2:	6f 81       	ldd	r22, Y+7	; 0x07
    5cc4:	78 85       	ldd	r23, Y+8	; 0x08
    5cc6:	89 85       	ldd	r24, Y+9	; 0x09
    5cc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    5cca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5cce:	dc 01       	movw	r26, r24
    5cd0:	cb 01       	movw	r24, r22
    5cd2:	9e 83       	std	Y+6, r25	; 0x06
    5cd4:	8d 83       	std	Y+5, r24	; 0x05
    5cd6:	8d 81       	ldd	r24, Y+5	; 0x05
    5cd8:	9e 81       	ldd	r25, Y+6	; 0x06
    5cda:	9a 83       	std	Y+2, r25	; 0x02
    5cdc:	89 83       	std	Y+1, r24	; 0x01
    5cde:	89 81       	ldd	r24, Y+1	; 0x01
    5ce0:	9a 81       	ldd	r25, Y+2	; 0x02
    5ce2:	01 97       	sbiw	r24, 0x01	; 1
    5ce4:	f1 f7       	brne	.-4      	; 0x5ce2 <main+0x1e34>
    5ce6:	9a 83       	std	Y+2, r25	; 0x02
    5ce8:	89 83       	std	Y+1, r24	; 0x01
    5cea:	bb ce       	rjmp	.-650    	; 0x5a62 <main+0x1bb4>





	return 0; // Return 0 to indicate successful execution
    5cec:	80 e0       	ldi	r24, 0x00	; 0
    5cee:	90 e0       	ldi	r25, 0x00	; 0
}
    5cf0:	c8 5e       	subi	r28, 0xE8	; 232
    5cf2:	de 4f       	sbci	r29, 0xFE	; 254
    5cf4:	0f b6       	in	r0, 0x3f	; 63
    5cf6:	f8 94       	cli
    5cf8:	de bf       	out	0x3e, r29	; 62
    5cfa:	0f be       	out	0x3f, r0	; 63
    5cfc:	cd bf       	out	0x3d, r28	; 61
    5cfe:	cf 91       	pop	r28
    5d00:	df 91       	pop	r29
    5d02:	1f 91       	pop	r17
    5d04:	0f 91       	pop	r16
    5d06:	08 95       	ret

00005d08 <__mulsi3>:
    5d08:	62 9f       	mul	r22, r18
    5d0a:	d0 01       	movw	r26, r0
    5d0c:	73 9f       	mul	r23, r19
    5d0e:	f0 01       	movw	r30, r0
    5d10:	82 9f       	mul	r24, r18
    5d12:	e0 0d       	add	r30, r0
    5d14:	f1 1d       	adc	r31, r1
    5d16:	64 9f       	mul	r22, r20
    5d18:	e0 0d       	add	r30, r0
    5d1a:	f1 1d       	adc	r31, r1
    5d1c:	92 9f       	mul	r25, r18
    5d1e:	f0 0d       	add	r31, r0
    5d20:	83 9f       	mul	r24, r19
    5d22:	f0 0d       	add	r31, r0
    5d24:	74 9f       	mul	r23, r20
    5d26:	f0 0d       	add	r31, r0
    5d28:	65 9f       	mul	r22, r21
    5d2a:	f0 0d       	add	r31, r0
    5d2c:	99 27       	eor	r25, r25
    5d2e:	72 9f       	mul	r23, r18
    5d30:	b0 0d       	add	r27, r0
    5d32:	e1 1d       	adc	r30, r1
    5d34:	f9 1f       	adc	r31, r25
    5d36:	63 9f       	mul	r22, r19
    5d38:	b0 0d       	add	r27, r0
    5d3a:	e1 1d       	adc	r30, r1
    5d3c:	f9 1f       	adc	r31, r25
    5d3e:	bd 01       	movw	r22, r26
    5d40:	cf 01       	movw	r24, r30
    5d42:	11 24       	eor	r1, r1
    5d44:	08 95       	ret

00005d46 <__udivmodhi4>:
    5d46:	aa 1b       	sub	r26, r26
    5d48:	bb 1b       	sub	r27, r27
    5d4a:	51 e1       	ldi	r21, 0x11	; 17
    5d4c:	07 c0       	rjmp	.+14     	; 0x5d5c <__udivmodhi4_ep>

00005d4e <__udivmodhi4_loop>:
    5d4e:	aa 1f       	adc	r26, r26
    5d50:	bb 1f       	adc	r27, r27
    5d52:	a6 17       	cp	r26, r22
    5d54:	b7 07       	cpc	r27, r23
    5d56:	10 f0       	brcs	.+4      	; 0x5d5c <__udivmodhi4_ep>
    5d58:	a6 1b       	sub	r26, r22
    5d5a:	b7 0b       	sbc	r27, r23

00005d5c <__udivmodhi4_ep>:
    5d5c:	88 1f       	adc	r24, r24
    5d5e:	99 1f       	adc	r25, r25
    5d60:	5a 95       	dec	r21
    5d62:	a9 f7       	brne	.-22     	; 0x5d4e <__udivmodhi4_loop>
    5d64:	80 95       	com	r24
    5d66:	90 95       	com	r25
    5d68:	bc 01       	movw	r22, r24
    5d6a:	cd 01       	movw	r24, r26
    5d6c:	08 95       	ret

00005d6e <__udivmodsi4>:
    5d6e:	a1 e2       	ldi	r26, 0x21	; 33
    5d70:	1a 2e       	mov	r1, r26
    5d72:	aa 1b       	sub	r26, r26
    5d74:	bb 1b       	sub	r27, r27
    5d76:	fd 01       	movw	r30, r26
    5d78:	0d c0       	rjmp	.+26     	; 0x5d94 <__udivmodsi4_ep>

00005d7a <__udivmodsi4_loop>:
    5d7a:	aa 1f       	adc	r26, r26
    5d7c:	bb 1f       	adc	r27, r27
    5d7e:	ee 1f       	adc	r30, r30
    5d80:	ff 1f       	adc	r31, r31
    5d82:	a2 17       	cp	r26, r18
    5d84:	b3 07       	cpc	r27, r19
    5d86:	e4 07       	cpc	r30, r20
    5d88:	f5 07       	cpc	r31, r21
    5d8a:	20 f0       	brcs	.+8      	; 0x5d94 <__udivmodsi4_ep>
    5d8c:	a2 1b       	sub	r26, r18
    5d8e:	b3 0b       	sbc	r27, r19
    5d90:	e4 0b       	sbc	r30, r20
    5d92:	f5 0b       	sbc	r31, r21

00005d94 <__udivmodsi4_ep>:
    5d94:	66 1f       	adc	r22, r22
    5d96:	77 1f       	adc	r23, r23
    5d98:	88 1f       	adc	r24, r24
    5d9a:	99 1f       	adc	r25, r25
    5d9c:	1a 94       	dec	r1
    5d9e:	69 f7       	brne	.-38     	; 0x5d7a <__udivmodsi4_loop>
    5da0:	60 95       	com	r22
    5da2:	70 95       	com	r23
    5da4:	80 95       	com	r24
    5da6:	90 95       	com	r25
    5da8:	9b 01       	movw	r18, r22
    5daa:	ac 01       	movw	r20, r24
    5dac:	bd 01       	movw	r22, r26
    5dae:	cf 01       	movw	r24, r30
    5db0:	08 95       	ret

00005db2 <__prologue_saves__>:
    5db2:	2f 92       	push	r2
    5db4:	3f 92       	push	r3
    5db6:	4f 92       	push	r4
    5db8:	5f 92       	push	r5
    5dba:	6f 92       	push	r6
    5dbc:	7f 92       	push	r7
    5dbe:	8f 92       	push	r8
    5dc0:	9f 92       	push	r9
    5dc2:	af 92       	push	r10
    5dc4:	bf 92       	push	r11
    5dc6:	cf 92       	push	r12
    5dc8:	df 92       	push	r13
    5dca:	ef 92       	push	r14
    5dcc:	ff 92       	push	r15
    5dce:	0f 93       	push	r16
    5dd0:	1f 93       	push	r17
    5dd2:	cf 93       	push	r28
    5dd4:	df 93       	push	r29
    5dd6:	cd b7       	in	r28, 0x3d	; 61
    5dd8:	de b7       	in	r29, 0x3e	; 62
    5dda:	ca 1b       	sub	r28, r26
    5ddc:	db 0b       	sbc	r29, r27
    5dde:	0f b6       	in	r0, 0x3f	; 63
    5de0:	f8 94       	cli
    5de2:	de bf       	out	0x3e, r29	; 62
    5de4:	0f be       	out	0x3f, r0	; 63
    5de6:	cd bf       	out	0x3d, r28	; 61
    5de8:	09 94       	ijmp

00005dea <__epilogue_restores__>:
    5dea:	2a 88       	ldd	r2, Y+18	; 0x12
    5dec:	39 88       	ldd	r3, Y+17	; 0x11
    5dee:	48 88       	ldd	r4, Y+16	; 0x10
    5df0:	5f 84       	ldd	r5, Y+15	; 0x0f
    5df2:	6e 84       	ldd	r6, Y+14	; 0x0e
    5df4:	7d 84       	ldd	r7, Y+13	; 0x0d
    5df6:	8c 84       	ldd	r8, Y+12	; 0x0c
    5df8:	9b 84       	ldd	r9, Y+11	; 0x0b
    5dfa:	aa 84       	ldd	r10, Y+10	; 0x0a
    5dfc:	b9 84       	ldd	r11, Y+9	; 0x09
    5dfe:	c8 84       	ldd	r12, Y+8	; 0x08
    5e00:	df 80       	ldd	r13, Y+7	; 0x07
    5e02:	ee 80       	ldd	r14, Y+6	; 0x06
    5e04:	fd 80       	ldd	r15, Y+5	; 0x05
    5e06:	0c 81       	ldd	r16, Y+4	; 0x04
    5e08:	1b 81       	ldd	r17, Y+3	; 0x03
    5e0a:	aa 81       	ldd	r26, Y+2	; 0x02
    5e0c:	b9 81       	ldd	r27, Y+1	; 0x01
    5e0e:	ce 0f       	add	r28, r30
    5e10:	d1 1d       	adc	r29, r1
    5e12:	0f b6       	in	r0, 0x3f	; 63
    5e14:	f8 94       	cli
    5e16:	de bf       	out	0x3e, r29	; 62
    5e18:	0f be       	out	0x3f, r0	; 63
    5e1a:	cd bf       	out	0x3d, r28	; 61
    5e1c:	ed 01       	movw	r28, r26
    5e1e:	08 95       	ret

00005e20 <_exit>:
    5e20:	f8 94       	cli

00005e22 <__stop_program>:
    5e22:	ff cf       	rjmp	.-2      	; 0x5e22 <__stop_program>
